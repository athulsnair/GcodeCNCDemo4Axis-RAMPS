
GcodeCNCDemo4AxisRAMPS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800200  00002dca  00002e5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002dca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000156  00800262  00800262  00002ec0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002ec0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  00002f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000094ed  00000000  00000000  0000327c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020a0  00000000  00000000  0000c769  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e88  00000000  00000000  0000e809  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009f0  00000000  00000000  00010694  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000252f  00000000  00000000  00011084  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003a4a  00000000  00000000  000135b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  00016ffd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	22 c2       	rjmp	.+1092   	; 0x446 <__ctors_end>
       2:	00 00       	nop
       4:	51 c2       	rjmp	.+1186   	; 0x4a8 <__bad_interrupt>
       6:	00 00       	nop
       8:	4f c2       	rjmp	.+1182   	; 0x4a8 <__bad_interrupt>
       a:	00 00       	nop
       c:	4d c2       	rjmp	.+1178   	; 0x4a8 <__bad_interrupt>
       e:	00 00       	nop
      10:	4b c2       	rjmp	.+1174   	; 0x4a8 <__bad_interrupt>
      12:	00 00       	nop
      14:	49 c2       	rjmp	.+1170   	; 0x4a8 <__bad_interrupt>
      16:	00 00       	nop
      18:	47 c2       	rjmp	.+1166   	; 0x4a8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	45 c2       	rjmp	.+1162   	; 0x4a8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	43 c2       	rjmp	.+1158   	; 0x4a8 <__bad_interrupt>
      22:	00 00       	nop
      24:	41 c2       	rjmp	.+1154   	; 0x4a8 <__bad_interrupt>
      26:	00 00       	nop
      28:	3f c2       	rjmp	.+1150   	; 0x4a8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3d c2       	rjmp	.+1146   	; 0x4a8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	3b c2       	rjmp	.+1142   	; 0x4a8 <__bad_interrupt>
      32:	00 00       	nop
      34:	39 c2       	rjmp	.+1138   	; 0x4a8 <__bad_interrupt>
      36:	00 00       	nop
      38:	37 c2       	rjmp	.+1134   	; 0x4a8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	35 c2       	rjmp	.+1130   	; 0x4a8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	33 c2       	rjmp	.+1126   	; 0x4a8 <__bad_interrupt>
      42:	00 00       	nop
      44:	31 c2       	rjmp	.+1122   	; 0x4a8 <__bad_interrupt>
      46:	00 00       	nop
      48:	2f c2       	rjmp	.+1118   	; 0x4a8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2d c2       	rjmp	.+1114   	; 0x4a8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	2b c2       	rjmp	.+1110   	; 0x4a8 <__bad_interrupt>
      52:	00 00       	nop
      54:	29 c2       	rjmp	.+1106   	; 0x4a8 <__bad_interrupt>
      56:	00 00       	nop
      58:	27 c2       	rjmp	.+1102   	; 0x4a8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__vector_23>
      60:	23 c2       	rjmp	.+1094   	; 0x4a8 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__vector_25>
      68:	0c 94 91 10 	jmp	0x2122	; 0x2122 <__vector_26>
      6c:	1d c2       	rjmp	.+1082   	; 0x4a8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	1b c2       	rjmp	.+1078   	; 0x4a8 <__bad_interrupt>
      72:	00 00       	nop
      74:	19 c2       	rjmp	.+1074   	; 0x4a8 <__bad_interrupt>
      76:	00 00       	nop
      78:	17 c2       	rjmp	.+1070   	; 0x4a8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	15 c2       	rjmp	.+1066   	; 0x4a8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	13 c2       	rjmp	.+1062   	; 0x4a8 <__bad_interrupt>
      82:	00 00       	nop
      84:	11 c2       	rjmp	.+1058   	; 0x4a8 <__bad_interrupt>
      86:	00 00       	nop
      88:	0f c2       	rjmp	.+1054   	; 0x4a8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0d c2       	rjmp	.+1050   	; 0x4a8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0b c2       	rjmp	.+1046   	; 0x4a8 <__bad_interrupt>
      92:	00 00       	nop
      94:	09 c2       	rjmp	.+1042   	; 0x4a8 <__bad_interrupt>
      96:	00 00       	nop
      98:	07 c2       	rjmp	.+1038   	; 0x4a8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	05 c2       	rjmp	.+1034   	; 0x4a8 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	03 c2       	rjmp	.+1030   	; 0x4a8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	01 c2       	rjmp	.+1026   	; 0x4a8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ff c1       	rjmp	.+1022   	; 0x4a8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	fd c1       	rjmp	.+1018   	; 0x4a8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	fb c1       	rjmp	.+1014   	; 0x4a8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	f9 c1       	rjmp	.+1010   	; 0x4a8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	f7 c1       	rjmp	.+1006   	; 0x4a8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	f5 c1       	rjmp	.+1002   	; 0x4a8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	f3 c1       	rjmp	.+998    	; 0x4a8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	f1 c1       	rjmp	.+994    	; 0x4a8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ef c1       	rjmp	.+990    	; 0x4a8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ed c1       	rjmp	.+986    	; 0x4a8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	eb c1       	rjmp	.+982    	; 0x4a8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	e9 c1       	rjmp	.+978    	; 0x4a8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	e7 c1       	rjmp	.+974    	; 0x4a8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	e5 c1       	rjmp	.+970    	; 0x4a8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	e3 c1       	rjmp	.+966    	; 0x4a8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????
     130:	52 14       	cp	r5, r2
     132:	55 14       	cp	r5, r5
     134:	44 14       	cp	r4, r4
     136:	48 14       	cp	r4, r8
     138:	4e 14       	cp	r4, r14
     13a:	8c 14       	cp	r8, r12
     13c:	59 14       	cp	r5, r9
     13e:	5d 14       	cp	r5, r13
     140:	63 14       	cp	r6, r3
     142:	67 14       	cp	r6, r7
     144:	6b 14       	cp	r6, r11
     146:	71 14       	cp	r7, r1
     148:	75 14       	cp	r7, r5
     14a:	79 14       	cp	r7, r9
     14c:	8c 14       	cp	r8, r12
     14e:	7f 14       	cp	r7, r15
     150:	83 14       	cp	r8, r3
     152:	87 14       	cp	r8, r7

00000154 <__trampolines_end>:
     154:	4e 41       	sbci	r20, 0x1E	; 30
     156:	4e 49       	Address 0x00000156 is out of bounds.
.word	0xffff	; ????

00000157 <pstr_inity>:
     157:	49 4e 49 54 59                                      INITY

0000015c <pstr_inf>:
     15c:	49 4e 46                                            INF

0000015f <pwr_m10>:
     15f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     16f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000177 <pwr_p10>:
     177:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     187:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

0000018f <_ZZ4loopE3__c>:
     18f:	0d 0a 00                                            ...

00000192 <_ZZ5readyvE3__c>:
     192:	3e 00                                               >.

00000194 <_ZZ14processCommandvE3__c_1>:
     194:	4e 4f 43 48 45 43 4b 53 55 4d 20 00                 NOCHECKSUM .

000001a0 <_ZZ14processCommandvE3__c_0>:
     1a0:	42 41 44 43 48 45 43 4b 53 55 4d 20 00              BADCHECKSUM .

000001ad <_ZZ14processCommandvE3__c>:
     1ad:	42 41 44 4c 49 4e 45 4e 55 4d 20 00                 BADLINENUM .

000001b9 <_ZZ4helpvE3__c_9>:
     1b9:	41 6c 6c 20 63 6f 6d 6d 61 6e 64 73 20 6d 75 73     All commands mus
     1c9:	74 20 65 6e 64 20 77 69 74 68 20 61 20 6e 65 77     t end with a new
     1d9:	6c 69 6e 65 2e 00                                   line..

000001df <_ZZ4helpvE3__c_8>:
     1df:	4d 31 31 34 3b 20 2d 20 72 65 70 6f 72 74 20 70     M114; - report p
     1ef:	6f 73 69 74 69 6f 6e 20 61 6e 64 20 66 65 65 64     osition and feed
     1ff:	72 61 74 65 00                                      rate.

00000204 <_ZZ4helpvE3__c_7>:
     204:	4d 31 30 30 3b 20 2d 20 74 68 69 73 20 68 65 6c     M100; - this hel
     214:	70 20 6d 65 73 73 61 67 65 00                       p message.

0000021e <_ZZ4helpvE3__c_6>:
     21e:	4d 31 38 3b 20 2d 20 64 69 73 61 62 6c 65 20 6d     M18; - disable m
     22e:	6f 74 6f 72 73 00                                   otors.

00000234 <_ZZ4helpvE3__c_5>:
     234:	47 39 32 20 5b 58 2f 59 2f 5a 2f 45 28 73 74 65     G92 [X/Y/Z/E(ste
     244:	70 73 29 5d 3b 20 2d 20 63 68 61 6e 67 65 20 6c     ps)]; - change l
     254:	6f 67 69 63 61 6c 20 70 6f 73 69 74 69 6f 6e 00     ogical position.

00000264 <_ZZ4helpvE3__c_4>:
     264:	47 39 31 3b 20 2d 20 72 65 6c 61 74 69 76 65 20     G91; - relative 
     274:	6d 6f 64 65 00                                      mode.

00000279 <_ZZ4helpvE3__c_3>:
     279:	47 39 30 3b 20 2d 20 61 62 73 6f 6c 75 74 65 20     G90; - absolute 
     289:	6d 6f 64 65 00                                      mode.

0000028e <_ZZ4helpvE3__c_2>:
     28e:	47 30 34 20 50 5b 73 65 63 6f 6e 64 73 5d 3b 20     G04 P[seconds]; 
     29e:	2d 20 64 65 6c 61 79 00                             - delay.

000002a6 <_ZZ4helpvE3__c_1>:
     2a6:	47 30 30 2f 47 30 31 20 5b 58 2f 59 2f 5a 2f 45     G00/G01 [X/Y/Z/E
     2b6:	28 73 74 65 70 73 29 5d 20 5b 46 28 66 65 65 64     (steps)] [F(feed
     2c6:	72 61 74 65 29 5d 3b 20 2d 20 6c 69 6e 65 61 72     rate)]; - linear
     2d6:	20 6d 6f 76 65 00                                    move.

000002dc <_ZZ4helpvE3__c_0>:
     2dc:	43 6f 6d 6d 61 6e 64 73 3a 00                       Commands:.

000002e6 <_ZZ4helpvE3__c>:
     2e6:	47 63 6f 64 65 43 4e 43 44 65 6d 6f 36 41 78 69     GcodeCNCDemo6Axi
     2f6:	73 56 32 20 00                                      sV2 .

000002fb <_ZZ8feedratefE3__c_1>:
     2fb:	73 74 65 70 73 2f 73 2e 00                          steps/s..

00000304 <_ZZ8feedratefE3__c_0>:
     304:	73 74 65 70 73 2f 73 20 61 6e 64 20 6c 65 73 73     steps/s and less
     314:	20 74 68 61 6e 20 00                                 than .

0000031b <_ZZ8feedratefE3__c>:
     31b:	4e 65 77 20 66 65 65 64 72 61 74 65 20 6d 75 73     New feedrate mus
     32b:	74 20 62 65 20 67 72 65 61 74 65 72 20 74 68 61     t be greater tha
     33b:	6e 20 00                                            n .

0000033e <digital_pin_to_timer_PGM>:
     33e:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     36a:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000384 <digital_pin_to_bit_mask_PGM>:
     384:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     394:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     3a4:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     3b4:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     3c4:	04 08 10 20 40 80                                   ... @.

000003ca <digital_pin_to_port_PGM>:
     3ca:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     3da:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     3ea:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     3fa:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     40a:	0b 0b 0b 0b 0b 0b                                   ......

00000410 <port_to_output_PGM>:
     410:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     420:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000042a <port_to_mode_PGM>:
     42a:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     43a:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000444 <__ctors_start>:
     444:	c3 10       	cpse	r12, r3

00000446 <__ctors_end>:
     446:	11 24       	eor	r1, r1
     448:	1f be       	out	0x3f, r1	; 63
     44a:	cf ef       	ldi	r28, 0xFF	; 255
     44c:	d1 e2       	ldi	r29, 0x21	; 33
     44e:	de bf       	out	0x3e, r29	; 62
     450:	cd bf       	out	0x3d, r28	; 61
     452:	00 e0       	ldi	r16, 0x00	; 0
     454:	0c bf       	out	0x3c, r16	; 60

00000456 <__do_copy_data>:
     456:	12 e0       	ldi	r17, 0x02	; 2
     458:	a0 e0       	ldi	r26, 0x00	; 0
     45a:	b2 e0       	ldi	r27, 0x02	; 2
     45c:	ea ec       	ldi	r30, 0xCA	; 202
     45e:	fd e2       	ldi	r31, 0x2D	; 45
     460:	00 e0       	ldi	r16, 0x00	; 0
     462:	0b bf       	out	0x3b, r16	; 59
     464:	02 c0       	rjmp	.+4      	; 0x46a <__do_copy_data+0x14>
     466:	07 90       	elpm	r0, Z+
     468:	0d 92       	st	X+, r0
     46a:	a2 36       	cpi	r26, 0x62	; 98
     46c:	b1 07       	cpc	r27, r17
     46e:	d9 f7       	brne	.-10     	; 0x466 <__do_copy_data+0x10>

00000470 <__do_clear_bss>:
     470:	23 e0       	ldi	r18, 0x03	; 3
     472:	a2 e6       	ldi	r26, 0x62	; 98
     474:	b2 e0       	ldi	r27, 0x02	; 2
     476:	01 c0       	rjmp	.+2      	; 0x47a <.do_clear_bss_start>

00000478 <.do_clear_bss_loop>:
     478:	1d 92       	st	X+, r1

0000047a <.do_clear_bss_start>:
     47a:	a8 3b       	cpi	r26, 0xB8	; 184
     47c:	b2 07       	cpc	r27, r18
     47e:	e1 f7       	brne	.-8      	; 0x478 <.do_clear_bss_loop>

00000480 <__do_global_ctors>:
     480:	12 e0       	ldi	r17, 0x02	; 2
     482:	c3 e2       	ldi	r28, 0x23	; 35
     484:	d2 e0       	ldi	r29, 0x02	; 2
     486:	00 e0       	ldi	r16, 0x00	; 0
     488:	06 c0       	rjmp	.+12     	; 0x496 <__do_global_ctors+0x16>
     48a:	21 97       	sbiw	r28, 0x01	; 1
     48c:	01 09       	sbc	r16, r1
     48e:	80 2f       	mov	r24, r16
     490:	fe 01       	movw	r30, r28
     492:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <__tablejump2__>
     496:	c2 32       	cpi	r28, 0x22	; 34
     498:	d1 07       	cpc	r29, r17
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	08 07       	cpc	r16, r24
     49e:	a9 f7       	brne	.-22     	; 0x48a <__do_global_ctors+0xa>
     4a0:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <main>
     4a4:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <_exit>

000004a8 <__bad_interrupt>:
     4a8:	ab cd       	rjmp	.-1194   	; 0x0 <__vectors>

000004aa <_Z5pausel>:
void motor_disable() {
  int i;
  for(i=0;i<NUM_AXIES;++i) {  
    digitalWrite(motors[i].enable_pin,HIGH);
  }
}
     4aa:	cf 92       	push	r12
     4ac:	df 92       	push	r13
     4ae:	ef 92       	push	r14
     4b0:	ff 92       	push	r15
     4b2:	28 ee       	ldi	r18, 0xE8	; 232
     4b4:	33 e0       	ldi	r19, 0x03	; 3
     4b6:	40 e0       	ldi	r20, 0x00	; 0
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__divmodsi4>
     4be:	6b 01       	movw	r12, r22
     4c0:	7c 01       	movw	r14, r24
     4c2:	ca 01       	movw	r24, r20
     4c4:	b9 01       	movw	r22, r18
     4c6:	0e 94 92 13 	call	0x2724	; 0x2724 <delay>
     4ca:	c6 01       	movw	r24, r12
     4cc:	ff 90       	pop	r15
     4ce:	ef 90       	pop	r14
     4d0:	df 90       	pop	r13
     4d2:	cf 90       	pop	r12
     4d4:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <delayMicroseconds>

000004d8 <_Z8feedratef>:
     4d8:	cf 92       	push	r12
     4da:	df 92       	push	r13
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	6b 01       	movw	r12, r22
     4e2:	7c 01       	movw	r14, r24
     4e4:	9b 01       	movw	r18, r22
     4e6:	ac 01       	movw	r20, r24
     4e8:	60 91 7a 02 	lds	r22, 0x027A	; 0x80027a <fr>
     4ec:	70 91 7b 02 	lds	r23, 0x027B	; 0x80027b <fr+0x1>
     4f0:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <fr+0x2>
     4f4:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <fr+0x3>
     4f8:	0e 94 2f 0c 	call	0x185e	; 0x185e <__cmpsf2>
     4fc:	88 23       	and	r24, r24
     4fe:	09 f4       	brne	.+2      	; 0x502 <_Z8feedratef+0x2a>
     500:	56 c0       	rjmp	.+172    	; 0x5ae <_Z8feedratef+0xd6>
     502:	20 e0       	ldi	r18, 0x00	; 0
     504:	34 e2       	ldi	r19, 0x24	; 36
     506:	44 e7       	ldi	r20, 0x74	; 116
     508:	59 e4       	ldi	r21, 0x49	; 73
     50a:	c7 01       	movw	r24, r14
     50c:	b6 01       	movw	r22, r12
     50e:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__gesf2>
     512:	18 16       	cp	r1, r24
     514:	54 f0       	brlt	.+20     	; 0x52a <_Z8feedratef+0x52>
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	40 e8       	ldi	r20, 0x80	; 128
     51c:	5f e3       	ldi	r21, 0x3F	; 63
     51e:	c7 01       	movw	r24, r14
     520:	b6 01       	movw	r22, r12
     522:	0e 94 2f 0c 	call	0x185e	; 0x185e <__cmpsf2>
     526:	87 ff       	sbrs	r24, 7
     528:	28 c0       	rjmp	.+80     	; 0x57a <_Z8feedratef+0xa2>
     52a:	6b e1       	ldi	r22, 0x1B	; 27
     52c:	73 e0       	ldi	r23, 0x03	; 3
     52e:	80 e1       	ldi	r24, 0x10	; 16
     530:	93 e0       	ldi	r25, 0x03	; 3
     532:	0e 94 3a 11 	call	0x2274	; 0x2274 <_ZN5Print5printEPK19__FlashStringHelper>
     536:	4a e0       	ldi	r20, 0x0A	; 10
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	61 e0       	ldi	r22, 0x01	; 1
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	80 e1       	ldi	r24, 0x10	; 16
     540:	93 e0       	ldi	r25, 0x03	; 3
     542:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN5Print5printEii>
     546:	64 e0       	ldi	r22, 0x04	; 4
     548:	73 e0       	ldi	r23, 0x03	; 3
     54a:	80 e1       	ldi	r24, 0x10	; 16
     54c:	93 e0       	ldi	r25, 0x03	; 3
     54e:	0e 94 3a 11 	call	0x2274	; 0x2274 <_ZN5Print5printEPK19__FlashStringHelper>
     552:	2a e0       	ldi	r18, 0x0A	; 10
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	40 e4       	ldi	r20, 0x40	; 64
     558:	52 e4       	ldi	r21, 0x42	; 66
     55a:	6f e0       	ldi	r22, 0x0F	; 15
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	80 e1       	ldi	r24, 0x10	; 16
     560:	93 e0       	ldi	r25, 0x03	; 3
     562:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <_ZN5Print5printEli>
     566:	6b ef       	ldi	r22, 0xFB	; 251
     568:	72 e0       	ldi	r23, 0x02	; 2
     56a:	80 e1       	ldi	r24, 0x10	; 16
     56c:	93 e0       	ldi	r25, 0x03	; 3
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	df 90       	pop	r13
     574:	cf 90       	pop	r12
     576:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     57a:	a7 01       	movw	r20, r14
     57c:	96 01       	movw	r18, r12
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	74 e2       	ldi	r23, 0x24	; 36
     582:	84 e7       	ldi	r24, 0x74	; 116
     584:	99 e4       	ldi	r25, 0x49	; 73
     586:	0e 94 36 0c 	call	0x186c	; 0x186c <__divsf3>
     58a:	0e 94 9e 0c 	call	0x193c	; 0x193c <__fixsfsi>
     58e:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <step_delay>
     592:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <step_delay+0x1>
     596:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <step_delay+0x2>
     59a:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <step_delay+0x3>
     59e:	c0 92 7a 02 	sts	0x027A, r12	; 0x80027a <fr>
     5a2:	d0 92 7b 02 	sts	0x027B, r13	; 0x80027b <fr+0x1>
     5a6:	e0 92 7c 02 	sts	0x027C, r14	; 0x80027c <fr+0x2>
     5aa:	f0 92 7d 02 	sts	0x027D, r15	; 0x80027d <fr+0x3>
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	cf 90       	pop	r12
     5b6:	08 95       	ret

000005b8 <_Z11parseNumbercf>:
     5b8:	8f 92       	push	r8
     5ba:	9f 92       	push	r9
     5bc:	af 92       	push	r10
     5be:	bf 92       	push	r11
     5c0:	cf 92       	push	r12
     5c2:	df 92       	push	r13
     5c4:	ef 92       	push	r14
     5c6:	ff 92       	push	r15
     5c8:	cf 93       	push	r28
     5ca:	c8 2f       	mov	r28, r24
     5cc:	4a 01       	movw	r8, r20
     5ce:	5b 01       	movw	r10, r22
     5d0:	c0 90 7e 02 	lds	r12, 0x027E	; 0x80027e <sofar>
     5d4:	d0 90 7f 02 	lds	r13, 0x027F	; 0x80027f <sofar+0x1>
     5d8:	c6 01       	movw	r24, r12
     5da:	dd 0c       	add	r13, r13
     5dc:	aa 0b       	sbc	r26, r26
     5de:	bb 0b       	sbc	r27, r27
     5e0:	20 e8       	ldi	r18, 0x80	; 128
     5e2:	32 e0       	ldi	r19, 0x02	; 2
     5e4:	69 01       	movw	r12, r18
     5e6:	03 2e       	mov	r0, r19
     5e8:	00 0c       	add	r0, r0
     5ea:	ee 08       	sbc	r14, r14
     5ec:	ff 08       	sbc	r15, r15
     5ee:	c8 0e       	add	r12, r24
     5f0:	d9 1e       	adc	r13, r25
     5f2:	ea 1e       	adc	r14, r26
     5f4:	fb 1e       	adc	r15, r27
     5f6:	c9 01       	movw	r24, r18
     5f8:	82 30       	cpi	r24, 0x02	; 2
     5fa:	91 05       	cpc	r25, r1
     5fc:	14 f1       	brlt	.+68     	; 0x642 <_Z11parseNumbercf+0x8a>
     5fe:	fc 01       	movw	r30, r24
     600:	20 81       	ld	r18, Z
     602:	22 23       	and	r18, r18
     604:	f1 f0       	breq	.+60     	; 0x642 <_Z11parseNumbercf+0x8a>
     606:	ac 01       	movw	r20, r24
     608:	09 2e       	mov	r0, r25
     60a:	00 0c       	add	r0, r0
     60c:	66 0b       	sbc	r22, r22
     60e:	77 0b       	sbc	r23, r23
     610:	4c 15       	cp	r20, r12
     612:	5d 05       	cpc	r21, r13
     614:	6e 05       	cpc	r22, r14
     616:	7f 05       	cpc	r23, r15
     618:	a4 f4       	brge	.+40     	; 0x642 <_Z11parseNumbercf+0x8a>
     61a:	2c 13       	cpse	r18, r28
     61c:	0c c0       	rjmp	.+24     	; 0x636 <_Z11parseNumbercf+0x7e>
     61e:	01 96       	adiw	r24, 0x01	; 1
     620:	cf 91       	pop	r28
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	df 90       	pop	r13
     628:	cf 90       	pop	r12
     62a:	bf 90       	pop	r11
     62c:	af 90       	pop	r10
     62e:	9f 90       	pop	r9
     630:	8f 90       	pop	r8
     632:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <atof>
     636:	60 e2       	ldi	r22, 0x20	; 32
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <strchr>
     63e:	01 96       	adiw	r24, 0x01	; 1
     640:	db cf       	rjmp	.-74     	; 0x5f8 <_Z11parseNumbercf+0x40>
     642:	c5 01       	movw	r24, r10
     644:	b4 01       	movw	r22, r8
     646:	cf 91       	pop	r28
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	df 90       	pop	r13
     64e:	cf 90       	pop	r12
     650:	bf 90       	pop	r11
     652:	af 90       	pop	r10
     654:	9f 90       	pop	r9
     656:	8f 90       	pop	r8
     658:	08 95       	ret

0000065a <_Z6outputPKcf>:
     65a:	cf 92       	push	r12
     65c:	df 92       	push	r13
     65e:	ef 92       	push	r14
     660:	ff 92       	push	r15
     662:	6a 01       	movw	r12, r20
     664:	7b 01       	movw	r14, r22
     666:	bc 01       	movw	r22, r24
     668:	80 e1       	ldi	r24, 0x10	; 16
     66a:	93 e0       	ldi	r25, 0x03	; 3
     66c:	0e 94 5e 11 	call	0x22bc	; 0x22bc <_ZN5Print5printEPKc>
     670:	22 e0       	ldi	r18, 0x02	; 2
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	b7 01       	movw	r22, r14
     676:	a6 01       	movw	r20, r12
     678:	80 e1       	ldi	r24, 0x10	; 16
     67a:	93 e0       	ldi	r25, 0x03	; 3
     67c:	ff 90       	pop	r15
     67e:	ef 90       	pop	r14
     680:	df 90       	pop	r13
     682:	cf 90       	pop	r12
     684:	0c 94 13 13 	jmp	0x2626	; 0x2626 <_ZN5Print7printlnEdi>

00000688 <_Z5wherev>:
     688:	40 91 72 02 	lds	r20, 0x0272	; 0x800272 <px>
     68c:	50 91 73 02 	lds	r21, 0x0273	; 0x800273 <px+0x1>
     690:	60 91 74 02 	lds	r22, 0x0274	; 0x800274 <px+0x2>
     694:	70 91 75 02 	lds	r23, 0x0275	; 0x800275 <px+0x3>
     698:	89 e0       	ldi	r24, 0x09	; 9
     69a:	92 e0       	ldi	r25, 0x02	; 2
     69c:	de df       	rcall	.-68     	; 0x65a <_Z6outputPKcf>
     69e:	40 91 6e 02 	lds	r20, 0x026E	; 0x80026e <py>
     6a2:	50 91 6f 02 	lds	r21, 0x026F	; 0x80026f <py+0x1>
     6a6:	60 91 70 02 	lds	r22, 0x0270	; 0x800270 <py+0x2>
     6aa:	70 91 71 02 	lds	r23, 0x0271	; 0x800271 <py+0x3>
     6ae:	8b e0       	ldi	r24, 0x0B	; 11
     6b0:	92 e0       	ldi	r25, 0x02	; 2
     6b2:	d3 df       	rcall	.-90     	; 0x65a <_Z6outputPKcf>
     6b4:	40 91 6a 02 	lds	r20, 0x026A	; 0x80026a <pz>
     6b8:	50 91 6b 02 	lds	r21, 0x026B	; 0x80026b <pz+0x1>
     6bc:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <pz+0x2>
     6c0:	70 91 6d 02 	lds	r23, 0x026D	; 0x80026d <pz+0x3>
     6c4:	8d e0       	ldi	r24, 0x0D	; 13
     6c6:	92 e0       	ldi	r25, 0x02	; 2
     6c8:	c8 df       	rcall	.-112    	; 0x65a <_Z6outputPKcf>
     6ca:	40 91 66 02 	lds	r20, 0x0266	; 0x800266 <pe>
     6ce:	50 91 67 02 	lds	r21, 0x0267	; 0x800267 <pe+0x1>
     6d2:	60 91 68 02 	lds	r22, 0x0268	; 0x800268 <pe+0x2>
     6d6:	70 91 69 02 	lds	r23, 0x0269	; 0x800269 <pe+0x3>
     6da:	8f e0       	ldi	r24, 0x0F	; 15
     6dc:	92 e0       	ldi	r25, 0x02	; 2
     6de:	bd df       	rcall	.-134    	; 0x65a <_Z6outputPKcf>
     6e0:	40 91 7a 02 	lds	r20, 0x027A	; 0x80027a <fr>
     6e4:	50 91 7b 02 	lds	r21, 0x027B	; 0x80027b <fr+0x1>
     6e8:	60 91 7c 02 	lds	r22, 0x027C	; 0x80027c <fr+0x2>
     6ec:	70 91 7d 02 	lds	r23, 0x027D	; 0x80027d <fr+0x3>
     6f0:	81 e1       	ldi	r24, 0x11	; 17
     6f2:	92 e0       	ldi	r25, 0x02	; 2
     6f4:	b2 df       	rcall	.-156    	; 0x65a <_Z6outputPKcf>
     6f6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     6fa:	81 11       	cpse	r24, r1
     6fc:	03 c0       	rjmp	.+6      	; 0x704 <_Z5wherev+0x7c>
     6fe:	65 e0       	ldi	r22, 0x05	; 5
     700:	72 e0       	ldi	r23, 0x02	; 2
     702:	02 c0       	rjmp	.+4      	; 0x708 <_Z5wherev+0x80>
     704:	61 e0       	ldi	r22, 0x01	; 1
     706:	72 e0       	ldi	r23, 0x02	; 2
     708:	80 e1       	ldi	r24, 0x10	; 16
     70a:	93 e0       	ldi	r25, 0x03	; 3
     70c:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <_ZN5Print7printlnEPKc>

00000710 <_Z4lineffff>:
     710:	4f 92       	push	r4
     712:	5f 92       	push	r5
     714:	6f 92       	push	r6
     716:	7f 92       	push	r7
     718:	af 92       	push	r10
     71a:	bf 92       	push	r11
     71c:	cf 92       	push	r12
     71e:	df 92       	push	r13
     720:	ef 92       	push	r14
     722:	ff 92       	push	r15
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	6e 97       	sbiw	r28, 0x1e	; 30
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	f8 94       	cli
     736:	de bf       	out	0x3e, r29	; 62
     738:	0f be       	out	0x3f, r0	; 63
     73a:	cd bf       	out	0x3d, r28	; 61
     73c:	69 8b       	std	Y+17, r22	; 0x11
     73e:	7a 8b       	std	Y+18, r23	; 0x12
     740:	8b 8b       	std	Y+19, r24	; 0x13
     742:	9c 8b       	std	Y+20, r25	; 0x14
     744:	2d 8b       	std	Y+21, r18	; 0x15
     746:	3e 8b       	std	Y+22, r19	; 0x16
     748:	4f 8b       	std	Y+23, r20	; 0x17
     74a:	58 8f       	std	Y+24, r21	; 0x18
     74c:	e9 8e       	std	Y+25, r14	; 0x19
     74e:	fa 8e       	std	Y+26, r15	; 0x1a
     750:	0b 8f       	std	Y+27, r16	; 0x1b
     752:	1c 8f       	std	Y+28, r17	; 0x1c
     754:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <px>
     758:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <px+0x1>
     75c:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <px+0x2>
     760:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <px+0x3>
     764:	a2 d7       	rcall	.+3908   	; 0x16aa <__subsf3>
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	44 e5       	ldi	r20, 0x54	; 84
     76c:	52 e4       	ldi	r21, 0x42	; 66
     76e:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__mulsf3>
     772:	0e 94 9e 0c 	call	0x193c	; 0x193c <__fixsfsi>
     776:	60 93 e0 02 	sts	0x02E0, r22	; 0x8002e0 <a>
     77a:	70 93 e1 02 	sts	0x02E1, r23	; 0x8002e1 <a+0x1>
     77e:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <a+0x2>
     782:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <a+0x3>
     786:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <py>
     78a:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <py+0x1>
     78e:	40 91 70 02 	lds	r20, 0x0270	; 0x800270 <py+0x2>
     792:	50 91 71 02 	lds	r21, 0x0271	; 0x800271 <py+0x3>
     796:	6d 89       	ldd	r22, Y+21	; 0x15
     798:	7e 89       	ldd	r23, Y+22	; 0x16
     79a:	8f 89       	ldd	r24, Y+23	; 0x17
     79c:	98 8d       	ldd	r25, Y+24	; 0x18
     79e:	85 d7       	rcall	.+3850   	; 0x16aa <__subsf3>
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	44 e5       	ldi	r20, 0x54	; 84
     7a6:	52 e4       	ldi	r21, 0x42	; 66
     7a8:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__mulsf3>
     7ac:	0e 94 9e 0c 	call	0x193c	; 0x193c <__fixsfsi>
     7b0:	60 93 ec 02 	sts	0x02EC, r22	; 0x8002ec <a+0xc>
     7b4:	70 93 ed 02 	sts	0x02ED, r23	; 0x8002ed <a+0xd>
     7b8:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <a+0xe>
     7bc:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <a+0xf>
     7c0:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <pz>
     7c4:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <pz+0x1>
     7c8:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <pz+0x2>
     7cc:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <pz+0x3>
     7d0:	c8 01       	movw	r24, r16
     7d2:	b7 01       	movw	r22, r14
     7d4:	6a d7       	rcall	.+3796   	; 0x16aa <__subsf3>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	44 e5       	ldi	r20, 0x54	; 84
     7dc:	52 e4       	ldi	r21, 0x42	; 66
     7de:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__mulsf3>
     7e2:	0e 94 9e 0c 	call	0x193c	; 0x193c <__fixsfsi>
     7e6:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <a+0x18>
     7ea:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <a+0x19>
     7ee:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <a+0x1a>
     7f2:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <a+0x1b>
     7f6:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <pe>
     7fa:	30 91 67 02 	lds	r19, 0x0267	; 0x800267 <pe+0x1>
     7fe:	40 91 68 02 	lds	r20, 0x0268	; 0x800268 <pe+0x2>
     802:	50 91 69 02 	lds	r21, 0x0269	; 0x800269 <pe+0x3>
     806:	c6 01       	movw	r24, r12
     808:	b5 01       	movw	r22, r10
     80a:	4f d7       	rcall	.+3742   	; 0x16aa <__subsf3>
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	44 e5       	ldi	r20, 0x54	; 84
     812:	52 e4       	ldi	r21, 0x42	; 66
     814:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__mulsf3>
     818:	0e 94 9e 0c 	call	0x193c	; 0x193c <__fixsfsi>
     81c:	60 93 04 03 	sts	0x0304, r22	; 0x800304 <a+0x24>
     820:	70 93 05 03 	sts	0x0305, r23	; 0x800305 <a+0x25>
     824:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <a+0x26>
     828:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <a+0x27>
     82c:	00 ec       	ldi	r16, 0xC0	; 192
     82e:	12 e0       	ldi	r17, 0x02	; 2
     830:	20 ee       	ldi	r18, 0xE0	; 224
     832:	32 e0       	ldi	r19, 0x02	; 2
     834:	3a 83       	std	Y+2, r19	; 0x02
     836:	29 83       	std	Y+1, r18	; 0x01
     838:	41 2c       	mov	r4, r1
     83a:	51 2c       	mov	r5, r1
     83c:	32 01       	movw	r6, r4
     83e:	e9 81       	ldd	r30, Y+1	; 0x01
     840:	fa 81       	ldd	r31, Y+2	; 0x02
     842:	80 81       	ld	r24, Z
     844:	91 81       	ldd	r25, Z+1	; 0x01
     846:	a2 81       	ldd	r26, Z+2	; 0x02
     848:	b3 81       	ldd	r27, Z+3	; 0x03
     84a:	ac 01       	movw	r20, r24
     84c:	bd 01       	movw	r22, r26
     84e:	b7 ff       	sbrs	r27, 7
     850:	07 c0       	rjmp	.+14     	; 0x860 <_Z4lineffff+0x150>
     852:	44 27       	eor	r20, r20
     854:	55 27       	eor	r21, r21
     856:	ba 01       	movw	r22, r20
     858:	48 1b       	sub	r20, r24
     85a:	59 0b       	sbc	r21, r25
     85c:	6a 0b       	sbc	r22, r26
     85e:	7b 0b       	sbc	r23, r27
     860:	e9 81       	ldd	r30, Y+1	; 0x01
     862:	fa 81       	ldd	r31, Y+2	; 0x02
     864:	44 83       	std	Z+4, r20	; 0x04
     866:	55 83       	std	Z+5, r21	; 0x05
     868:	66 83       	std	Z+6, r22	; 0x06
     86a:	77 83       	std	Z+7, r23	; 0x07
     86c:	44 16       	cp	r4, r20
     86e:	55 06       	cpc	r5, r21
     870:	66 06       	cpc	r6, r22
     872:	77 06       	cpc	r7, r23
     874:	14 f4       	brge	.+4      	; 0x87a <_Z4lineffff+0x16a>
     876:	2a 01       	movw	r4, r20
     878:	3b 01       	movw	r6, r22
     87a:	61 e0       	ldi	r22, 0x01	; 1
     87c:	18 16       	cp	r1, r24
     87e:	19 06       	cpc	r1, r25
     880:	1a 06       	cpc	r1, r26
     882:	1b 06       	cpc	r1, r27
     884:	0c f0       	brlt	.+2      	; 0x888 <_Z4lineffff+0x178>
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	d8 01       	movw	r26, r16
     88a:	12 96       	adiw	r26, 0x02	; 2
     88c:	8c 91       	ld	r24, X
     88e:	0e 94 c9 14 	call	0x2992	; 0x2992 <digitalWrite>
     892:	e9 81       	ldd	r30, Y+1	; 0x01
     894:	fa 81       	ldd	r31, Y+2	; 0x02
     896:	3c 96       	adiw	r30, 0x0c	; 12
     898:	fa 83       	std	Y+2, r31	; 0x02
     89a:	e9 83       	std	Y+1, r30	; 0x01
     89c:	08 5f       	subi	r16, 0xF8	; 248
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	e0 51       	subi	r30, 0x10	; 16
     8a2:	f3 40       	sbci	r31, 0x03	; 3
     8a4:	61 f6       	brne	.-104    	; 0x83e <_Z4lineffff+0x12e>
     8a6:	d3 01       	movw	r26, r6
     8a8:	c2 01       	movw	r24, r4
     8aa:	b5 95       	asr	r27
     8ac:	a7 95       	ror	r26
     8ae:	97 95       	ror	r25
     8b0:	87 95       	ror	r24
     8b2:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <a+0x8>
     8b6:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <a+0x9>
     8ba:	a0 93 ea 02 	sts	0x02EA, r26	; 0x8002ea <a+0xa>
     8be:	b0 93 eb 02 	sts	0x02EB, r27	; 0x8002eb <a+0xb>
     8c2:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <a+0x14>
     8c6:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <a+0x15>
     8ca:	a0 93 f6 02 	sts	0x02F6, r26	; 0x8002f6 <a+0x16>
     8ce:	b0 93 f7 02 	sts	0x02F7, r27	; 0x8002f7 <a+0x17>
     8d2:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <a+0x20>
     8d6:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <a+0x21>
     8da:	a0 93 02 03 	sts	0x0302, r26	; 0x800302 <a+0x22>
     8de:	b0 93 03 03 	sts	0x0303, r27	; 0x800303 <a+0x23>
     8e2:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <a+0x2c>
     8e6:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <a+0x2d>
     8ea:	a0 93 0e 03 	sts	0x030E, r26	; 0x80030e <a+0x2e>
     8ee:	b0 93 0f 03 	sts	0x030F, r27	; 0x80030f <a+0x2f>
     8f2:	00 91 76 02 	lds	r16, 0x0276	; 0x800276 <step_delay>
     8f6:	10 91 77 02 	lds	r17, 0x0277	; 0x800277 <step_delay+0x1>
     8fa:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <step_delay+0x2>
     8fe:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <step_delay+0x3>
     902:	48 ec       	ldi	r20, 0xC8	; 200
     904:	50 e0       	ldi	r21, 0x00	; 0
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	40 1b       	sub	r20, r16
     90c:	51 0b       	sbc	r21, r17
     90e:	62 0b       	sbc	r22, r18
     910:	73 0b       	sbc	r23, r19
     912:	89 87       	std	Y+9, r24	; 0x09
     914:	9a 87       	std	Y+10, r25	; 0x0a
     916:	ab 87       	std	Y+11, r26	; 0x0b
     918:	bc 87       	std	Y+12, r27	; 0x0c
     91a:	48 17       	cp	r20, r24
     91c:	59 07       	cpc	r21, r25
     91e:	6a 07       	cpc	r22, r26
     920:	7b 07       	cpc	r23, r27
     922:	24 f4       	brge	.+8      	; 0x92c <_Z4lineffff+0x21c>
     924:	49 87       	std	Y+9, r20	; 0x09
     926:	5a 87       	std	Y+10, r21	; 0x0a
     928:	6b 87       	std	Y+11, r22	; 0x0b
     92a:	7c 87       	std	Y+12, r23	; 0x0c
     92c:	d3 01       	movw	r26, r6
     92e:	c2 01       	movw	r24, r4
     930:	29 85       	ldd	r18, Y+9	; 0x09
     932:	3a 85       	ldd	r19, Y+10	; 0x0a
     934:	4b 85       	ldd	r20, Y+11	; 0x0b
     936:	5c 85       	ldd	r21, Y+12	; 0x0c
     938:	82 1b       	sub	r24, r18
     93a:	93 0b       	sbc	r25, r19
     93c:	a4 0b       	sbc	r26, r20
     93e:	b5 0b       	sbc	r27, r21
     940:	8d 87       	std	Y+13, r24	; 0x0d
     942:	9e 87       	std	Y+14, r25	; 0x0e
     944:	af 87       	std	Y+15, r26	; 0x0f
     946:	b8 8b       	std	Y+16, r27	; 0x10
     948:	63 e1       	ldi	r22, 0x13	; 19
     94a:	72 e0       	ldi	r23, 0x02	; 2
     94c:	80 e1       	ldi	r24, 0x10	; 16
     94e:	93 e0       	ldi	r25, 0x03	; 3
     950:	0e 94 5e 11 	call	0x22bc	; 0x22bc <_ZN5Print5printEPKc>
     954:	2a e0       	ldi	r18, 0x0A	; 10
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	48 ec       	ldi	r20, 0xC8	; 200
     95a:	50 e0       	ldi	r21, 0x00	; 0
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	80 e1       	ldi	r24, 0x10	; 16
     962:	93 e0       	ldi	r25, 0x03	; 3
     964:	0e 94 3c 12 	call	0x2478	; 0x2478 <_ZN5Print7printlnEli>
     968:	6a e1       	ldi	r22, 0x1A	; 26
     96a:	72 e0       	ldi	r23, 0x02	; 2
     96c:	80 e1       	ldi	r24, 0x10	; 16
     96e:	93 e0       	ldi	r25, 0x03	; 3
     970:	0e 94 5e 11 	call	0x22bc	; 0x22bc <_ZN5Print5printEPKc>
     974:	40 91 76 02 	lds	r20, 0x0276	; 0x800276 <step_delay>
     978:	50 91 77 02 	lds	r21, 0x0277	; 0x800277 <step_delay+0x1>
     97c:	60 91 78 02 	lds	r22, 0x0278	; 0x800278 <step_delay+0x2>
     980:	70 91 79 02 	lds	r23, 0x0279	; 0x800279 <step_delay+0x3>
     984:	2a e0       	ldi	r18, 0x0A	; 10
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	80 e1       	ldi	r24, 0x10	; 16
     98a:	93 e0       	ldi	r25, 0x03	; 3
     98c:	0e 94 3c 12 	call	0x2478	; 0x2478 <_ZN5Print7printlnEli>
     990:	6f e1       	ldi	r22, 0x1F	; 31
     992:	72 e0       	ldi	r23, 0x02	; 2
     994:	80 e1       	ldi	r24, 0x10	; 16
     996:	93 e0       	ldi	r25, 0x03	; 3
     998:	0e 94 5e 11 	call	0x22bc	; 0x22bc <_ZN5Print5printEPKc>
     99c:	2a e0       	ldi	r18, 0x0A	; 10
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	49 85       	ldd	r20, Y+9	; 0x09
     9a2:	5a 85       	ldd	r21, Y+10	; 0x0a
     9a4:	6b 85       	ldd	r22, Y+11	; 0x0b
     9a6:	7c 85       	ldd	r23, Y+12	; 0x0c
     9a8:	80 e1       	ldi	r24, 0x10	; 16
     9aa:	93 e0       	ldi	r25, 0x03	; 3
     9ac:	0e 94 3c 12 	call	0x2478	; 0x2478 <_ZN5Print7printlnEli>
     9b0:	6c e2       	ldi	r22, 0x2C	; 44
     9b2:	72 e0       	ldi	r23, 0x02	; 2
     9b4:	80 e1       	ldi	r24, 0x10	; 16
     9b6:	93 e0       	ldi	r25, 0x03	; 3
     9b8:	0e 94 5e 11 	call	0x22bc	; 0x22bc <_ZN5Print5printEPKc>
     9bc:	2a e0       	ldi	r18, 0x0A	; 10
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	4d 85       	ldd	r20, Y+13	; 0x0d
     9c2:	5e 85       	ldd	r21, Y+14	; 0x0e
     9c4:	6f 85       	ldd	r22, Y+15	; 0x0f
     9c6:	78 89       	ldd	r23, Y+16	; 0x10
     9c8:	80 e1       	ldi	r24, 0x10	; 16
     9ca:	93 e0       	ldi	r25, 0x03	; 3
     9cc:	0e 94 3c 12 	call	0x2478	; 0x2478 <_ZN5Print7printlnEli>
     9d0:	69 e3       	ldi	r22, 0x39	; 57
     9d2:	72 e0       	ldi	r23, 0x02	; 2
     9d4:	80 e1       	ldi	r24, 0x10	; 16
     9d6:	93 e0       	ldi	r25, 0x03	; 3
     9d8:	0e 94 5e 11 	call	0x22bc	; 0x22bc <_ZN5Print5printEPKc>
     9dc:	2a e0       	ldi	r18, 0x0A	; 10
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	b3 01       	movw	r22, r6
     9e2:	a2 01       	movw	r20, r4
     9e4:	80 e1       	ldi	r24, 0x10	; 16
     9e6:	93 e0       	ldi	r25, 0x03	; 3
     9e8:	0e 94 3c 12 	call	0x2478	; 0x2478 <_ZN5Print7printlnEli>
     9ec:	88 ec       	ldi	r24, 0xC8	; 200
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	a0 e0       	ldi	r26, 0x00	; 0
     9f2:	b0 e0       	ldi	r27, 0x00	; 0
     9f4:	8d 83       	std	Y+5, r24	; 0x05
     9f6:	9e 83       	std	Y+6, r25	; 0x06
     9f8:	af 83       	std	Y+7, r26	; 0x07
     9fa:	b8 87       	std	Y+8, r27	; 0x08
     9fc:	19 82       	std	Y+1, r1	; 0x01
     9fe:	1a 82       	std	Y+2, r1	; 0x02
     a00:	1b 82       	std	Y+3, r1	; 0x03
     a02:	1c 82       	std	Y+4, r1	; 0x04
     a04:	29 81       	ldd	r18, Y+1	; 0x01
     a06:	3a 81       	ldd	r19, Y+2	; 0x02
     a08:	4b 81       	ldd	r20, Y+3	; 0x03
     a0a:	5c 81       	ldd	r21, Y+4	; 0x04
     a0c:	24 15       	cp	r18, r4
     a0e:	35 05       	cpc	r19, r5
     a10:	46 05       	cpc	r20, r6
     a12:	57 05       	cpc	r21, r7
     a14:	0c f0       	brlt	.+2      	; 0xa18 <_Z4lineffff+0x308>
     a16:	84 c0       	rjmp	.+264    	; 0xb20 <_Z4lineffff+0x410>
     a18:	00 ec       	ldi	r16, 0xC0	; 192
     a1a:	12 e0       	ldi	r17, 0x02	; 2
     a1c:	40 ee       	ldi	r20, 0xE0	; 224
     a1e:	52 e0       	ldi	r21, 0x02	; 2
     a20:	5e 8f       	std	Y+30, r21	; 0x1e
     a22:	4d 8f       	std	Y+29, r20	; 0x1d
     a24:	ad 8d       	ldd	r26, Y+29	; 0x1d
     a26:	be 8d       	ldd	r27, Y+30	; 0x1e
     a28:	18 96       	adiw	r26, 0x08	; 8
     a2a:	4d 91       	ld	r20, X+
     a2c:	5d 91       	ld	r21, X+
     a2e:	6d 91       	ld	r22, X+
     a30:	7c 91       	ld	r23, X
     a32:	1b 97       	sbiw	r26, 0x0b	; 11
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	8d 91       	ld	r24, X+
     a38:	9d 91       	ld	r25, X+
     a3a:	0d 90       	ld	r0, X+
     a3c:	bc 91       	ld	r27, X
     a3e:	a0 2d       	mov	r26, r0
     a40:	84 0f       	add	r24, r20
     a42:	95 1f       	adc	r25, r21
     a44:	a6 1f       	adc	r26, r22
     a46:	b7 1f       	adc	r27, r23
     a48:	84 15       	cp	r24, r4
     a4a:	95 05       	cpc	r25, r5
     a4c:	a6 05       	cpc	r26, r6
     a4e:	b7 05       	cpc	r27, r7
     a50:	3c f4       	brge	.+14     	; 0xa60 <_Z4lineffff+0x350>
     a52:	ed 8d       	ldd	r30, Y+29	; 0x1d
     a54:	fe 8d       	ldd	r31, Y+30	; 0x1e
     a56:	80 87       	std	Z+8, r24	; 0x08
     a58:	91 87       	std	Z+9, r25	; 0x09
     a5a:	a2 87       	std	Z+10, r26	; 0x0a
     a5c:	b3 87       	std	Z+11, r27	; 0x0b
     a5e:	14 c0       	rjmp	.+40     	; 0xa88 <_Z4lineffff+0x378>
     a60:	84 19       	sub	r24, r4
     a62:	95 09       	sbc	r25, r5
     a64:	a6 09       	sbc	r26, r6
     a66:	b7 09       	sbc	r27, r7
     a68:	ed 8d       	ldd	r30, Y+29	; 0x1d
     a6a:	fe 8d       	ldd	r31, Y+30	; 0x1e
     a6c:	80 87       	std	Z+8, r24	; 0x08
     a6e:	91 87       	std	Z+9, r25	; 0x09
     a70:	a2 87       	std	Z+10, r26	; 0x0a
     a72:	b3 87       	std	Z+11, r27	; 0x0b
     a74:	61 e0       	ldi	r22, 0x01	; 1
     a76:	d8 01       	movw	r26, r16
     a78:	8c 91       	ld	r24, X
     a7a:	0e 94 c9 14 	call	0x2992	; 0x2992 <digitalWrite>
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	f8 01       	movw	r30, r16
     a82:	80 81       	ld	r24, Z
     a84:	0e 94 c9 14 	call	0x2992	; 0x2992 <digitalWrite>
     a88:	2d 8d       	ldd	r18, Y+29	; 0x1d
     a8a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     a8c:	24 5f       	subi	r18, 0xF4	; 244
     a8e:	3f 4f       	sbci	r19, 0xFF	; 255
     a90:	3e 8f       	std	Y+30, r19	; 0x1e
     a92:	2d 8f       	std	Y+29, r18	; 0x1d
     a94:	08 5f       	subi	r16, 0xF8	; 248
     a96:	1f 4f       	sbci	r17, 0xFF	; 255
     a98:	20 51       	subi	r18, 0x10	; 16
     a9a:	33 40       	sbci	r19, 0x03	; 3
     a9c:	19 f6       	brne	.-122    	; 0xa24 <_Z4lineffff+0x314>
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	9a 81       	ldd	r25, Y+2	; 0x02
     aa2:	ab 81       	ldd	r26, Y+3	; 0x03
     aa4:	bc 81       	ldd	r27, Y+4	; 0x04
     aa6:	29 85       	ldd	r18, Y+9	; 0x09
     aa8:	3a 85       	ldd	r19, Y+10	; 0x0a
     aaa:	4b 85       	ldd	r20, Y+11	; 0x0b
     aac:	5c 85       	ldd	r21, Y+12	; 0x0c
     aae:	82 17       	cp	r24, r18
     ab0:	93 07       	cpc	r25, r19
     ab2:	a4 07       	cpc	r26, r20
     ab4:	b5 07       	cpc	r27, r21
     ab6:	5c f4       	brge	.+22     	; 0xace <_Z4lineffff+0x3be>
     ab8:	8d 81       	ldd	r24, Y+5	; 0x05
     aba:	9e 81       	ldd	r25, Y+6	; 0x06
     abc:	af 81       	ldd	r26, Y+7	; 0x07
     abe:	b8 85       	ldd	r27, Y+8	; 0x08
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	a1 09       	sbc	r26, r1
     ac4:	b1 09       	sbc	r27, r1
     ac6:	8d 83       	std	Y+5, r24	; 0x05
     ac8:	9e 83       	std	Y+6, r25	; 0x06
     aca:	af 83       	std	Y+7, r26	; 0x07
     acc:	b8 87       	std	Y+8, r27	; 0x08
     ace:	29 81       	ldd	r18, Y+1	; 0x01
     ad0:	3a 81       	ldd	r19, Y+2	; 0x02
     ad2:	4b 81       	ldd	r20, Y+3	; 0x03
     ad4:	5c 81       	ldd	r21, Y+4	; 0x04
     ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
     ada:	af 85       	ldd	r26, Y+15	; 0x0f
     adc:	b8 89       	ldd	r27, Y+16	; 0x10
     ade:	28 17       	cp	r18, r24
     ae0:	39 07       	cpc	r19, r25
     ae2:	4a 07       	cpc	r20, r26
     ae4:	5b 07       	cpc	r21, r27
     ae6:	64 f0       	brlt	.+24     	; 0xb00 <_Z4lineffff+0x3f0>
     ae8:	2d 81       	ldd	r18, Y+5	; 0x05
     aea:	3e 81       	ldd	r19, Y+6	; 0x06
     aec:	4f 81       	ldd	r20, Y+7	; 0x07
     aee:	58 85       	ldd	r21, Y+8	; 0x08
     af0:	2f 5f       	subi	r18, 0xFF	; 255
     af2:	3f 4f       	sbci	r19, 0xFF	; 255
     af4:	4f 4f       	sbci	r20, 0xFF	; 255
     af6:	5f 4f       	sbci	r21, 0xFF	; 255
     af8:	2d 83       	std	Y+5, r18	; 0x05
     afa:	3e 83       	std	Y+6, r19	; 0x06
     afc:	4f 83       	std	Y+7, r20	; 0x07
     afe:	58 87       	std	Y+8, r21	; 0x08
     b00:	8d 81       	ldd	r24, Y+5	; 0x05
     b02:	9e 81       	ldd	r25, Y+6	; 0x06
     b04:	0e 94 cb 13 	call	0x2796	; 0x2796 <delayMicroseconds>
     b08:	89 81       	ldd	r24, Y+1	; 0x01
     b0a:	9a 81       	ldd	r25, Y+2	; 0x02
     b0c:	ab 81       	ldd	r26, Y+3	; 0x03
     b0e:	bc 81       	ldd	r27, Y+4	; 0x04
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	a1 1d       	adc	r26, r1
     b14:	b1 1d       	adc	r27, r1
     b16:	89 83       	std	Y+1, r24	; 0x01
     b18:	9a 83       	std	Y+2, r25	; 0x02
     b1a:	ab 83       	std	Y+3, r26	; 0x03
     b1c:	bc 83       	std	Y+4, r27	; 0x04
     b1e:	72 cf       	rjmp	.-284    	; 0xa04 <_Z4lineffff+0x2f4>
     b20:	29 89       	ldd	r18, Y+17	; 0x11
     b22:	3a 89       	ldd	r19, Y+18	; 0x12
     b24:	4b 89       	ldd	r20, Y+19	; 0x13
     b26:	5c 89       	ldd	r21, Y+20	; 0x14
     b28:	20 93 72 02 	sts	0x0272, r18	; 0x800272 <px>
     b2c:	30 93 73 02 	sts	0x0273, r19	; 0x800273 <px+0x1>
     b30:	40 93 74 02 	sts	0x0274, r20	; 0x800274 <px+0x2>
     b34:	50 93 75 02 	sts	0x0275, r21	; 0x800275 <px+0x3>
     b38:	8d 89       	ldd	r24, Y+21	; 0x15
     b3a:	9e 89       	ldd	r25, Y+22	; 0x16
     b3c:	af 89       	ldd	r26, Y+23	; 0x17
     b3e:	b8 8d       	ldd	r27, Y+24	; 0x18
     b40:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <py>
     b44:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <py+0x1>
     b48:	a0 93 70 02 	sts	0x0270, r26	; 0x800270 <py+0x2>
     b4c:	b0 93 71 02 	sts	0x0271, r27	; 0x800271 <py+0x3>
     b50:	29 8d       	ldd	r18, Y+25	; 0x19
     b52:	3a 8d       	ldd	r19, Y+26	; 0x1a
     b54:	4b 8d       	ldd	r20, Y+27	; 0x1b
     b56:	5c 8d       	ldd	r21, Y+28	; 0x1c
     b58:	20 93 6a 02 	sts	0x026A, r18	; 0x80026a <pz>
     b5c:	30 93 6b 02 	sts	0x026B, r19	; 0x80026b <pz+0x1>
     b60:	40 93 6c 02 	sts	0x026C, r20	; 0x80026c <pz+0x2>
     b64:	50 93 6d 02 	sts	0x026D, r21	; 0x80026d <pz+0x3>
     b68:	a0 92 66 02 	sts	0x0266, r10	; 0x800266 <pe>
     b6c:	b0 92 67 02 	sts	0x0267, r11	; 0x800267 <pe+0x1>
     b70:	c0 92 68 02 	sts	0x0268, r12	; 0x800268 <pe+0x2>
     b74:	d0 92 69 02 	sts	0x0269, r13	; 0x800269 <pe+0x3>
     b78:	6e 96       	adiw	r28, 0x1e	; 30
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	cf 90       	pop	r12
     b94:	bf 90       	pop	r11
     b96:	af 90       	pop	r10
     b98:	7f 90       	pop	r7
     b9a:	6f 90       	pop	r6
     b9c:	5f 90       	pop	r5
     b9e:	4f 90       	pop	r4
     ba0:	73 cd       	rjmp	.-1306   	; 0x688 <_Z5wherev>

00000ba2 <_Z4helpv>:
     ba2:	66 ee       	ldi	r22, 0xE6	; 230
     ba4:	72 e0       	ldi	r23, 0x02	; 2
     ba6:	80 e1       	ldi	r24, 0x10	; 16
     ba8:	93 e0       	ldi	r25, 0x03	; 3
     baa:	0e 94 3a 11 	call	0x2274	; 0x2274 <_ZN5Print5printEPK19__FlashStringHelper>
     bae:	4a e0       	ldi	r20, 0x0A	; 10
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	62 e0       	ldi	r22, 0x02	; 2
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	80 e1       	ldi	r24, 0x10	; 16
     bb8:	93 e0       	ldi	r25, 0x03	; 3
     bba:	0e 94 2c 12 	call	0x2458	; 0x2458 <_ZN5Print7printlnEii>
     bbe:	6c ed       	ldi	r22, 0xDC	; 220
     bc0:	72 e0       	ldi	r23, 0x02	; 2
     bc2:	80 e1       	ldi	r24, 0x10	; 16
     bc4:	93 e0       	ldi	r25, 0x03	; 3
     bc6:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     bca:	66 ea       	ldi	r22, 0xA6	; 166
     bcc:	72 e0       	ldi	r23, 0x02	; 2
     bce:	80 e1       	ldi	r24, 0x10	; 16
     bd0:	93 e0       	ldi	r25, 0x03	; 3
     bd2:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     bd6:	6e e8       	ldi	r22, 0x8E	; 142
     bd8:	72 e0       	ldi	r23, 0x02	; 2
     bda:	80 e1       	ldi	r24, 0x10	; 16
     bdc:	93 e0       	ldi	r25, 0x03	; 3
     bde:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     be2:	69 e7       	ldi	r22, 0x79	; 121
     be4:	72 e0       	ldi	r23, 0x02	; 2
     be6:	80 e1       	ldi	r24, 0x10	; 16
     be8:	93 e0       	ldi	r25, 0x03	; 3
     bea:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     bee:	64 e6       	ldi	r22, 0x64	; 100
     bf0:	72 e0       	ldi	r23, 0x02	; 2
     bf2:	80 e1       	ldi	r24, 0x10	; 16
     bf4:	93 e0       	ldi	r25, 0x03	; 3
     bf6:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     bfa:	64 e3       	ldi	r22, 0x34	; 52
     bfc:	72 e0       	ldi	r23, 0x02	; 2
     bfe:	80 e1       	ldi	r24, 0x10	; 16
     c00:	93 e0       	ldi	r25, 0x03	; 3
     c02:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     c06:	6e e1       	ldi	r22, 0x1E	; 30
     c08:	72 e0       	ldi	r23, 0x02	; 2
     c0a:	80 e1       	ldi	r24, 0x10	; 16
     c0c:	93 e0       	ldi	r25, 0x03	; 3
     c0e:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     c12:	64 e0       	ldi	r22, 0x04	; 4
     c14:	72 e0       	ldi	r23, 0x02	; 2
     c16:	80 e1       	ldi	r24, 0x10	; 16
     c18:	93 e0       	ldi	r25, 0x03	; 3
     c1a:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     c1e:	6f ed       	ldi	r22, 0xDF	; 223
     c20:	71 e0       	ldi	r23, 0x01	; 1
     c22:	80 e1       	ldi	r24, 0x10	; 16
     c24:	93 e0       	ldi	r25, 0x03	; 3
     c26:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     c2a:	69 eb       	ldi	r22, 0xB9	; 185
     c2c:	71 e0       	ldi	r23, 0x01	; 1
     c2e:	80 e1       	ldi	r24, 0x10	; 16
     c30:	93 e0       	ldi	r25, 0x03	; 3
     c32:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <_ZN5Print7printlnEPK19__FlashStringHelper>

00000c36 <_Z14processCommandv>:
     c36:	2f 92       	push	r2
     c38:	3f 92       	push	r3
     c3a:	4f 92       	push	r4
     c3c:	5f 92       	push	r5
     c3e:	6f 92       	push	r6
     c40:	7f 92       	push	r7
     c42:	8f 92       	push	r8
     c44:	9f 92       	push	r9
     c46:	af 92       	push	r10
     c48:	bf 92       	push	r11
     c4a:	cf 92       	push	r12
     c4c:	df 92       	push	r13
     c4e:	ef 92       	push	r14
     c50:	ff 92       	push	r15
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	aa 97       	sbiw	r28, 0x2a	; 42
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <serialBuffer>
     c6e:	8b 33       	cpi	r24, 0x3B	; 59
     c70:	09 f4       	brne	.+2      	; 0xc74 <_Z14processCommandv+0x3e>
     c72:	0a c4       	rjmp	.+2068   	; 0x1488 <_Z14processCommandv+0x852>
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	60 e8       	ldi	r22, 0x80	; 128
     c7a:	7f eb       	ldi	r23, 0xBF	; 191
     c7c:	8e e4       	ldi	r24, 0x4E	; 78
     c7e:	9c dc       	rcall	.-1736   	; 0x5b8 <_Z11parseNumbercf>
     c80:	5d d6       	rcall	.+3258   	; 0x193c <__fixsfsi>
     c82:	6f 3f       	cpi	r22, 0xFF	; 255
     c84:	2f ef       	ldi	r18, 0xFF	; 255
     c86:	72 07       	cpc	r23, r18
     c88:	82 07       	cpc	r24, r18
     c8a:	92 07       	cpc	r25, r18
     c8c:	09 f4       	brne	.+2      	; 0xc90 <_Z14processCommandv+0x5a>
     c8e:	7b c0       	rjmp	.+246    	; 0xd86 <_Z14processCommandv+0x150>
     c90:	20 91 80 02 	lds	r18, 0x0280	; 0x800280 <serialBuffer>
     c94:	2e 34       	cpi	r18, 0x4E	; 78
     c96:	09 f0       	breq	.+2      	; 0xc9a <_Z14processCommandv+0x64>
     c98:	76 c0       	rjmp	.+236    	; 0xd86 <_Z14processCommandv+0x150>
     c9a:	c0 90 62 02 	lds	r12, 0x0262	; 0x800262 <__data_end>
     c9e:	d0 90 63 02 	lds	r13, 0x0263	; 0x800263 <__data_end+0x1>
     ca2:	e0 90 64 02 	lds	r14, 0x0264	; 0x800264 <__data_end+0x2>
     ca6:	f0 90 65 02 	lds	r15, 0x0265	; 0x800265 <__data_end+0x3>
     caa:	6c 15       	cp	r22, r12
     cac:	7d 05       	cpc	r23, r13
     cae:	8e 05       	cpc	r24, r14
     cb0:	9f 05       	cpc	r25, r15
     cb2:	19 f0       	breq	.+6      	; 0xcba <_Z14processCommandv+0x84>
     cb4:	6d ea       	ldi	r22, 0xAD	; 173
     cb6:	71 e0       	ldi	r23, 0x01	; 1
     cb8:	26 c0       	rjmp	.+76     	; 0xd06 <_Z14processCommandv+0xd0>
     cba:	6a e2       	ldi	r22, 0x2A	; 42
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	80 e8       	ldi	r24, 0x80	; 128
     cc0:	92 e0       	ldi	r25, 0x02	; 2
     cc2:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <strchr>
     cc6:	89 2b       	or	r24, r25
     cc8:	09 f4       	brne	.+2      	; 0xccc <_Z14processCommandv+0x96>
     cca:	47 c0       	rjmp	.+142    	; 0xd5a <_Z14processCommandv+0x124>
     ccc:	e0 e8       	ldi	r30, 0x80	; 128
     cce:	f2 e0       	ldi	r31, 0x02	; 2
     cd0:	19 82       	std	Y+1, r1	; 0x01
     cd2:	9f 01       	movw	r18, r30
     cd4:	20 58       	subi	r18, 0x80	; 128
     cd6:	32 40       	sbci	r19, 0x02	; 2
     cd8:	91 91       	ld	r25, Z+
     cda:	9a 32       	cpi	r25, 0x2A	; 42
     cdc:	21 f0       	breq	.+8      	; 0xce6 <_Z14processCommandv+0xb0>
     cde:	39 81       	ldd	r19, Y+1	; 0x01
     ce0:	39 27       	eor	r19, r25
     ce2:	39 83       	std	Y+1, r19	; 0x01
     ce4:	f6 cf       	rjmp	.-20     	; 0xcd2 <_Z14processCommandv+0x9c>
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	c9 01       	movw	r24, r18
     cec:	8f 57       	subi	r24, 0x7F	; 127
     cee:	9d 4f       	sbci	r25, 0xFD	; 253
     cf0:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strtod>
     cf4:	23 d6       	rcall	.+3142   	; 0x193c <__fixsfsi>
     cf6:	49 81       	ldd	r20, Y+1	; 0x01
     cf8:	24 2f       	mov	r18, r20
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	26 17       	cp	r18, r22
     cfe:	37 07       	cpc	r19, r23
     d00:	79 f1       	breq	.+94     	; 0xd60 <_Z14processCommandv+0x12a>
     d02:	60 ea       	ldi	r22, 0xA0	; 160
     d04:	71 e0       	ldi	r23, 0x01	; 1
     d06:	80 e1       	ldi	r24, 0x10	; 16
     d08:	93 e0       	ldi	r25, 0x03	; 3
     d0a:	0e 94 3a 11 	call	0x2274	; 0x2274 <_ZN5Print5printEPK19__FlashStringHelper>
     d0e:	40 91 62 02 	lds	r20, 0x0262	; 0x800262 <__data_end>
     d12:	50 91 63 02 	lds	r21, 0x0263	; 0x800263 <__data_end+0x1>
     d16:	60 91 64 02 	lds	r22, 0x0264	; 0x800264 <__data_end+0x2>
     d1a:	70 91 65 02 	lds	r23, 0x0265	; 0x800265 <__data_end+0x3>
     d1e:	2a e0       	ldi	r18, 0x0A	; 10
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	80 e1       	ldi	r24, 0x10	; 16
     d24:	93 e0       	ldi	r25, 0x03	; 3
     d26:	aa 96       	adiw	r28, 0x2a	; 42
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	df 90       	pop	r13
     d40:	cf 90       	pop	r12
     d42:	bf 90       	pop	r11
     d44:	af 90       	pop	r10
     d46:	9f 90       	pop	r9
     d48:	8f 90       	pop	r8
     d4a:	7f 90       	pop	r7
     d4c:	6f 90       	pop	r6
     d4e:	5f 90       	pop	r5
     d50:	4f 90       	pop	r4
     d52:	3f 90       	pop	r3
     d54:	2f 90       	pop	r2
     d56:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <_ZN5Print7printlnEli>
     d5a:	64 e9       	ldi	r22, 0x94	; 148
     d5c:	71 e0       	ldi	r23, 0x01	; 1
     d5e:	d3 cf       	rjmp	.-90     	; 0xd06 <_Z14processCommandv+0xd0>
     d60:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
     d64:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <__data_end+0x1>
     d68:	a0 91 64 02 	lds	r26, 0x0264	; 0x800264 <__data_end+0x2>
     d6c:	b0 91 65 02 	lds	r27, 0x0265	; 0x800265 <__data_end+0x3>
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	a1 1d       	adc	r26, r1
     d74:	b1 1d       	adc	r27, r1
     d76:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <__data_end>
     d7a:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <__data_end+0x1>
     d7e:	a0 93 64 02 	sts	0x0264, r26	; 0x800264 <__data_end+0x2>
     d82:	b0 93 65 02 	sts	0x0265, r27	; 0x800265 <__data_end+0x3>
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	50 e0       	ldi	r21, 0x00	; 0
     d8a:	60 e8       	ldi	r22, 0x80	; 128
     d8c:	7f eb       	ldi	r23, 0xBF	; 191
     d8e:	87 e4       	ldi	r24, 0x47	; 71
     d90:	13 dc       	rcall	.-2010   	; 0x5b8 <_Z11parseNumbercf>
     d92:	d4 d5       	rcall	.+2984   	; 0x193c <__fixsfsi>
     d94:	6b 01       	movw	r12, r22
     d96:	7c 01       	movw	r14, r24
     d98:	84 e0       	ldi	r24, 0x04	; 4
     d9a:	c8 16       	cp	r12, r24
     d9c:	d1 04       	cpc	r13, r1
     d9e:	e1 04       	cpc	r14, r1
     da0:	f1 04       	cpc	r15, r1
     da2:	54 f4       	brge	.+20     	; 0xdb8 <_Z14processCommandv+0x182>
     da4:	92 e0       	ldi	r25, 0x02	; 2
     da6:	c9 16       	cp	r12, r25
     da8:	d1 04       	cpc	r13, r1
     daa:	e1 04       	cpc	r14, r1
     dac:	f1 04       	cpc	r15, r1
     dae:	0c f0       	brlt	.+2      	; 0xdb2 <_Z14processCommandv+0x17c>
     db0:	0e c1       	rjmp	.+540    	; 0xfce <_Z14processCommandv+0x398>
     db2:	f7 fe       	sbrs	r15, 7
     db4:	66 c0       	rjmp	.+204    	; 0xe82 <_Z14processCommandv+0x24c>
     db6:	25 c3       	rjmp	.+1610   	; 0x1402 <_Z14processCommandv+0x7cc>
     db8:	aa e5       	ldi	r26, 0x5A	; 90
     dba:	ca 16       	cp	r12, r26
     dbc:	d1 04       	cpc	r13, r1
     dbe:	e1 04       	cpc	r14, r1
     dc0:	f1 04       	cpc	r15, r1
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <_Z14processCommandv+0x190>
     dc4:	18 c3       	rjmp	.+1584   	; 0x13f6 <_Z14processCommandv+0x7c0>
     dc6:	a4 f4       	brge	.+40     	; 0xdf0 <_Z14processCommandv+0x1ba>
     dc8:	24 e0       	ldi	r18, 0x04	; 4
     dca:	c2 16       	cp	r12, r18
     dcc:	d1 04       	cpc	r13, r1
     dce:	e1 04       	cpc	r14, r1
     dd0:	f1 04       	cpc	r15, r1
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <_Z14processCommandv+0x1a0>
     dd4:	16 c3       	rjmp	.+1580   	; 0x1402 <_Z14processCommandv+0x7cc>
     dd6:	40 e0       	ldi	r20, 0x00	; 0
     dd8:	50 e0       	ldi	r21, 0x00	; 0
     dda:	ba 01       	movw	r22, r20
     ddc:	80 e5       	ldi	r24, 0x50	; 80
     dde:	ec db       	rcall	.-2088   	; 0x5b8 <_Z11parseNumbercf>
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	4a e7       	ldi	r20, 0x7A	; 122
     de6:	54 e4       	ldi	r21, 0x44	; 68
     de8:	35 d7       	rcall	.+3690   	; 0x1c54 <__mulsf3>
     dea:	a8 d5       	rcall	.+2896   	; 0x193c <__fixsfsi>
     dec:	5e db       	rcall	.-2372   	; 0x4aa <_Z5pausel>
     dee:	09 c3       	rjmp	.+1554   	; 0x1402 <_Z14processCommandv+0x7cc>
     df0:	3b e5       	ldi	r19, 0x5B	; 91
     df2:	c3 16       	cp	r12, r19
     df4:	d1 04       	cpc	r13, r1
     df6:	e1 04       	cpc	r14, r1
     df8:	f1 04       	cpc	r15, r1
     dfa:	09 f4       	brne	.+2      	; 0xdfe <_Z14processCommandv+0x1c8>
     dfc:	00 c3       	rjmp	.+1536   	; 0x13fe <_Z14processCommandv+0x7c8>
     dfe:	4c e5       	ldi	r20, 0x5C	; 92
     e00:	c4 16       	cp	r12, r20
     e02:	d1 04       	cpc	r13, r1
     e04:	e1 04       	cpc	r14, r1
     e06:	f1 04       	cpc	r15, r1
     e08:	09 f0       	breq	.+2      	; 0xe0c <_Z14processCommandv+0x1d6>
     e0a:	fb c2       	rjmp	.+1526   	; 0x1402 <_Z14processCommandv+0x7cc>
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	50 e0       	ldi	r21, 0x00	; 0
     e10:	ba 01       	movw	r22, r20
     e12:	85 e4       	ldi	r24, 0x45	; 69
     e14:	d1 db       	rcall	.-2142   	; 0x5b8 <_Z11parseNumbercf>
     e16:	6b 01       	movw	r12, r22
     e18:	7c 01       	movw	r14, r24
     e1a:	40 e0       	ldi	r20, 0x00	; 0
     e1c:	50 e0       	ldi	r21, 0x00	; 0
     e1e:	ba 01       	movw	r22, r20
     e20:	8a e5       	ldi	r24, 0x5A	; 90
     e22:	ca db       	rcall	.-2156   	; 0x5b8 <_Z11parseNumbercf>
     e24:	4b 01       	movw	r8, r22
     e26:	5c 01       	movw	r10, r24
     e28:	40 e0       	ldi	r20, 0x00	; 0
     e2a:	50 e0       	ldi	r21, 0x00	; 0
     e2c:	ba 01       	movw	r22, r20
     e2e:	89 e5       	ldi	r24, 0x59	; 89
     e30:	c3 db       	rcall	.-2170   	; 0x5b8 <_Z11parseNumbercf>
     e32:	2b 01       	movw	r4, r22
     e34:	3c 01       	movw	r6, r24
     e36:	40 e0       	ldi	r20, 0x00	; 0
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	ba 01       	movw	r22, r20
     e3c:	88 e5       	ldi	r24, 0x58	; 88
     e3e:	bc db       	rcall	.-2184   	; 0x5b8 <_Z11parseNumbercf>
     e40:	60 93 72 02 	sts	0x0272, r22	; 0x800272 <px>
     e44:	70 93 73 02 	sts	0x0273, r23	; 0x800273 <px+0x1>
     e48:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <px+0x2>
     e4c:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <px+0x3>
     e50:	40 92 6e 02 	sts	0x026E, r4	; 0x80026e <py>
     e54:	50 92 6f 02 	sts	0x026F, r5	; 0x80026f <py+0x1>
     e58:	60 92 70 02 	sts	0x0270, r6	; 0x800270 <py+0x2>
     e5c:	70 92 71 02 	sts	0x0271, r7	; 0x800271 <py+0x3>
     e60:	80 92 6a 02 	sts	0x026A, r8	; 0x80026a <pz>
     e64:	90 92 6b 02 	sts	0x026B, r9	; 0x80026b <pz+0x1>
     e68:	a0 92 6c 02 	sts	0x026C, r10	; 0x80026c <pz+0x2>
     e6c:	b0 92 6d 02 	sts	0x026D, r11	; 0x80026d <pz+0x3>
     e70:	c0 92 66 02 	sts	0x0266, r12	; 0x800266 <pe>
     e74:	d0 92 67 02 	sts	0x0267, r13	; 0x800267 <pe+0x1>
     e78:	e0 92 68 02 	sts	0x0268, r14	; 0x800268 <pe+0x2>
     e7c:	f0 92 69 02 	sts	0x0269, r15	; 0x800269 <pe+0x3>
     e80:	c0 c2       	rjmp	.+1408   	; 0x1402 <_Z14processCommandv+0x7cc>
     e82:	40 91 7a 02 	lds	r20, 0x027A	; 0x80027a <fr>
     e86:	50 91 7b 02 	lds	r21, 0x027B	; 0x80027b <fr+0x1>
     e8a:	60 91 7c 02 	lds	r22, 0x027C	; 0x80027c <fr+0x2>
     e8e:	70 91 7d 02 	lds	r23, 0x027D	; 0x80027d <fr+0x3>
     e92:	86 e4       	ldi	r24, 0x46	; 70
     e94:	91 db       	rcall	.-2270   	; 0x5b8 <_Z11parseNumbercf>
     e96:	20 db       	rcall	.-2496   	; 0x4d8 <_Z8feedratef>
     e98:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     e9c:	88 23       	and	r24, r24
     e9e:	49 f0       	breq	.+18     	; 0xeb2 <_Z14processCommandv+0x27c>
     ea0:	40 91 66 02 	lds	r20, 0x0266	; 0x800266 <pe>
     ea4:	50 91 67 02 	lds	r21, 0x0267	; 0x800267 <pe+0x1>
     ea8:	60 91 68 02 	lds	r22, 0x0268	; 0x800268 <pe+0x2>
     eac:	70 91 69 02 	lds	r23, 0x0269	; 0x800269 <pe+0x3>
     eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <_Z14processCommandv+0x282>
     eb2:	40 e0       	ldi	r20, 0x00	; 0
     eb4:	50 e0       	ldi	r21, 0x00	; 0
     eb6:	ba 01       	movw	r22, r20
     eb8:	85 e4       	ldi	r24, 0x45	; 69
     eba:	7e db       	rcall	.-2308   	; 0x5b8 <_Z11parseNumbercf>
     ebc:	a0 91 00 02 	lds	r26, 0x0200	; 0x800200 <__data_start>
     ec0:	a9 83       	std	Y+1, r26	; 0x01
     ec2:	a1 11       	cpse	r26, r1
     ec4:	09 c0       	rjmp	.+18     	; 0xed8 <_Z14processCommandv+0x2a2>
     ec6:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <pe>
     eca:	30 91 67 02 	lds	r19, 0x0267	; 0x800267 <pe+0x1>
     ece:	40 91 68 02 	lds	r20, 0x0268	; 0x800268 <pe+0x2>
     ed2:	50 91 69 02 	lds	r21, 0x0269	; 0x800269 <pe+0x3>
     ed6:	03 c0       	rjmp	.+6      	; 0xede <_Z14processCommandv+0x2a8>
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	a9 01       	movw	r20, r18
     ede:	e6 d3       	rcall	.+1996   	; 0x16ac <__addsf3>
     ee0:	5b 01       	movw	r10, r22
     ee2:	6c 01       	movw	r12, r24
     ee4:	b9 81       	ldd	r27, Y+1	; 0x01
     ee6:	bb 23       	and	r27, r27
     ee8:	49 f0       	breq	.+18     	; 0xefc <_Z14processCommandv+0x2c6>
     eea:	40 91 6a 02 	lds	r20, 0x026A	; 0x80026a <pz>
     eee:	50 91 6b 02 	lds	r21, 0x026B	; 0x80026b <pz+0x1>
     ef2:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <pz+0x2>
     ef6:	70 91 6d 02 	lds	r23, 0x026D	; 0x80026d <pz+0x3>
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <_Z14processCommandv+0x2cc>
     efc:	40 e0       	ldi	r20, 0x00	; 0
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	ba 01       	movw	r22, r20
     f02:	8a e5       	ldi	r24, 0x5A	; 90
     f04:	59 db       	rcall	.-2382   	; 0x5b8 <_Z11parseNumbercf>
     f06:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
     f0a:	2d 83       	std	Y+5, r18	; 0x05
     f0c:	21 11       	cpse	r18, r1
     f0e:	09 c0       	rjmp	.+18     	; 0xf22 <_Z14processCommandv+0x2ec>
     f10:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <pz>
     f14:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <pz+0x1>
     f18:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <pz+0x2>
     f1c:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <pz+0x3>
     f20:	03 c0       	rjmp	.+6      	; 0xf28 <_Z14processCommandv+0x2f2>
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	a9 01       	movw	r20, r18
     f28:	c1 d3       	rcall	.+1922   	; 0x16ac <__addsf3>
     f2a:	69 83       	std	Y+1, r22	; 0x01
     f2c:	7a 83       	std	Y+2, r23	; 0x02
     f2e:	8b 83       	std	Y+3, r24	; 0x03
     f30:	9c 83       	std	Y+4, r25	; 0x04
     f32:	3d 81       	ldd	r19, Y+5	; 0x05
     f34:	33 23       	and	r19, r19
     f36:	49 f0       	breq	.+18     	; 0xf4a <_Z14processCommandv+0x314>
     f38:	40 91 6e 02 	lds	r20, 0x026E	; 0x80026e <py>
     f3c:	50 91 6f 02 	lds	r21, 0x026F	; 0x80026f <py+0x1>
     f40:	60 91 70 02 	lds	r22, 0x0270	; 0x800270 <py+0x2>
     f44:	70 91 71 02 	lds	r23, 0x0271	; 0x800271 <py+0x3>
     f48:	03 c0       	rjmp	.+6      	; 0xf50 <_Z14processCommandv+0x31a>
     f4a:	40 e0       	ldi	r20, 0x00	; 0
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	ba 01       	movw	r22, r20
     f50:	89 e5       	ldi	r24, 0x59	; 89
     f52:	32 db       	rcall	.-2460   	; 0x5b8 <_Z11parseNumbercf>
     f54:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__data_start>
     f58:	4d 83       	std	Y+5, r20	; 0x05
     f5a:	41 11       	cpse	r20, r1
     f5c:	09 c0       	rjmp	.+18     	; 0xf70 <_Z14processCommandv+0x33a>
     f5e:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <py>
     f62:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <py+0x1>
     f66:	40 91 70 02 	lds	r20, 0x0270	; 0x800270 <py+0x2>
     f6a:	50 91 71 02 	lds	r21, 0x0271	; 0x800271 <py+0x3>
     f6e:	03 c0       	rjmp	.+6      	; 0xf76 <_Z14processCommandv+0x340>
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	a9 01       	movw	r20, r18
     f76:	9a d3       	rcall	.+1844   	; 0x16ac <__addsf3>
     f78:	2b 01       	movw	r4, r22
     f7a:	3c 01       	movw	r6, r24
     f7c:	8d 81       	ldd	r24, Y+5	; 0x05
     f7e:	88 23       	and	r24, r24
     f80:	49 f0       	breq	.+18     	; 0xf94 <_Z14processCommandv+0x35e>
     f82:	40 91 72 02 	lds	r20, 0x0272	; 0x800272 <px>
     f86:	50 91 73 02 	lds	r21, 0x0273	; 0x800273 <px+0x1>
     f8a:	60 91 74 02 	lds	r22, 0x0274	; 0x800274 <px+0x2>
     f8e:	70 91 75 02 	lds	r23, 0x0275	; 0x800275 <px+0x3>
     f92:	03 c0       	rjmp	.+6      	; 0xf9a <_Z14processCommandv+0x364>
     f94:	40 e0       	ldi	r20, 0x00	; 0
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	ba 01       	movw	r22, r20
     f9a:	88 e5       	ldi	r24, 0x58	; 88
     f9c:	0d db       	rcall	.-2534   	; 0x5b8 <_Z11parseNumbercf>
     f9e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
     fa2:	21 11       	cpse	r18, r1
     fa4:	09 c0       	rjmp	.+18     	; 0xfb8 <_Z14processCommandv+0x382>
     fa6:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <px>
     faa:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <px+0x1>
     fae:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <px+0x2>
     fb2:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <px+0x3>
     fb6:	03 c0       	rjmp	.+6      	; 0xfbe <_Z14processCommandv+0x388>
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	a9 01       	movw	r20, r18
     fbe:	76 d3       	rcall	.+1772   	; 0x16ac <__addsf3>
     fc0:	e9 80       	ldd	r14, Y+1	; 0x01
     fc2:	fa 80       	ldd	r15, Y+2	; 0x02
     fc4:	0b 81       	ldd	r16, Y+3	; 0x03
     fc6:	1c 81       	ldd	r17, Y+4	; 0x04
     fc8:	a3 01       	movw	r20, r6
     fca:	92 01       	movw	r18, r4
     fcc:	12 c2       	rjmp	.+1060   	; 0x13f2 <_Z14processCommandv+0x7bc>
     fce:	40 91 7a 02 	lds	r20, 0x027A	; 0x80027a <fr>
     fd2:	50 91 7b 02 	lds	r21, 0x027B	; 0x80027b <fr+0x1>
     fd6:	60 91 7c 02 	lds	r22, 0x027C	; 0x80027c <fr+0x2>
     fda:	70 91 7d 02 	lds	r23, 0x027D	; 0x80027d <fr+0x3>
     fde:	86 e4       	ldi	r24, 0x46	; 70
     fe0:	eb da       	rcall	.-2602   	; 0x5b8 <_Z11parseNumbercf>
     fe2:	7a da       	rcall	.-2828   	; 0x4d8 <_Z8feedratef>
     fe4:	92 e0       	ldi	r25, 0x02	; 2
     fe6:	c9 16       	cp	r12, r25
     fe8:	d1 04       	cpc	r13, r1
     fea:	e1 04       	cpc	r14, r1
     fec:	f1 04       	cpc	r15, r1
     fee:	29 f0       	breq	.+10     	; 0xffa <_Z14processCommandv+0x3c4>
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	a0 e8       	ldi	r26, 0x80	; 128
     ff6:	bf e3       	ldi	r27, 0x3F	; 63
     ff8:	04 c0       	rjmp	.+8      	; 0x1002 <_Z14processCommandv+0x3cc>
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	a0 e8       	ldi	r26, 0x80	; 128
    1000:	bf eb       	ldi	r27, 0xBF	; 191
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	9a 83       	std	Y+2, r25	; 0x02
    1006:	ab 83       	std	Y+3, r26	; 0x03
    1008:	bc 83       	std	Y+4, r27	; 0x04
    100a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    100e:	88 23       	and	r24, r24
    1010:	49 f0       	breq	.+18     	; 0x1024 <_Z14processCommandv+0x3ee>
    1012:	40 91 6e 02 	lds	r20, 0x026E	; 0x80026e <py>
    1016:	50 91 6f 02 	lds	r21, 0x026F	; 0x80026f <py+0x1>
    101a:	60 91 70 02 	lds	r22, 0x0270	; 0x800270 <py+0x2>
    101e:	70 91 71 02 	lds	r23, 0x0271	; 0x800271 <py+0x3>
    1022:	03 c0       	rjmp	.+6      	; 0x102a <_Z14processCommandv+0x3f4>
    1024:	40 e0       	ldi	r20, 0x00	; 0
    1026:	50 e0       	ldi	r21, 0x00	; 0
    1028:	ba 01       	movw	r22, r20
    102a:	89 e5       	ldi	r24, 0x59	; 89
    102c:	c5 da       	rcall	.-2678   	; 0x5b8 <_Z11parseNumbercf>
    102e:	a0 91 00 02 	lds	r26, 0x0200	; 0x800200 <__data_start>
    1032:	ad 83       	std	Y+5, r26	; 0x05
    1034:	a1 11       	cpse	r26, r1
    1036:	09 c0       	rjmp	.+18     	; 0x104a <_Z14processCommandv+0x414>
    1038:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <py>
    103c:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <py+0x1>
    1040:	40 91 70 02 	lds	r20, 0x0270	; 0x800270 <py+0x2>
    1044:	50 91 71 02 	lds	r21, 0x0271	; 0x800271 <py+0x3>
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <_Z14processCommandv+0x41a>
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	a9 01       	movw	r20, r18
    1050:	2d d3       	rcall	.+1626   	; 0x16ac <__addsf3>
    1052:	6d 8b       	std	Y+21, r22	; 0x15
    1054:	7e 8b       	std	Y+22, r23	; 0x16
    1056:	8f 8b       	std	Y+23, r24	; 0x17
    1058:	98 8f       	std	Y+24, r25	; 0x18
    105a:	bd 81       	ldd	r27, Y+5	; 0x05
    105c:	bb 23       	and	r27, r27
    105e:	49 f0       	breq	.+18     	; 0x1072 <_Z14processCommandv+0x43c>
    1060:	40 91 72 02 	lds	r20, 0x0272	; 0x800272 <px>
    1064:	50 91 73 02 	lds	r21, 0x0273	; 0x800273 <px+0x1>
    1068:	60 91 74 02 	lds	r22, 0x0274	; 0x800274 <px+0x2>
    106c:	70 91 75 02 	lds	r23, 0x0275	; 0x800275 <px+0x3>
    1070:	03 c0       	rjmp	.+6      	; 0x1078 <_Z14processCommandv+0x442>
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	ba 01       	movw	r22, r20
    1078:	88 e5       	ldi	r24, 0x58	; 88
    107a:	9e da       	rcall	.-2756   	; 0x5b8 <_Z11parseNumbercf>
    107c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1080:	2d 83       	std	Y+5, r18	; 0x05
    1082:	21 11       	cpse	r18, r1
    1084:	09 c0       	rjmp	.+18     	; 0x1098 <_Z14processCommandv+0x462>
    1086:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <px>
    108a:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <px+0x1>
    108e:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <px+0x2>
    1092:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <px+0x3>
    1096:	03 c0       	rjmp	.+6      	; 0x109e <_Z14processCommandv+0x468>
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	a9 01       	movw	r20, r18
    109e:	06 d3       	rcall	.+1548   	; 0x16ac <__addsf3>
    10a0:	69 8f       	std	Y+25, r22	; 0x19
    10a2:	7a 8f       	std	Y+26, r23	; 0x1a
    10a4:	8b 8f       	std	Y+27, r24	; 0x1b
    10a6:	9c 8f       	std	Y+28, r25	; 0x1c
    10a8:	3d 81       	ldd	r19, Y+5	; 0x05
    10aa:	33 23       	and	r19, r19
    10ac:	49 f0       	breq	.+18     	; 0x10c0 <_Z14processCommandv+0x48a>
    10ae:	40 91 6e 02 	lds	r20, 0x026E	; 0x80026e <py>
    10b2:	50 91 6f 02 	lds	r21, 0x026F	; 0x80026f <py+0x1>
    10b6:	60 91 70 02 	lds	r22, 0x0270	; 0x800270 <py+0x2>
    10ba:	70 91 71 02 	lds	r23, 0x0271	; 0x800271 <py+0x3>
    10be:	03 c0       	rjmp	.+6      	; 0x10c6 <_Z14processCommandv+0x490>
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	ba 01       	movw	r22, r20
    10c6:	8a e4       	ldi	r24, 0x4A	; 74
    10c8:	77 da       	rcall	.-2834   	; 0x5b8 <_Z11parseNumbercf>
    10ca:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__data_start>
    10ce:	4d 83       	std	Y+5, r20	; 0x05
    10d0:	41 11       	cpse	r20, r1
    10d2:	09 c0       	rjmp	.+18     	; 0x10e6 <_Z14processCommandv+0x4b0>
    10d4:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <py>
    10d8:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <py+0x1>
    10dc:	40 91 70 02 	lds	r20, 0x0270	; 0x800270 <py+0x2>
    10e0:	50 91 71 02 	lds	r21, 0x0271	; 0x800271 <py+0x3>
    10e4:	03 c0       	rjmp	.+6      	; 0x10ec <_Z14processCommandv+0x4b6>
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	a9 01       	movw	r20, r18
    10ec:	df d2       	rcall	.+1470   	; 0x16ac <__addsf3>
    10ee:	69 87       	std	Y+9, r22	; 0x09
    10f0:	7a 87       	std	Y+10, r23	; 0x0a
    10f2:	8b 87       	std	Y+11, r24	; 0x0b
    10f4:	9c 87       	std	Y+12, r25	; 0x0c
    10f6:	8d 81       	ldd	r24, Y+5	; 0x05
    10f8:	88 23       	and	r24, r24
    10fa:	49 f0       	breq	.+18     	; 0x110e <_Z14processCommandv+0x4d8>
    10fc:	40 91 72 02 	lds	r20, 0x0272	; 0x800272 <px>
    1100:	50 91 73 02 	lds	r21, 0x0273	; 0x800273 <px+0x1>
    1104:	60 91 74 02 	lds	r22, 0x0274	; 0x800274 <px+0x2>
    1108:	70 91 75 02 	lds	r23, 0x0275	; 0x800275 <px+0x3>
    110c:	03 c0       	rjmp	.+6      	; 0x1114 <_Z14processCommandv+0x4de>
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	50 e0       	ldi	r21, 0x00	; 0
    1112:	ba 01       	movw	r22, r20
    1114:	89 e4       	ldi	r24, 0x49	; 73
    1116:	50 da       	rcall	.-2912   	; 0x5b8 <_Z11parseNumbercf>
    1118:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    111c:	21 11       	cpse	r18, r1
    111e:	09 c0       	rjmp	.+18     	; 0x1132 <_Z14processCommandv+0x4fc>
    1120:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <px>
    1124:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <px+0x1>
    1128:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <px+0x2>
    112c:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <px+0x3>
    1130:	03 c0       	rjmp	.+6      	; 0x1138 <_Z14processCommandv+0x502>
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	a9 01       	movw	r20, r18
    1138:	b9 d2       	rcall	.+1394   	; 0x16ac <__addsf3>
    113a:	6d 87       	std	Y+13, r22	; 0x0d
    113c:	7e 87       	std	Y+14, r23	; 0x0e
    113e:	8f 87       	std	Y+15, r24	; 0x0f
    1140:	98 8b       	std	Y+16, r25	; 0x10
    1142:	9b 01       	movw	r18, r22
    1144:	ac 01       	movw	r20, r24
    1146:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <px>
    114a:	70 91 73 02 	lds	r23, 0x0273	; 0x800273 <px+0x1>
    114e:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <px+0x2>
    1152:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <px+0x3>
    1156:	a9 d2       	rcall	.+1362   	; 0x16aa <__subsf3>
    1158:	4b 01       	movw	r8, r22
    115a:	5c 01       	movw	r10, r24
    115c:	29 85       	ldd	r18, Y+9	; 0x09
    115e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1160:	4b 85       	ldd	r20, Y+11	; 0x0b
    1162:	5c 85       	ldd	r21, Y+12	; 0x0c
    1164:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <py>
    1168:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <py+0x1>
    116c:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <py+0x2>
    1170:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <py+0x3>
    1174:	9a d2       	rcall	.+1332   	; 0x16aa <__subsf3>
    1176:	6b 01       	movw	r12, r22
    1178:	7c 01       	movw	r14, r24
    117a:	a5 01       	movw	r20, r10
    117c:	94 01       	movw	r18, r8
    117e:	c5 01       	movw	r24, r10
    1180:	b4 01       	movw	r22, r8
    1182:	68 d5       	rcall	.+2768   	; 0x1c54 <__mulsf3>
    1184:	2b 01       	movw	r4, r22
    1186:	3c 01       	movw	r6, r24
    1188:	a7 01       	movw	r20, r14
    118a:	96 01       	movw	r18, r12
    118c:	c7 01       	movw	r24, r14
    118e:	b6 01       	movw	r22, r12
    1190:	61 d5       	rcall	.+2754   	; 0x1c54 <__mulsf3>
    1192:	9b 01       	movw	r18, r22
    1194:	ac 01       	movw	r20, r24
    1196:	c3 01       	movw	r24, r6
    1198:	b2 01       	movw	r22, r4
    119a:	88 d2       	rcall	.+1296   	; 0x16ac <__addsf3>
    119c:	c8 d5       	rcall	.+2960   	; 0x1d2e <sqrt>
    119e:	69 8b       	std	Y+17, r22	; 0x11
    11a0:	7a 8b       	std	Y+18, r23	; 0x12
    11a2:	8b 8b       	std	Y+19, r24	; 0x13
    11a4:	9c 8b       	std	Y+20, r25	; 0x14
    11a6:	a5 01       	movw	r20, r10
    11a8:	94 01       	movw	r18, r8
    11aa:	c7 01       	movw	r24, r14
    11ac:	b6 01       	movw	r22, r12
    11ae:	f1 d2       	rcall	.+1506   	; 0x1792 <atan2>
    11b0:	2b 01       	movw	r4, r22
    11b2:	3c 01       	movw	r6, r24
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	a9 01       	movw	r20, r18
    11ba:	51 d3       	rcall	.+1698   	; 0x185e <__cmpsf2>
    11bc:	87 ff       	sbrs	r24, 7
    11be:	09 c0       	rjmp	.+18     	; 0x11d2 <_Z14processCommandv+0x59c>
    11c0:	2b ed       	ldi	r18, 0xDB	; 219
    11c2:	3f e0       	ldi	r19, 0x0F	; 15
    11c4:	49 ec       	ldi	r20, 0xC9	; 201
    11c6:	50 e4       	ldi	r21, 0x40	; 64
    11c8:	c3 01       	movw	r24, r6
    11ca:	b2 01       	movw	r22, r4
    11cc:	6f d2       	rcall	.+1246   	; 0x16ac <__addsf3>
    11ce:	2b 01       	movw	r4, r22
    11d0:	3c 01       	movw	r6, r24
    11d2:	2d 85       	ldd	r18, Y+13	; 0x0d
    11d4:	3e 85       	ldd	r19, Y+14	; 0x0e
    11d6:	4f 85       	ldd	r20, Y+15	; 0x0f
    11d8:	58 89       	ldd	r21, Y+16	; 0x10
    11da:	69 8d       	ldd	r22, Y+25	; 0x19
    11dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11e2:	63 d2       	rcall	.+1222   	; 0x16aa <__subsf3>
    11e4:	6b 01       	movw	r12, r22
    11e6:	7c 01       	movw	r14, r24
    11e8:	29 85       	ldd	r18, Y+9	; 0x09
    11ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    11ec:	4b 85       	ldd	r20, Y+11	; 0x0b
    11ee:	5c 85       	ldd	r21, Y+12	; 0x0c
    11f0:	6d 89       	ldd	r22, Y+21	; 0x15
    11f2:	7e 89       	ldd	r23, Y+22	; 0x16
    11f4:	8f 89       	ldd	r24, Y+23	; 0x17
    11f6:	98 8d       	ldd	r25, Y+24	; 0x18
    11f8:	58 d2       	rcall	.+1200   	; 0x16aa <__subsf3>
    11fa:	a7 01       	movw	r20, r14
    11fc:	96 01       	movw	r18, r12
    11fe:	c9 d2       	rcall	.+1426   	; 0x1792 <atan2>
    1200:	6b 01       	movw	r12, r22
    1202:	7c 01       	movw	r14, r24
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	a9 01       	movw	r20, r18
    120a:	29 d3       	rcall	.+1618   	; 0x185e <__cmpsf2>
    120c:	87 ff       	sbrs	r24, 7
    120e:	09 c0       	rjmp	.+18     	; 0x1222 <_Z14processCommandv+0x5ec>
    1210:	2b ed       	ldi	r18, 0xDB	; 219
    1212:	3f e0       	ldi	r19, 0x0F	; 15
    1214:	49 ec       	ldi	r20, 0xC9	; 201
    1216:	50 e4       	ldi	r21, 0x40	; 64
    1218:	c7 01       	movw	r24, r14
    121a:	b6 01       	movw	r22, r12
    121c:	47 d2       	rcall	.+1166   	; 0x16ac <__addsf3>
    121e:	6b 01       	movw	r12, r22
    1220:	7c 01       	movw	r14, r24
    1222:	a3 01       	movw	r20, r6
    1224:	92 01       	movw	r18, r4
    1226:	c7 01       	movw	r24, r14
    1228:	b6 01       	movw	r22, r12
    122a:	3f d2       	rcall	.+1150   	; 0x16aa <__subsf3>
    122c:	4b 01       	movw	r8, r22
    122e:	5c 01       	movw	r10, r24
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	a9 01       	movw	r20, r18
    1236:	69 81       	ldd	r22, Y+1	; 0x01
    1238:	7a 81       	ldd	r23, Y+2	; 0x02
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	ff d4       	rcall	.+2558   	; 0x1c3e <__gesf2>
    1240:	18 16       	cp	r1, r24
    1242:	94 f4       	brge	.+36     	; 0x1268 <_Z14processCommandv+0x632>
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	a9 01       	movw	r20, r18
    124a:	c5 01       	movw	r24, r10
    124c:	b4 01       	movw	r22, r8
    124e:	07 d3       	rcall	.+1550   	; 0x185e <__cmpsf2>
    1250:	87 ff       	sbrs	r24, 7
    1252:	0a c0       	rjmp	.+20     	; 0x1268 <_Z14processCommandv+0x632>
    1254:	2b ed       	ldi	r18, 0xDB	; 219
    1256:	3f e0       	ldi	r19, 0x0F	; 15
    1258:	49 ec       	ldi	r20, 0xC9	; 201
    125a:	50 e4       	ldi	r21, 0x40	; 64
    125c:	c7 01       	movw	r24, r14
    125e:	b6 01       	movw	r22, r12
    1260:	25 d2       	rcall	.+1098   	; 0x16ac <__addsf3>
    1262:	6b 01       	movw	r12, r22
    1264:	7c 01       	movw	r14, r24
    1266:	1b c0       	rjmp	.+54     	; 0x129e <_Z14processCommandv+0x668>
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	a9 01       	movw	r20, r18
    126e:	69 81       	ldd	r22, Y+1	; 0x01
    1270:	7a 81       	ldd	r23, Y+2	; 0x02
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	f3 d2       	rcall	.+1510   	; 0x185e <__cmpsf2>
    1278:	87 ff       	sbrs	r24, 7
    127a:	11 c0       	rjmp	.+34     	; 0x129e <_Z14processCommandv+0x668>
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	a9 01       	movw	r20, r18
    1282:	c5 01       	movw	r24, r10
    1284:	b4 01       	movw	r22, r8
    1286:	db d4       	rcall	.+2486   	; 0x1c3e <__gesf2>
    1288:	18 16       	cp	r1, r24
    128a:	4c f4       	brge	.+18     	; 0x129e <_Z14processCommandv+0x668>
    128c:	2b ed       	ldi	r18, 0xDB	; 219
    128e:	3f e0       	ldi	r19, 0x0F	; 15
    1290:	49 ec       	ldi	r20, 0xC9	; 201
    1292:	50 e4       	ldi	r21, 0x40	; 64
    1294:	c3 01       	movw	r24, r6
    1296:	b2 01       	movw	r22, r4
    1298:	09 d2       	rcall	.+1042   	; 0x16ac <__addsf3>
    129a:	2b 01       	movw	r4, r22
    129c:	3c 01       	movw	r6, r24
    129e:	a3 01       	movw	r20, r6
    12a0:	92 01       	movw	r18, r4
    12a2:	c7 01       	movw	r24, r14
    12a4:	b6 01       	movw	r22, r12
    12a6:	01 d2       	rcall	.+1026   	; 0x16aa <__subsf3>
    12a8:	69 83       	std	Y+1, r22	; 0x01
    12aa:	7a 83       	std	Y+2, r23	; 0x02
    12ac:	8b 83       	std	Y+3, r24	; 0x03
    12ae:	9c 83       	std	Y+4, r25	; 0x04
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	a9 01       	movw	r20, r18
    12b6:	c3 d4       	rcall	.+2438   	; 0x1c3e <__gesf2>
    12b8:	29 81       	ldd	r18, Y+1	; 0x01
    12ba:	3a 81       	ldd	r19, Y+2	; 0x02
    12bc:	4b 81       	ldd	r20, Y+3	; 0x03
    12be:	5c 81       	ldd	r21, Y+4	; 0x04
    12c0:	18 16       	cp	r1, r24
    12c2:	0c f0       	brlt	.+2      	; 0x12c6 <_Z14processCommandv+0x690>
    12c4:	50 58       	subi	r21, 0x80	; 128
    12c6:	69 89       	ldd	r22, Y+17	; 0x11
    12c8:	7a 89       	ldd	r23, Y+18	; 0x12
    12ca:	8b 89       	ldd	r24, Y+19	; 0x13
    12cc:	9c 89       	ldd	r25, Y+20	; 0x14
    12ce:	c2 d4       	rcall	.+2436   	; 0x1c54 <__mulsf3>
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e2       	ldi	r20, 0x20	; 32
    12d6:	51 e4       	ldi	r21, 0x41	; 65
    12d8:	bd d4       	rcall	.+2426   	; 0x1c54 <__mulsf3>
    12da:	ae d2       	rcall	.+1372   	; 0x1838 <ceil>
    12dc:	2f d3       	rcall	.+1630   	; 0x193c <__fixsfsi>
    12de:	1b 01       	movw	r2, r22
    12e0:	1a a6       	std	Y+42, r1	; 0x2a
    12e2:	19 a6       	std	Y+41, r1	; 0x29
    12e4:	cb 01       	movw	r24, r22
    12e6:	77 0f       	add	r23, r23
    12e8:	aa 0b       	sbc	r26, r26
    12ea:	bb 0b       	sbc	r27, r27
    12ec:	8d a3       	std	Y+37, r24	; 0x25
    12ee:	9e a3       	std	Y+38, r25	; 0x26
    12f0:	af a3       	std	Y+39, r26	; 0x27
    12f2:	b8 a7       	std	Y+40, r27	; 0x28
    12f4:	a0 90 66 02 	lds	r10, 0x0266	; 0x800266 <pe>
    12f8:	b0 90 67 02 	lds	r11, 0x0267	; 0x800267 <pe+0x1>
    12fc:	c0 90 68 02 	lds	r12, 0x0268	; 0x800268 <pe+0x2>
    1300:	d0 90 69 02 	lds	r13, 0x0269	; 0x800269 <pe+0x3>
    1304:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <pz>
    1308:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <pz+0x1>
    130c:	a0 91 6c 02 	lds	r26, 0x026C	; 0x80026c <pz+0x2>
    1310:	b0 91 6d 02 	lds	r27, 0x026D	; 0x80026d <pz+0x3>
    1314:	8d 8f       	std	Y+29, r24	; 0x1d
    1316:	9e 8f       	std	Y+30, r25	; 0x1e
    1318:	af 8f       	std	Y+31, r26	; 0x1f
    131a:	b8 a3       	std	Y+32, r27	; 0x20
    131c:	a9 a5       	ldd	r26, Y+41	; 0x29
    131e:	ba a5       	ldd	r27, Y+42	; 0x2a
    1320:	a2 15       	cp	r26, r2
    1322:	b3 05       	cpc	r27, r3
    1324:	0c f0       	brlt	.+2      	; 0x1328 <_Z14processCommandv+0x6f2>
    1326:	59 c0       	rjmp	.+178    	; 0x13da <_Z14processCommandv+0x7a4>
    1328:	bd 01       	movw	r22, r26
    132a:	bb 0f       	add	r27, r27
    132c:	88 0b       	sbc	r24, r24
    132e:	99 0b       	sbc	r25, r25
    1330:	38 d3       	rcall	.+1648   	; 0x19a2 <__floatsisf>
    1332:	6d 83       	std	Y+5, r22	; 0x05
    1334:	7e 83       	std	Y+6, r23	; 0x06
    1336:	8f 83       	std	Y+7, r24	; 0x07
    1338:	98 87       	std	Y+8, r25	; 0x08
    133a:	6d a1       	ldd	r22, Y+37	; 0x25
    133c:	7e a1       	ldd	r23, Y+38	; 0x26
    133e:	8f a1       	ldd	r24, Y+39	; 0x27
    1340:	98 a5       	ldd	r25, Y+40	; 0x28
    1342:	2f d3       	rcall	.+1630   	; 0x19a2 <__floatsisf>
    1344:	9b 01       	movw	r18, r22
    1346:	ac 01       	movw	r20, r24
    1348:	6d 81       	ldd	r22, Y+5	; 0x05
    134a:	7e 81       	ldd	r23, Y+6	; 0x06
    134c:	8f 81       	ldd	r24, Y+7	; 0x07
    134e:	98 85       	ldd	r25, Y+8	; 0x08
    1350:	8d d2       	rcall	.+1306   	; 0x186c <__divsf3>
    1352:	29 81       	ldd	r18, Y+1	; 0x01
    1354:	3a 81       	ldd	r19, Y+2	; 0x02
    1356:	4b 81       	ldd	r20, Y+3	; 0x03
    1358:	5c 81       	ldd	r21, Y+4	; 0x04
    135a:	7c d4       	rcall	.+2296   	; 0x1c54 <__mulsf3>
    135c:	a3 01       	movw	r20, r6
    135e:	92 01       	movw	r18, r4
    1360:	a5 d1       	rcall	.+842    	; 0x16ac <__addsf3>
    1362:	6d 83       	std	Y+5, r22	; 0x05
    1364:	7e 83       	std	Y+6, r23	; 0x06
    1366:	8f 83       	std	Y+7, r24	; 0x07
    1368:	98 87       	std	Y+8, r25	; 0x08
    136a:	7d d2       	rcall	.+1274   	; 0x1866 <cos>
    136c:	69 a3       	std	Y+33, r22	; 0x21
    136e:	7a a3       	std	Y+34, r23	; 0x22
    1370:	8b a3       	std	Y+35, r24	; 0x23
    1372:	9c a3       	std	Y+36, r25	; 0x24
    1374:	6d 81       	ldd	r22, Y+5	; 0x05
    1376:	7e 81       	ldd	r23, Y+6	; 0x06
    1378:	8f 81       	ldd	r24, Y+7	; 0x07
    137a:	98 85       	ldd	r25, Y+8	; 0x08
    137c:	ce d4       	rcall	.+2460   	; 0x1d1a <sin>
    137e:	9b 01       	movw	r18, r22
    1380:	ac 01       	movw	r20, r24
    1382:	69 89       	ldd	r22, Y+17	; 0x11
    1384:	7a 89       	ldd	r23, Y+18	; 0x12
    1386:	8b 89       	ldd	r24, Y+19	; 0x13
    1388:	9c 89       	ldd	r25, Y+20	; 0x14
    138a:	64 d4       	rcall	.+2248   	; 0x1c54 <__mulsf3>
    138c:	29 85       	ldd	r18, Y+9	; 0x09
    138e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1390:	4b 85       	ldd	r20, Y+11	; 0x0b
    1392:	5c 85       	ldd	r21, Y+12	; 0x0c
    1394:	8b d1       	rcall	.+790    	; 0x16ac <__addsf3>
    1396:	6d 83       	std	Y+5, r22	; 0x05
    1398:	7e 83       	std	Y+6, r23	; 0x06
    139a:	8f 83       	std	Y+7, r24	; 0x07
    139c:	98 87       	std	Y+8, r25	; 0x08
    139e:	29 a1       	ldd	r18, Y+33	; 0x21
    13a0:	3a a1       	ldd	r19, Y+34	; 0x22
    13a2:	4b a1       	ldd	r20, Y+35	; 0x23
    13a4:	5c a1       	ldd	r21, Y+36	; 0x24
    13a6:	69 89       	ldd	r22, Y+17	; 0x11
    13a8:	7a 89       	ldd	r23, Y+18	; 0x12
    13aa:	8b 89       	ldd	r24, Y+19	; 0x13
    13ac:	9c 89       	ldd	r25, Y+20	; 0x14
    13ae:	52 d4       	rcall	.+2212   	; 0x1c54 <__mulsf3>
    13b0:	2d 85       	ldd	r18, Y+13	; 0x0d
    13b2:	3e 85       	ldd	r19, Y+14	; 0x0e
    13b4:	4f 85       	ldd	r20, Y+15	; 0x0f
    13b6:	58 89       	ldd	r21, Y+16	; 0x10
    13b8:	79 d1       	rcall	.+754    	; 0x16ac <__addsf3>
    13ba:	ed 8c       	ldd	r14, Y+29	; 0x1d
    13bc:	fe 8c       	ldd	r15, Y+30	; 0x1e
    13be:	0f 8d       	ldd	r16, Y+31	; 0x1f
    13c0:	18 a1       	ldd	r17, Y+32	; 0x20
    13c2:	2d 81       	ldd	r18, Y+5	; 0x05
    13c4:	3e 81       	ldd	r19, Y+6	; 0x06
    13c6:	4f 81       	ldd	r20, Y+7	; 0x07
    13c8:	58 85       	ldd	r21, Y+8	; 0x08
    13ca:	a2 d9       	rcall	.-3260   	; 0x710 <_Z4lineffff>
    13cc:	29 a5       	ldd	r18, Y+41	; 0x29
    13ce:	3a a5       	ldd	r19, Y+42	; 0x2a
    13d0:	2f 5f       	subi	r18, 0xFF	; 255
    13d2:	3f 4f       	sbci	r19, 0xFF	; 255
    13d4:	3a a7       	std	Y+42, r19	; 0x2a
    13d6:	29 a7       	std	Y+41, r18	; 0x29
    13d8:	8d cf       	rjmp	.-230    	; 0x12f4 <_Z14processCommandv+0x6be>
    13da:	ed 8c       	ldd	r14, Y+29	; 0x1d
    13dc:	fe 8c       	ldd	r15, Y+30	; 0x1e
    13de:	0f 8d       	ldd	r16, Y+31	; 0x1f
    13e0:	18 a1       	ldd	r17, Y+32	; 0x20
    13e2:	2d 89       	ldd	r18, Y+21	; 0x15
    13e4:	3e 89       	ldd	r19, Y+22	; 0x16
    13e6:	4f 89       	ldd	r20, Y+23	; 0x17
    13e8:	58 8d       	ldd	r21, Y+24	; 0x18
    13ea:	69 8d       	ldd	r22, Y+25	; 0x19
    13ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13f2:	8e d9       	rcall	.-3300   	; 0x710 <_Z4lineffff>
    13f4:	06 c0       	rjmp	.+12     	; 0x1402 <_Z14processCommandv+0x7cc>
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <_Z14processCommandv+0x7cc>
    13fe:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
    1402:	40 e0       	ldi	r20, 0x00	; 0
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	60 e8       	ldi	r22, 0x80	; 128
    1408:	7f eb       	ldi	r23, 0xBF	; 191
    140a:	8d e4       	ldi	r24, 0x4D	; 77
    140c:	d5 d8       	rcall	.-3670   	; 0x5b8 <_Z11parseNumbercf>
    140e:	96 d2       	rcall	.+1324   	; 0x193c <__fixsfsi>
    1410:	64 36       	cpi	r22, 0x64	; 100
    1412:	71 05       	cpc	r23, r1
    1414:	81 05       	cpc	r24, r1
    1416:	91 05       	cpc	r25, r1
    1418:	f1 f0       	breq	.+60     	; 0x1456 <_Z14processCommandv+0x820>
    141a:	62 37       	cpi	r22, 0x72	; 114
    141c:	71 05       	cpc	r23, r1
    141e:	81 05       	cpc	r24, r1
    1420:	91 05       	cpc	r25, r1
    1422:	91 f5       	brne	.+100    	; 0x1488 <_Z14processCommandv+0x852>
    1424:	aa 96       	adiw	r28, 0x2a	; 42
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	ff 90       	pop	r15
    143a:	ef 90       	pop	r14
    143c:	df 90       	pop	r13
    143e:	cf 90       	pop	r12
    1440:	bf 90       	pop	r11
    1442:	af 90       	pop	r10
    1444:	9f 90       	pop	r9
    1446:	8f 90       	pop	r8
    1448:	7f 90       	pop	r7
    144a:	6f 90       	pop	r6
    144c:	5f 90       	pop	r5
    144e:	4f 90       	pop	r4
    1450:	3f 90       	pop	r3
    1452:	2f 90       	pop	r2
    1454:	19 c9       	rjmp	.-3534   	; 0x688 <_Z5wherev>
    1456:	aa 96       	adiw	r28, 0x2a	; 42
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	ff 90       	pop	r15
    146c:	ef 90       	pop	r14
    146e:	df 90       	pop	r13
    1470:	cf 90       	pop	r12
    1472:	bf 90       	pop	r11
    1474:	af 90       	pop	r10
    1476:	9f 90       	pop	r9
    1478:	8f 90       	pop	r8
    147a:	7f 90       	pop	r7
    147c:	6f 90       	pop	r6
    147e:	5f 90       	pop	r5
    1480:	4f 90       	pop	r4
    1482:	3f 90       	pop	r3
    1484:	2f 90       	pop	r2
    1486:	8d cb       	rjmp	.-2278   	; 0xba2 <_Z4helpv>
    1488:	aa 96       	adiw	r28, 0x2a	; 42
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	1f 91       	pop	r17
    149a:	0f 91       	pop	r16
    149c:	ff 90       	pop	r15
    149e:	ef 90       	pop	r14
    14a0:	df 90       	pop	r13
    14a2:	cf 90       	pop	r12
    14a4:	bf 90       	pop	r11
    14a6:	af 90       	pop	r10
    14a8:	9f 90       	pop	r9
    14aa:	8f 90       	pop	r8
    14ac:	7f 90       	pop	r7
    14ae:	6f 90       	pop	r6
    14b0:	5f 90       	pop	r5
    14b2:	4f 90       	pop	r4
    14b4:	3f 90       	pop	r3
    14b6:	2f 90       	pop	r2
    14b8:	08 95       	ret

000014ba <_Z5readyv>:
    14ba:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <sofar+0x1>
    14be:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <sofar>
    14c2:	62 e9       	ldi	r22, 0x92	; 146
    14c4:	71 e0       	ldi	r23, 0x01	; 1
    14c6:	80 e1       	ldi	r24, 0x10	; 16
    14c8:	93 e0       	ldi	r25, 0x03	; 3
    14ca:	d4 c6       	rjmp	.+3496   	; 0x2274 <_ZN5Print5printEPK19__FlashStringHelper>

000014cc <_Z11motor_setupv>:
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	86 e3       	ldi	r24, 0x36	; 54
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <motors+0x1>
    14d8:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <motors>
    14dc:	87 e3       	ldi	r24, 0x37	; 55
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <motors+0x3>
    14e4:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <motors+0x2>
    14e8:	86 e2       	ldi	r24, 0x26	; 38
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <motors+0x5>
    14f0:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <motors+0x4>
    14f4:	83 e0       	ldi	r24, 0x03	; 3
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <motors+0x7>
    14fc:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <motors+0x6>
    1500:	8c e3       	ldi	r24, 0x3C	; 60
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <motors+0x9>
    1508:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <motors+0x8>
    150c:	8d e3       	ldi	r24, 0x3D	; 61
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <motors+0xb>
    1514:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <motors+0xa>
    1518:	88 e3       	ldi	r24, 0x38	; 56
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <motors+0xd>
    1520:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <motors+0xc>
    1524:	8e e0       	ldi	r24, 0x0E	; 14
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <motors+0xf>
    152c:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <motors+0xe>
    1530:	8e e2       	ldi	r24, 0x2E	; 46
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <motors+0x11>
    1538:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <motors+0x10>
    153c:	80 e3       	ldi	r24, 0x30	; 48
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <motors+0x13>
    1544:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <motors+0x12>
    1548:	8e e3       	ldi	r24, 0x3E	; 62
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <motors+0x15>
    1550:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <motors+0x14>
    1554:	82 e1       	ldi	r24, 0x12	; 18
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <motors+0x17>
    155c:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <motors+0x16>
    1560:	8a e1       	ldi	r24, 0x1A	; 26
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <motors+0x19>
    1568:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <motors+0x18>
    156c:	8c e1       	ldi	r24, 0x1C	; 28
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <motors+0x1b>
    1574:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <motors+0x1a>
    1578:	88 e1       	ldi	r24, 0x18	; 24
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <motors+0x1d>
    1580:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <motors+0x1c>
    1584:	82 e2       	ldi	r24, 0x22	; 34
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <motors+0x1f>
    158c:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <motors+0x1e>
    1590:	c0 ec       	ldi	r28, 0xC0	; 192
    1592:	d2 e0       	ldi	r29, 0x02	; 2
    1594:	61 e0       	ldi	r22, 0x01	; 1
    1596:	88 81       	ld	r24, Y
    1598:	0e 94 8d 14 	call	0x291a	; 0x291a <pinMode>
    159c:	61 e0       	ldi	r22, 0x01	; 1
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	0e 94 8d 14 	call	0x291a	; 0x291a <pinMode>
    15a4:	61 e0       	ldi	r22, 0x01	; 1
    15a6:	8c 81       	ldd	r24, Y+4	; 0x04
    15a8:	0e 94 8d 14 	call	0x291a	; 0x291a <pinMode>
    15ac:	28 96       	adiw	r28, 0x08	; 8
    15ae:	82 e0       	ldi	r24, 0x02	; 2
    15b0:	c0 3e       	cpi	r28, 0xE0	; 224
    15b2:	d8 07       	cpc	r29, r24
    15b4:	79 f7       	brne	.-34     	; 0x1594 <_Z11motor_setupv+0xc8>
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	08 95       	ret

000015bc <_Z12motor_enablev>:
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	c0 ec       	ldi	r28, 0xC0	; 192
    15c2:	d2 e0       	ldi	r29, 0x02	; 2
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	8c 81       	ldd	r24, Y+4	; 0x04
    15c8:	0e 94 c9 14 	call	0x2992	; 0x2992 <digitalWrite>
    15cc:	28 96       	adiw	r28, 0x08	; 8
    15ce:	82 e0       	ldi	r24, 0x02	; 2
    15d0:	c0 3e       	cpi	r28, 0xE0	; 224
    15d2:	d8 07       	cpc	r29, r24
    15d4:	b9 f7       	brne	.-18     	; 0x15c4 <_Z12motor_enablev+0x8>
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	08 95       	ret

000015dc <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    15dc:	26 e0       	ldi	r18, 0x06	; 6
    15de:	40 e0       	ldi	r20, 0x00	; 0
    15e0:	51 ee       	ldi	r21, 0xE1	; 225
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	80 e1       	ldi	r24, 0x10	; 16
    15e8:	93 e0       	ldi	r25, 0x03	; 3
    15ea:	02 d5       	rcall	.+2564   	; 0x1ff0 <_ZN14HardwareSerial5beginEmh>
 * First thing this machine does on startup.  Runs only once.
 */
void setup() {
  Serial.begin(BAUD);  // open coms

  motor_setup();
    15ec:	6f df       	rcall	.-290    	; 0x14cc <_Z11motor_setupv>
  motor_enable();
    15ee:	e6 df       	rcall	.-52     	; 0x15bc <_Z12motor_enablev>
  
  
  where();  // for debugging purposes
    15f0:	4b d8       	rcall	.-3946   	; 0x688 <_Z5wherev>
    15f2:	d7 da       	rcall	.-2642   	; 0xba2 <_Z4helpv>
  help();  // say hello
    15f4:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <px>
 * @input npx new position x
 * @input npy new position y
 */
void position(float npx,float npy,float npz,float npe) {
  // here is a good place to add sanity tests
  px=npx;
    15f8:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <px+0x1>
    15fc:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <px+0x2>
    1600:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <px+0x3>
    1604:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <py>
  py=npy;
    1608:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <py+0x1>
    160c:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <py+0x2>
    1610:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <py+0x3>
    1614:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <pz>
  pz=npz;
    1618:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <pz+0x1>
    161c:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <pz+0x2>
    1620:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <pz+0x3>
    1624:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <pe>
  pe=npe;
    1628:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <pe+0x1>
    162c:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <pe+0x2>
    1630:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <pe+0x3>
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	70 e0       	ldi	r23, 0x00	; 0
  
  
  where();  // for debugging purposes
  help();  // say hello
  position(0,0,0,0);  // set starting position
  feedrate(1000);  // set default speed
    1638:	8a e7       	ldi	r24, 0x7A	; 122
    163a:	94 e4       	ldi	r25, 0x44	; 68
    163c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z8feedratef>
    1640:	3c cf       	rjmp	.-392    	; 0x14ba <_Z5readyv>

00001642 <loop>:
  ready();
    1642:	cf 93       	push	r28
    1644:	80 e1       	ldi	r24, 0x10	; 16
/**
 * After setup() this machine will repeat loop() forever.
 */
void loop() {
  // listen for serial commands
  while(Serial.available() > 0) {  // if something is available
    1646:	93 e0       	ldi	r25, 0x03	; 3
    1648:	cb d3       	rcall	.+1942   	; 0x1de0 <_ZN14HardwareSerial9availableEv>
    164a:	18 16       	cp	r1, r24
    164c:	19 06       	cpc	r1, r25
    164e:	5c f5       	brge	.+86     	; 0x16a6 <loop+0x64>
    char c=Serial.read();  // get it
    1650:	80 e1       	ldi	r24, 0x10	; 16
    1652:	93 e0       	ldi	r25, 0x03	; 3
    1654:	df d3       	rcall	.+1982   	; 0x1e14 <_ZN14HardwareSerial4readEv>
    1656:	c8 2f       	mov	r28, r24
    Serial.print(c);  // repeat it back so I know you got the message
    1658:	68 2f       	mov	r22, r24
    165a:	80 e1       	ldi	r24, 0x10	; 16
    165c:	93 e0       	ldi	r25, 0x03	; 3
    165e:	2f d6       	rcall	.+3166   	; 0x22be <_ZN5Print5printEc>
    if(sofar<MAX_BUF-1) serialBuffer[sofar++]=c;  // store it
    1660:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <sofar>
    1664:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <sofar+0x1>
    1668:	8f 33       	cpi	r24, 0x3F	; 63
    166a:	91 05       	cpc	r25, r1
    166c:	5c f4       	brge	.+22     	; 0x1684 <loop+0x42>
    166e:	9c 01       	movw	r18, r24
    1670:	2f 5f       	subi	r18, 0xFF	; 255
    1672:	3f 4f       	sbci	r19, 0xFF	; 255
    1674:	30 93 7f 02 	sts	0x027F, r19	; 0x80027f <sofar+0x1>
    1678:	20 93 7e 02 	sts	0x027E, r18	; 0x80027e <sofar>
    167c:	fc 01       	movw	r30, r24
    167e:	e0 58       	subi	r30, 0x80	; 128
    1680:	fd 4f       	sbci	r31, 0xFD	; 253
    1682:	c0 83       	st	Z, r28
    if(c=='\n') {
    1684:	ca 30       	cpi	r28, 0x0A	; 10
    1686:	f1 f6       	brne	.-68     	; 0x1644 <loop+0x2>
      // entire message received
      serialBuffer[sofar]=0;  // end the buffer so string functions work right
    1688:	e0 91 7e 02 	lds	r30, 0x027E	; 0x80027e <sofar>
    168c:	f0 91 7f 02 	lds	r31, 0x027F	; 0x80027f <sofar+0x1>
    1690:	e0 58       	subi	r30, 0x80	; 128
    1692:	fd 4f       	sbci	r31, 0xFD	; 253
    1694:	10 82       	st	Z, r1
      Serial.print(F("\r\n"));  // echo a return character for humans
    1696:	6f e8       	ldi	r22, 0x8F	; 143
    1698:	71 e0       	ldi	r23, 0x01	; 1
    169a:	80 e1       	ldi	r24, 0x10	; 16
      processCommand();  // do something with the command
    169c:	93 e0       	ldi	r25, 0x03	; 3
    169e:	ea d5       	rcall	.+3028   	; 0x2274 <_ZN5Print5printEPK19__FlashStringHelper>
      ready();
    16a0:	ca da       	rcall	.-2668   	; 0xc36 <_Z14processCommandv>
    16a2:	0b df       	rcall	.-490    	; 0x14ba <_Z5readyv>
    16a4:	cf cf       	rjmp	.-98     	; 0x1644 <loop+0x2>
    }
  }
}
    16a6:	cf 91       	pop	r28
    16a8:	08 95       	ret

000016aa <__subsf3>:
    16aa:	50 58       	subi	r21, 0x80	; 128

000016ac <__addsf3>:
    16ac:	bb 27       	eor	r27, r27
    16ae:	aa 27       	eor	r26, r26
    16b0:	0e d0       	rcall	.+28     	; 0x16ce <__addsf3x>
    16b2:	63 c2       	rjmp	.+1222   	; 0x1b7a <__fp_round>
    16b4:	2c d2       	rcall	.+1112   	; 0x1b0e <__fp_pscA>
    16b6:	30 f0       	brcs	.+12     	; 0x16c4 <__addsf3+0x18>
    16b8:	31 d2       	rcall	.+1122   	; 0x1b1c <__fp_pscB>
    16ba:	20 f0       	brcs	.+8      	; 0x16c4 <__addsf3+0x18>
    16bc:	31 f4       	brne	.+12     	; 0x16ca <__addsf3+0x1e>
    16be:	9f 3f       	cpi	r25, 0xFF	; 255
    16c0:	11 f4       	brne	.+4      	; 0x16c6 <__addsf3+0x1a>
    16c2:	1e f4       	brtc	.+6      	; 0x16ca <__addsf3+0x1e>
    16c4:	fc c1       	rjmp	.+1016   	; 0x1abe <__fp_nan>
    16c6:	0e f4       	brtc	.+2      	; 0x16ca <__addsf3+0x1e>
    16c8:	e0 95       	com	r30
    16ca:	e7 fb       	bst	r30, 7
    16cc:	c9 c1       	rjmp	.+914    	; 0x1a60 <__fp_inf>

000016ce <__addsf3x>:
    16ce:	e9 2f       	mov	r30, r25
    16d0:	76 d2       	rcall	.+1260   	; 0x1bbe <__fp_split3>
    16d2:	80 f3       	brcs	.-32     	; 0x16b4 <__addsf3+0x8>
    16d4:	ba 17       	cp	r27, r26
    16d6:	62 07       	cpc	r22, r18
    16d8:	73 07       	cpc	r23, r19
    16da:	84 07       	cpc	r24, r20
    16dc:	95 07       	cpc	r25, r21
    16de:	18 f0       	brcs	.+6      	; 0x16e6 <__addsf3x+0x18>
    16e0:	71 f4       	brne	.+28     	; 0x16fe <__addsf3x+0x30>
    16e2:	9e f5       	brtc	.+102    	; 0x174a <__addsf3x+0x7c>
    16e4:	a5 c2       	rjmp	.+1354   	; 0x1c30 <__fp_zero>
    16e6:	0e f4       	brtc	.+2      	; 0x16ea <__addsf3x+0x1c>
    16e8:	e0 95       	com	r30
    16ea:	0b 2e       	mov	r0, r27
    16ec:	ba 2f       	mov	r27, r26
    16ee:	a0 2d       	mov	r26, r0
    16f0:	0b 01       	movw	r0, r22
    16f2:	b9 01       	movw	r22, r18
    16f4:	90 01       	movw	r18, r0
    16f6:	0c 01       	movw	r0, r24
    16f8:	ca 01       	movw	r24, r20
    16fa:	a0 01       	movw	r20, r0
    16fc:	11 24       	eor	r1, r1
    16fe:	ff 27       	eor	r31, r31
    1700:	59 1b       	sub	r21, r25
    1702:	99 f0       	breq	.+38     	; 0x172a <__addsf3x+0x5c>
    1704:	59 3f       	cpi	r21, 0xF9	; 249
    1706:	50 f4       	brcc	.+20     	; 0x171c <__addsf3x+0x4e>
    1708:	50 3e       	cpi	r21, 0xE0	; 224
    170a:	68 f1       	brcs	.+90     	; 0x1766 <__addsf3x+0x98>
    170c:	1a 16       	cp	r1, r26
    170e:	f0 40       	sbci	r31, 0x00	; 0
    1710:	a2 2f       	mov	r26, r18
    1712:	23 2f       	mov	r18, r19
    1714:	34 2f       	mov	r19, r20
    1716:	44 27       	eor	r20, r20
    1718:	58 5f       	subi	r21, 0xF8	; 248
    171a:	f3 cf       	rjmp	.-26     	; 0x1702 <__addsf3x+0x34>
    171c:	46 95       	lsr	r20
    171e:	37 95       	ror	r19
    1720:	27 95       	ror	r18
    1722:	a7 95       	ror	r26
    1724:	f0 40       	sbci	r31, 0x00	; 0
    1726:	53 95       	inc	r21
    1728:	c9 f7       	brne	.-14     	; 0x171c <__addsf3x+0x4e>
    172a:	7e f4       	brtc	.+30     	; 0x174a <__addsf3x+0x7c>
    172c:	1f 16       	cp	r1, r31
    172e:	ba 0b       	sbc	r27, r26
    1730:	62 0b       	sbc	r22, r18
    1732:	73 0b       	sbc	r23, r19
    1734:	84 0b       	sbc	r24, r20
    1736:	ba f0       	brmi	.+46     	; 0x1766 <__addsf3x+0x98>
    1738:	91 50       	subi	r25, 0x01	; 1
    173a:	a1 f0       	breq	.+40     	; 0x1764 <__addsf3x+0x96>
    173c:	ff 0f       	add	r31, r31
    173e:	bb 1f       	adc	r27, r27
    1740:	66 1f       	adc	r22, r22
    1742:	77 1f       	adc	r23, r23
    1744:	88 1f       	adc	r24, r24
    1746:	c2 f7       	brpl	.-16     	; 0x1738 <__addsf3x+0x6a>
    1748:	0e c0       	rjmp	.+28     	; 0x1766 <__addsf3x+0x98>
    174a:	ba 0f       	add	r27, r26
    174c:	62 1f       	adc	r22, r18
    174e:	73 1f       	adc	r23, r19
    1750:	84 1f       	adc	r24, r20
    1752:	48 f4       	brcc	.+18     	; 0x1766 <__addsf3x+0x98>
    1754:	87 95       	ror	r24
    1756:	77 95       	ror	r23
    1758:	67 95       	ror	r22
    175a:	b7 95       	ror	r27
    175c:	f7 95       	ror	r31
    175e:	9e 3f       	cpi	r25, 0xFE	; 254
    1760:	08 f0       	brcs	.+2      	; 0x1764 <__addsf3x+0x96>
    1762:	b3 cf       	rjmp	.-154    	; 0x16ca <__addsf3+0x1e>
    1764:	93 95       	inc	r25
    1766:	88 0f       	add	r24, r24
    1768:	08 f0       	brcs	.+2      	; 0x176c <__addsf3x+0x9e>
    176a:	99 27       	eor	r25, r25
    176c:	ee 0f       	add	r30, r30
    176e:	97 95       	ror	r25
    1770:	87 95       	ror	r24
    1772:	08 95       	ret
    1774:	cc d1       	rcall	.+920    	; 0x1b0e <__fp_pscA>
    1776:	58 f0       	brcs	.+22     	; 0x178e <__addsf3x+0xc0>
    1778:	80 e8       	ldi	r24, 0x80	; 128
    177a:	91 e0       	ldi	r25, 0x01	; 1
    177c:	09 f4       	brne	.+2      	; 0x1780 <__addsf3x+0xb2>
    177e:	9e ef       	ldi	r25, 0xFE	; 254
    1780:	cd d1       	rcall	.+922    	; 0x1b1c <__fp_pscB>
    1782:	28 f0       	brcs	.+10     	; 0x178e <__addsf3x+0xc0>
    1784:	40 e8       	ldi	r20, 0x80	; 128
    1786:	51 e0       	ldi	r21, 0x01	; 1
    1788:	59 f4       	brne	.+22     	; 0x17a0 <atan2+0xe>
    178a:	5e ef       	ldi	r21, 0xFE	; 254
    178c:	09 c0       	rjmp	.+18     	; 0x17a0 <atan2+0xe>
    178e:	97 c1       	rjmp	.+814    	; 0x1abe <__fp_nan>
    1790:	4f c2       	rjmp	.+1182   	; 0x1c30 <__fp_zero>

00001792 <atan2>:
    1792:	e9 2f       	mov	r30, r25
    1794:	e0 78       	andi	r30, 0x80	; 128
    1796:	13 d2       	rcall	.+1062   	; 0x1bbe <__fp_split3>
    1798:	68 f3       	brcs	.-38     	; 0x1774 <__addsf3x+0xa6>
    179a:	09 2e       	mov	r0, r25
    179c:	05 2a       	or	r0, r21
    179e:	c1 f3       	breq	.-16     	; 0x1790 <__addsf3x+0xc2>
    17a0:	26 17       	cp	r18, r22
    17a2:	37 07       	cpc	r19, r23
    17a4:	48 07       	cpc	r20, r24
    17a6:	59 07       	cpc	r21, r25
    17a8:	38 f0       	brcs	.+14     	; 0x17b8 <atan2+0x26>
    17aa:	0e 2e       	mov	r0, r30
    17ac:	07 f8       	bld	r0, 7
    17ae:	e0 25       	eor	r30, r0
    17b0:	69 f0       	breq	.+26     	; 0x17cc <atan2+0x3a>
    17b2:	e0 25       	eor	r30, r0
    17b4:	e0 64       	ori	r30, 0x40	; 64
    17b6:	0a c0       	rjmp	.+20     	; 0x17cc <atan2+0x3a>
    17b8:	ef 63       	ori	r30, 0x3F	; 63
    17ba:	07 f8       	bld	r0, 7
    17bc:	00 94       	com	r0
    17be:	07 fa       	bst	r0, 7
    17c0:	db 01       	movw	r26, r22
    17c2:	b9 01       	movw	r22, r18
    17c4:	9d 01       	movw	r18, r26
    17c6:	dc 01       	movw	r26, r24
    17c8:	ca 01       	movw	r24, r20
    17ca:	ad 01       	movw	r20, r26
    17cc:	ef 93       	push	r30
    17ce:	5d d0       	rcall	.+186    	; 0x188a <__divsf3_pse>
    17d0:	d4 d1       	rcall	.+936    	; 0x1b7a <__fp_round>
    17d2:	0a d0       	rcall	.+20     	; 0x17e8 <atan>
    17d4:	5f 91       	pop	r21
    17d6:	55 23       	and	r21, r21
    17d8:	31 f0       	breq	.+12     	; 0x17e6 <atan2+0x54>
    17da:	2b ed       	ldi	r18, 0xDB	; 219
    17dc:	3f e0       	ldi	r19, 0x0F	; 15
    17de:	49 e4       	ldi	r20, 0x49	; 73
    17e0:	50 fd       	sbrc	r21, 0
    17e2:	49 ec       	ldi	r20, 0xC9	; 201
    17e4:	63 cf       	rjmp	.-314    	; 0x16ac <__addsf3>
    17e6:	08 95       	ret

000017e8 <atan>:
    17e8:	df 93       	push	r29
    17ea:	dd 27       	eor	r29, r29
    17ec:	b9 2f       	mov	r27, r25
    17ee:	bf 77       	andi	r27, 0x7F	; 127
    17f0:	40 e8       	ldi	r20, 0x80	; 128
    17f2:	5f e3       	ldi	r21, 0x3F	; 63
    17f4:	16 16       	cp	r1, r22
    17f6:	17 06       	cpc	r1, r23
    17f8:	48 07       	cpc	r20, r24
    17fa:	5b 07       	cpc	r21, r27
    17fc:	10 f4       	brcc	.+4      	; 0x1802 <atan+0x1a>
    17fe:	d9 2f       	mov	r29, r25
    1800:	22 d2       	rcall	.+1092   	; 0x1c46 <inverse>
    1802:	9f 93       	push	r25
    1804:	8f 93       	push	r24
    1806:	7f 93       	push	r23
    1808:	6f 93       	push	r22
    180a:	cf d2       	rcall	.+1438   	; 0x1daa <square>
    180c:	e4 ee       	ldi	r30, 0xE4	; 228
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	59 d1       	rcall	.+690    	; 0x1ac4 <__fp_powser>
    1812:	b3 d1       	rcall	.+870    	; 0x1b7a <__fp_round>
    1814:	2f 91       	pop	r18
    1816:	3f 91       	pop	r19
    1818:	4f 91       	pop	r20
    181a:	5f 91       	pop	r21
    181c:	27 d2       	rcall	.+1102   	; 0x1c6c <__mulsf3x>
    181e:	dd 23       	and	r29, r29
    1820:	49 f0       	breq	.+18     	; 0x1834 <atan+0x4c>
    1822:	90 58       	subi	r25, 0x80	; 128
    1824:	a2 ea       	ldi	r26, 0xA2	; 162
    1826:	2a ed       	ldi	r18, 0xDA	; 218
    1828:	3f e0       	ldi	r19, 0x0F	; 15
    182a:	49 ec       	ldi	r20, 0xC9	; 201
    182c:	5f e3       	ldi	r21, 0x3F	; 63
    182e:	d0 78       	andi	r29, 0x80	; 128
    1830:	5d 27       	eor	r21, r29
    1832:	4d df       	rcall	.-358    	; 0x16ce <__addsf3x>
    1834:	df 91       	pop	r29
    1836:	a1 c1       	rjmp	.+834    	; 0x1b7a <__fp_round>

00001838 <ceil>:
    1838:	e4 d1       	rcall	.+968    	; 0x1c02 <__fp_trunc>
    183a:	80 f0       	brcs	.+32     	; 0x185c <ceil+0x24>
    183c:	9f 37       	cpi	r25, 0x7F	; 127
    183e:	40 f4       	brcc	.+16     	; 0x1850 <ceil+0x18>
    1840:	91 11       	cpse	r25, r1
    1842:	0e f4       	brtc	.+2      	; 0x1846 <ceil+0xe>
    1844:	f6 c1       	rjmp	.+1004   	; 0x1c32 <__fp_szero>
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	80 e8       	ldi	r24, 0x80	; 128
    184c:	9f e3       	ldi	r25, 0x3F	; 63
    184e:	08 95       	ret
    1850:	26 f0       	brts	.+8      	; 0x185a <ceil+0x22>
    1852:	1b 16       	cp	r1, r27
    1854:	61 1d       	adc	r22, r1
    1856:	71 1d       	adc	r23, r1
    1858:	81 1d       	adc	r24, r1
    185a:	08 c1       	rjmp	.+528    	; 0x1a6c <__fp_mintl>
    185c:	22 c1       	rjmp	.+580    	; 0x1aa2 <__fp_mpack>

0000185e <__cmpsf2>:
    185e:	dc d0       	rcall	.+440    	; 0x1a18 <__fp_cmp>
    1860:	08 f4       	brcc	.+2      	; 0x1864 <__cmpsf2+0x6>
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	08 95       	ret

00001866 <cos>:
    1866:	62 d1       	rcall	.+708    	; 0x1b2c <__fp_rempio2>
    1868:	e3 95       	inc	r30
    186a:	98 c1       	rjmp	.+816    	; 0x1b9c <__fp_sinus>

0000186c <__divsf3>:
    186c:	0c d0       	rcall	.+24     	; 0x1886 <__divsf3x>
    186e:	85 c1       	rjmp	.+778    	; 0x1b7a <__fp_round>
    1870:	55 d1       	rcall	.+682    	; 0x1b1c <__fp_pscB>
    1872:	40 f0       	brcs	.+16     	; 0x1884 <__divsf3+0x18>
    1874:	4c d1       	rcall	.+664    	; 0x1b0e <__fp_pscA>
    1876:	30 f0       	brcs	.+12     	; 0x1884 <__divsf3+0x18>
    1878:	21 f4       	brne	.+8      	; 0x1882 <__divsf3+0x16>
    187a:	5f 3f       	cpi	r21, 0xFF	; 255
    187c:	19 f0       	breq	.+6      	; 0x1884 <__divsf3+0x18>
    187e:	f0 c0       	rjmp	.+480    	; 0x1a60 <__fp_inf>
    1880:	51 11       	cpse	r21, r1
    1882:	d7 c1       	rjmp	.+942    	; 0x1c32 <__fp_szero>
    1884:	1c c1       	rjmp	.+568    	; 0x1abe <__fp_nan>

00001886 <__divsf3x>:
    1886:	9b d1       	rcall	.+822    	; 0x1bbe <__fp_split3>
    1888:	98 f3       	brcs	.-26     	; 0x1870 <__divsf3+0x4>

0000188a <__divsf3_pse>:
    188a:	99 23       	and	r25, r25
    188c:	c9 f3       	breq	.-14     	; 0x1880 <__divsf3+0x14>
    188e:	55 23       	and	r21, r21
    1890:	b1 f3       	breq	.-20     	; 0x187e <__divsf3+0x12>
    1892:	95 1b       	sub	r25, r21
    1894:	55 0b       	sbc	r21, r21
    1896:	bb 27       	eor	r27, r27
    1898:	aa 27       	eor	r26, r26
    189a:	62 17       	cp	r22, r18
    189c:	73 07       	cpc	r23, r19
    189e:	84 07       	cpc	r24, r20
    18a0:	38 f0       	brcs	.+14     	; 0x18b0 <__divsf3_pse+0x26>
    18a2:	9f 5f       	subi	r25, 0xFF	; 255
    18a4:	5f 4f       	sbci	r21, 0xFF	; 255
    18a6:	22 0f       	add	r18, r18
    18a8:	33 1f       	adc	r19, r19
    18aa:	44 1f       	adc	r20, r20
    18ac:	aa 1f       	adc	r26, r26
    18ae:	a9 f3       	breq	.-22     	; 0x189a <__divsf3_pse+0x10>
    18b0:	33 d0       	rcall	.+102    	; 0x1918 <__divsf3_pse+0x8e>
    18b2:	0e 2e       	mov	r0, r30
    18b4:	3a f0       	brmi	.+14     	; 0x18c4 <__divsf3_pse+0x3a>
    18b6:	e0 e8       	ldi	r30, 0x80	; 128
    18b8:	30 d0       	rcall	.+96     	; 0x191a <__divsf3_pse+0x90>
    18ba:	91 50       	subi	r25, 0x01	; 1
    18bc:	50 40       	sbci	r21, 0x00	; 0
    18be:	e6 95       	lsr	r30
    18c0:	00 1c       	adc	r0, r0
    18c2:	ca f7       	brpl	.-14     	; 0x18b6 <__divsf3_pse+0x2c>
    18c4:	29 d0       	rcall	.+82     	; 0x1918 <__divsf3_pse+0x8e>
    18c6:	fe 2f       	mov	r31, r30
    18c8:	27 d0       	rcall	.+78     	; 0x1918 <__divsf3_pse+0x8e>
    18ca:	66 0f       	add	r22, r22
    18cc:	77 1f       	adc	r23, r23
    18ce:	88 1f       	adc	r24, r24
    18d0:	bb 1f       	adc	r27, r27
    18d2:	26 17       	cp	r18, r22
    18d4:	37 07       	cpc	r19, r23
    18d6:	48 07       	cpc	r20, r24
    18d8:	ab 07       	cpc	r26, r27
    18da:	b0 e8       	ldi	r27, 0x80	; 128
    18dc:	09 f0       	breq	.+2      	; 0x18e0 <__divsf3_pse+0x56>
    18de:	bb 0b       	sbc	r27, r27
    18e0:	80 2d       	mov	r24, r0
    18e2:	bf 01       	movw	r22, r30
    18e4:	ff 27       	eor	r31, r31
    18e6:	93 58       	subi	r25, 0x83	; 131
    18e8:	5f 4f       	sbci	r21, 0xFF	; 255
    18ea:	2a f0       	brmi	.+10     	; 0x18f6 <__divsf3_pse+0x6c>
    18ec:	9e 3f       	cpi	r25, 0xFE	; 254
    18ee:	51 05       	cpc	r21, r1
    18f0:	68 f0       	brcs	.+26     	; 0x190c <__divsf3_pse+0x82>
    18f2:	b6 c0       	rjmp	.+364    	; 0x1a60 <__fp_inf>
    18f4:	9e c1       	rjmp	.+828    	; 0x1c32 <__fp_szero>
    18f6:	5f 3f       	cpi	r21, 0xFF	; 255
    18f8:	ec f3       	brlt	.-6      	; 0x18f4 <__divsf3_pse+0x6a>
    18fa:	98 3e       	cpi	r25, 0xE8	; 232
    18fc:	dc f3       	brlt	.-10     	; 0x18f4 <__divsf3_pse+0x6a>
    18fe:	86 95       	lsr	r24
    1900:	77 95       	ror	r23
    1902:	67 95       	ror	r22
    1904:	b7 95       	ror	r27
    1906:	f7 95       	ror	r31
    1908:	9f 5f       	subi	r25, 0xFF	; 255
    190a:	c9 f7       	brne	.-14     	; 0x18fe <__divsf3_pse+0x74>
    190c:	88 0f       	add	r24, r24
    190e:	91 1d       	adc	r25, r1
    1910:	96 95       	lsr	r25
    1912:	87 95       	ror	r24
    1914:	97 f9       	bld	r25, 7
    1916:	08 95       	ret
    1918:	e1 e0       	ldi	r30, 0x01	; 1
    191a:	66 0f       	add	r22, r22
    191c:	77 1f       	adc	r23, r23
    191e:	88 1f       	adc	r24, r24
    1920:	bb 1f       	adc	r27, r27
    1922:	62 17       	cp	r22, r18
    1924:	73 07       	cpc	r23, r19
    1926:	84 07       	cpc	r24, r20
    1928:	ba 07       	cpc	r27, r26
    192a:	20 f0       	brcs	.+8      	; 0x1934 <__divsf3_pse+0xaa>
    192c:	62 1b       	sub	r22, r18
    192e:	73 0b       	sbc	r23, r19
    1930:	84 0b       	sbc	r24, r20
    1932:	ba 0b       	sbc	r27, r26
    1934:	ee 1f       	adc	r30, r30
    1936:	88 f7       	brcc	.-30     	; 0x191a <__divsf3_pse+0x90>
    1938:	e0 95       	com	r30
    193a:	08 95       	ret

0000193c <__fixsfsi>:
    193c:	04 d0       	rcall	.+8      	; 0x1946 <__fixunssfsi>
    193e:	68 94       	set
    1940:	b1 11       	cpse	r27, r1
    1942:	77 c1       	rjmp	.+750    	; 0x1c32 <__fp_szero>
    1944:	08 95       	ret

00001946 <__fixunssfsi>:
    1946:	43 d1       	rcall	.+646    	; 0x1bce <__fp_splitA>
    1948:	88 f0       	brcs	.+34     	; 0x196c <__fixunssfsi+0x26>
    194a:	9f 57       	subi	r25, 0x7F	; 127
    194c:	90 f0       	brcs	.+36     	; 0x1972 <__fixunssfsi+0x2c>
    194e:	b9 2f       	mov	r27, r25
    1950:	99 27       	eor	r25, r25
    1952:	b7 51       	subi	r27, 0x17	; 23
    1954:	a0 f0       	brcs	.+40     	; 0x197e <__fixunssfsi+0x38>
    1956:	d1 f0       	breq	.+52     	; 0x198c <__fixunssfsi+0x46>
    1958:	66 0f       	add	r22, r22
    195a:	77 1f       	adc	r23, r23
    195c:	88 1f       	adc	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	1a f0       	brmi	.+6      	; 0x1968 <__fixunssfsi+0x22>
    1962:	ba 95       	dec	r27
    1964:	c9 f7       	brne	.-14     	; 0x1958 <__fixunssfsi+0x12>
    1966:	12 c0       	rjmp	.+36     	; 0x198c <__fixunssfsi+0x46>
    1968:	b1 30       	cpi	r27, 0x01	; 1
    196a:	81 f0       	breq	.+32     	; 0x198c <__fixunssfsi+0x46>
    196c:	61 d1       	rcall	.+706    	; 0x1c30 <__fp_zero>
    196e:	b1 e0       	ldi	r27, 0x01	; 1
    1970:	08 95       	ret
    1972:	5e c1       	rjmp	.+700    	; 0x1c30 <__fp_zero>
    1974:	67 2f       	mov	r22, r23
    1976:	78 2f       	mov	r23, r24
    1978:	88 27       	eor	r24, r24
    197a:	b8 5f       	subi	r27, 0xF8	; 248
    197c:	39 f0       	breq	.+14     	; 0x198c <__fixunssfsi+0x46>
    197e:	b9 3f       	cpi	r27, 0xF9	; 249
    1980:	cc f3       	brlt	.-14     	; 0x1974 <__fixunssfsi+0x2e>
    1982:	86 95       	lsr	r24
    1984:	77 95       	ror	r23
    1986:	67 95       	ror	r22
    1988:	b3 95       	inc	r27
    198a:	d9 f7       	brne	.-10     	; 0x1982 <__fixunssfsi+0x3c>
    198c:	3e f4       	brtc	.+14     	; 0x199c <__fixunssfsi+0x56>
    198e:	90 95       	com	r25
    1990:	80 95       	com	r24
    1992:	70 95       	com	r23
    1994:	61 95       	neg	r22
    1996:	7f 4f       	sbci	r23, 0xFF	; 255
    1998:	8f 4f       	sbci	r24, 0xFF	; 255
    199a:	9f 4f       	sbci	r25, 0xFF	; 255
    199c:	08 95       	ret

0000199e <__floatunsisf>:
    199e:	e8 94       	clt
    19a0:	09 c0       	rjmp	.+18     	; 0x19b4 <__floatsisf+0x12>

000019a2 <__floatsisf>:
    19a2:	97 fb       	bst	r25, 7
    19a4:	3e f4       	brtc	.+14     	; 0x19b4 <__floatsisf+0x12>
    19a6:	90 95       	com	r25
    19a8:	80 95       	com	r24
    19aa:	70 95       	com	r23
    19ac:	61 95       	neg	r22
    19ae:	7f 4f       	sbci	r23, 0xFF	; 255
    19b0:	8f 4f       	sbci	r24, 0xFF	; 255
    19b2:	9f 4f       	sbci	r25, 0xFF	; 255
    19b4:	99 23       	and	r25, r25
    19b6:	a9 f0       	breq	.+42     	; 0x19e2 <__floatsisf+0x40>
    19b8:	f9 2f       	mov	r31, r25
    19ba:	96 e9       	ldi	r25, 0x96	; 150
    19bc:	bb 27       	eor	r27, r27
    19be:	93 95       	inc	r25
    19c0:	f6 95       	lsr	r31
    19c2:	87 95       	ror	r24
    19c4:	77 95       	ror	r23
    19c6:	67 95       	ror	r22
    19c8:	b7 95       	ror	r27
    19ca:	f1 11       	cpse	r31, r1
    19cc:	f8 cf       	rjmp	.-16     	; 0x19be <__floatsisf+0x1c>
    19ce:	fa f4       	brpl	.+62     	; 0x1a0e <__floatsisf+0x6c>
    19d0:	bb 0f       	add	r27, r27
    19d2:	11 f4       	brne	.+4      	; 0x19d8 <__floatsisf+0x36>
    19d4:	60 ff       	sbrs	r22, 0
    19d6:	1b c0       	rjmp	.+54     	; 0x1a0e <__floatsisf+0x6c>
    19d8:	6f 5f       	subi	r22, 0xFF	; 255
    19da:	7f 4f       	sbci	r23, 0xFF	; 255
    19dc:	8f 4f       	sbci	r24, 0xFF	; 255
    19de:	9f 4f       	sbci	r25, 0xFF	; 255
    19e0:	16 c0       	rjmp	.+44     	; 0x1a0e <__floatsisf+0x6c>
    19e2:	88 23       	and	r24, r24
    19e4:	11 f0       	breq	.+4      	; 0x19ea <__floatsisf+0x48>
    19e6:	96 e9       	ldi	r25, 0x96	; 150
    19e8:	11 c0       	rjmp	.+34     	; 0x1a0c <__floatsisf+0x6a>
    19ea:	77 23       	and	r23, r23
    19ec:	21 f0       	breq	.+8      	; 0x19f6 <__floatsisf+0x54>
    19ee:	9e e8       	ldi	r25, 0x8E	; 142
    19f0:	87 2f       	mov	r24, r23
    19f2:	76 2f       	mov	r23, r22
    19f4:	05 c0       	rjmp	.+10     	; 0x1a00 <__floatsisf+0x5e>
    19f6:	66 23       	and	r22, r22
    19f8:	71 f0       	breq	.+28     	; 0x1a16 <__floatsisf+0x74>
    19fa:	96 e8       	ldi	r25, 0x86	; 134
    19fc:	86 2f       	mov	r24, r22
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	2a f0       	brmi	.+10     	; 0x1a0e <__floatsisf+0x6c>
    1a04:	9a 95       	dec	r25
    1a06:	66 0f       	add	r22, r22
    1a08:	77 1f       	adc	r23, r23
    1a0a:	88 1f       	adc	r24, r24
    1a0c:	da f7       	brpl	.-10     	; 0x1a04 <__floatsisf+0x62>
    1a0e:	88 0f       	add	r24, r24
    1a10:	96 95       	lsr	r25
    1a12:	87 95       	ror	r24
    1a14:	97 f9       	bld	r25, 7
    1a16:	08 95       	ret

00001a18 <__fp_cmp>:
    1a18:	99 0f       	add	r25, r25
    1a1a:	00 08       	sbc	r0, r0
    1a1c:	55 0f       	add	r21, r21
    1a1e:	aa 0b       	sbc	r26, r26
    1a20:	e0 e8       	ldi	r30, 0x80	; 128
    1a22:	fe ef       	ldi	r31, 0xFE	; 254
    1a24:	16 16       	cp	r1, r22
    1a26:	17 06       	cpc	r1, r23
    1a28:	e8 07       	cpc	r30, r24
    1a2a:	f9 07       	cpc	r31, r25
    1a2c:	c0 f0       	brcs	.+48     	; 0x1a5e <__fp_cmp+0x46>
    1a2e:	12 16       	cp	r1, r18
    1a30:	13 06       	cpc	r1, r19
    1a32:	e4 07       	cpc	r30, r20
    1a34:	f5 07       	cpc	r31, r21
    1a36:	98 f0       	brcs	.+38     	; 0x1a5e <__fp_cmp+0x46>
    1a38:	62 1b       	sub	r22, r18
    1a3a:	73 0b       	sbc	r23, r19
    1a3c:	84 0b       	sbc	r24, r20
    1a3e:	95 0b       	sbc	r25, r21
    1a40:	39 f4       	brne	.+14     	; 0x1a50 <__fp_cmp+0x38>
    1a42:	0a 26       	eor	r0, r26
    1a44:	61 f0       	breq	.+24     	; 0x1a5e <__fp_cmp+0x46>
    1a46:	23 2b       	or	r18, r19
    1a48:	24 2b       	or	r18, r20
    1a4a:	25 2b       	or	r18, r21
    1a4c:	21 f4       	brne	.+8      	; 0x1a56 <__fp_cmp+0x3e>
    1a4e:	08 95       	ret
    1a50:	0a 26       	eor	r0, r26
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <__fp_cmp+0x3e>
    1a54:	a1 40       	sbci	r26, 0x01	; 1
    1a56:	a6 95       	lsr	r26
    1a58:	8f ef       	ldi	r24, 0xFF	; 255
    1a5a:	81 1d       	adc	r24, r1
    1a5c:	81 1d       	adc	r24, r1
    1a5e:	08 95       	ret

00001a60 <__fp_inf>:
    1a60:	97 f9       	bld	r25, 7
    1a62:	9f 67       	ori	r25, 0x7F	; 127
    1a64:	80 e8       	ldi	r24, 0x80	; 128
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	08 95       	ret

00001a6c <__fp_mintl>:
    1a6c:	88 23       	and	r24, r24
    1a6e:	71 f4       	brne	.+28     	; 0x1a8c <__fp_mintl+0x20>
    1a70:	77 23       	and	r23, r23
    1a72:	21 f0       	breq	.+8      	; 0x1a7c <__fp_mintl+0x10>
    1a74:	98 50       	subi	r25, 0x08	; 8
    1a76:	87 2b       	or	r24, r23
    1a78:	76 2f       	mov	r23, r22
    1a7a:	07 c0       	rjmp	.+14     	; 0x1a8a <__fp_mintl+0x1e>
    1a7c:	66 23       	and	r22, r22
    1a7e:	11 f4       	brne	.+4      	; 0x1a84 <__fp_mintl+0x18>
    1a80:	99 27       	eor	r25, r25
    1a82:	0d c0       	rjmp	.+26     	; 0x1a9e <__fp_mintl+0x32>
    1a84:	90 51       	subi	r25, 0x10	; 16
    1a86:	86 2b       	or	r24, r22
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	2a f0       	brmi	.+10     	; 0x1a98 <__fp_mintl+0x2c>
    1a8e:	9a 95       	dec	r25
    1a90:	66 0f       	add	r22, r22
    1a92:	77 1f       	adc	r23, r23
    1a94:	88 1f       	adc	r24, r24
    1a96:	da f7       	brpl	.-10     	; 0x1a8e <__fp_mintl+0x22>
    1a98:	88 0f       	add	r24, r24
    1a9a:	96 95       	lsr	r25
    1a9c:	87 95       	ror	r24
    1a9e:	97 f9       	bld	r25, 7
    1aa0:	08 95       	ret

00001aa2 <__fp_mpack>:
    1aa2:	9f 3f       	cpi	r25, 0xFF	; 255
    1aa4:	31 f0       	breq	.+12     	; 0x1ab2 <__fp_mpack_finite+0xc>

00001aa6 <__fp_mpack_finite>:
    1aa6:	91 50       	subi	r25, 0x01	; 1
    1aa8:	20 f4       	brcc	.+8      	; 0x1ab2 <__fp_mpack_finite+0xc>
    1aaa:	87 95       	ror	r24
    1aac:	77 95       	ror	r23
    1aae:	67 95       	ror	r22
    1ab0:	b7 95       	ror	r27
    1ab2:	88 0f       	add	r24, r24
    1ab4:	91 1d       	adc	r25, r1
    1ab6:	96 95       	lsr	r25
    1ab8:	87 95       	ror	r24
    1aba:	97 f9       	bld	r25, 7
    1abc:	08 95       	ret

00001abe <__fp_nan>:
    1abe:	9f ef       	ldi	r25, 0xFF	; 255
    1ac0:	80 ec       	ldi	r24, 0xC0	; 192
    1ac2:	08 95       	ret

00001ac4 <__fp_powser>:
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	1f 93       	push	r17
    1aca:	0f 93       	push	r16
    1acc:	ff 92       	push	r15
    1ace:	ef 92       	push	r14
    1ad0:	df 92       	push	r13
    1ad2:	7b 01       	movw	r14, r22
    1ad4:	8c 01       	movw	r16, r24
    1ad6:	68 94       	set
    1ad8:	05 c0       	rjmp	.+10     	; 0x1ae4 <__fp_powser+0x20>
    1ada:	da 2e       	mov	r13, r26
    1adc:	ef 01       	movw	r28, r30
    1ade:	c6 d0       	rcall	.+396    	; 0x1c6c <__mulsf3x>
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	e8 94       	clt
    1ae4:	a5 91       	lpm	r26, Z+
    1ae6:	25 91       	lpm	r18, Z+
    1ae8:	35 91       	lpm	r19, Z+
    1aea:	45 91       	lpm	r20, Z+
    1aec:	55 91       	lpm	r21, Z+
    1aee:	ae f3       	brts	.-22     	; 0x1ada <__fp_powser+0x16>
    1af0:	ef 01       	movw	r28, r30
    1af2:	ed dd       	rcall	.-1062   	; 0x16ce <__addsf3x>
    1af4:	fe 01       	movw	r30, r28
    1af6:	97 01       	movw	r18, r14
    1af8:	a8 01       	movw	r20, r16
    1afa:	da 94       	dec	r13
    1afc:	79 f7       	brne	.-34     	; 0x1adc <__fp_powser+0x18>
    1afe:	df 90       	pop	r13
    1b00:	ef 90       	pop	r14
    1b02:	ff 90       	pop	r15
    1b04:	0f 91       	pop	r16
    1b06:	1f 91       	pop	r17
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <__fp_pscA>:
    1b0e:	00 24       	eor	r0, r0
    1b10:	0a 94       	dec	r0
    1b12:	16 16       	cp	r1, r22
    1b14:	17 06       	cpc	r1, r23
    1b16:	18 06       	cpc	r1, r24
    1b18:	09 06       	cpc	r0, r25
    1b1a:	08 95       	ret

00001b1c <__fp_pscB>:
    1b1c:	00 24       	eor	r0, r0
    1b1e:	0a 94       	dec	r0
    1b20:	12 16       	cp	r1, r18
    1b22:	13 06       	cpc	r1, r19
    1b24:	14 06       	cpc	r1, r20
    1b26:	05 06       	cpc	r0, r21
    1b28:	08 95       	ret
    1b2a:	c9 cf       	rjmp	.-110    	; 0x1abe <__fp_nan>

00001b2c <__fp_rempio2>:
    1b2c:	50 d0       	rcall	.+160    	; 0x1bce <__fp_splitA>
    1b2e:	e8 f3       	brcs	.-6      	; 0x1b2a <__fp_pscB+0xe>
    1b30:	e8 94       	clt
    1b32:	e0 e0       	ldi	r30, 0x00	; 0
    1b34:	bb 27       	eor	r27, r27
    1b36:	9f 57       	subi	r25, 0x7F	; 127
    1b38:	f0 f0       	brcs	.+60     	; 0x1b76 <__fp_rempio2+0x4a>
    1b3a:	2a ed       	ldi	r18, 0xDA	; 218
    1b3c:	3f e0       	ldi	r19, 0x0F	; 15
    1b3e:	49 ec       	ldi	r20, 0xC9	; 201
    1b40:	06 c0       	rjmp	.+12     	; 0x1b4e <__fp_rempio2+0x22>
    1b42:	ee 0f       	add	r30, r30
    1b44:	bb 0f       	add	r27, r27
    1b46:	66 1f       	adc	r22, r22
    1b48:	77 1f       	adc	r23, r23
    1b4a:	88 1f       	adc	r24, r24
    1b4c:	28 f0       	brcs	.+10     	; 0x1b58 <__fp_rempio2+0x2c>
    1b4e:	b2 3a       	cpi	r27, 0xA2	; 162
    1b50:	62 07       	cpc	r22, r18
    1b52:	73 07       	cpc	r23, r19
    1b54:	84 07       	cpc	r24, r20
    1b56:	28 f0       	brcs	.+10     	; 0x1b62 <__fp_rempio2+0x36>
    1b58:	b2 5a       	subi	r27, 0xA2	; 162
    1b5a:	62 0b       	sbc	r22, r18
    1b5c:	73 0b       	sbc	r23, r19
    1b5e:	84 0b       	sbc	r24, r20
    1b60:	e3 95       	inc	r30
    1b62:	9a 95       	dec	r25
    1b64:	72 f7       	brpl	.-36     	; 0x1b42 <__fp_rempio2+0x16>
    1b66:	80 38       	cpi	r24, 0x80	; 128
    1b68:	30 f4       	brcc	.+12     	; 0x1b76 <__fp_rempio2+0x4a>
    1b6a:	9a 95       	dec	r25
    1b6c:	bb 0f       	add	r27, r27
    1b6e:	66 1f       	adc	r22, r22
    1b70:	77 1f       	adc	r23, r23
    1b72:	88 1f       	adc	r24, r24
    1b74:	d2 f7       	brpl	.-12     	; 0x1b6a <__fp_rempio2+0x3e>
    1b76:	90 48       	sbci	r25, 0x80	; 128
    1b78:	96 cf       	rjmp	.-212    	; 0x1aa6 <__fp_mpack_finite>

00001b7a <__fp_round>:
    1b7a:	09 2e       	mov	r0, r25
    1b7c:	03 94       	inc	r0
    1b7e:	00 0c       	add	r0, r0
    1b80:	11 f4       	brne	.+4      	; 0x1b86 <__fp_round+0xc>
    1b82:	88 23       	and	r24, r24
    1b84:	52 f0       	brmi	.+20     	; 0x1b9a <__fp_round+0x20>
    1b86:	bb 0f       	add	r27, r27
    1b88:	40 f4       	brcc	.+16     	; 0x1b9a <__fp_round+0x20>
    1b8a:	bf 2b       	or	r27, r31
    1b8c:	11 f4       	brne	.+4      	; 0x1b92 <__fp_round+0x18>
    1b8e:	60 ff       	sbrs	r22, 0
    1b90:	04 c0       	rjmp	.+8      	; 0x1b9a <__fp_round+0x20>
    1b92:	6f 5f       	subi	r22, 0xFF	; 255
    1b94:	7f 4f       	sbci	r23, 0xFF	; 255
    1b96:	8f 4f       	sbci	r24, 0xFF	; 255
    1b98:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9a:	08 95       	ret

00001b9c <__fp_sinus>:
    1b9c:	ef 93       	push	r30
    1b9e:	e0 ff       	sbrs	r30, 0
    1ba0:	06 c0       	rjmp	.+12     	; 0x1bae <__fp_sinus+0x12>
    1ba2:	a2 ea       	ldi	r26, 0xA2	; 162
    1ba4:	2a ed       	ldi	r18, 0xDA	; 218
    1ba6:	3f e0       	ldi	r19, 0x0F	; 15
    1ba8:	49 ec       	ldi	r20, 0xC9	; 201
    1baa:	5f eb       	ldi	r21, 0xBF	; 191
    1bac:	90 dd       	rcall	.-1248   	; 0x16ce <__addsf3x>
    1bae:	e5 df       	rcall	.-54     	; 0x1b7a <__fp_round>
    1bb0:	0f 90       	pop	r0
    1bb2:	03 94       	inc	r0
    1bb4:	01 fc       	sbrc	r0, 1
    1bb6:	90 58       	subi	r25, 0x80	; 128
    1bb8:	e1 e1       	ldi	r30, 0x11	; 17
    1bba:	f1 e0       	ldi	r31, 0x01	; 1
    1bbc:	00 c1       	rjmp	.+512    	; 0x1dbe <__fp_powsodd>

00001bbe <__fp_split3>:
    1bbe:	57 fd       	sbrc	r21, 7
    1bc0:	90 58       	subi	r25, 0x80	; 128
    1bc2:	44 0f       	add	r20, r20
    1bc4:	55 1f       	adc	r21, r21
    1bc6:	59 f0       	breq	.+22     	; 0x1bde <__fp_splitA+0x10>
    1bc8:	5f 3f       	cpi	r21, 0xFF	; 255
    1bca:	71 f0       	breq	.+28     	; 0x1be8 <__fp_splitA+0x1a>
    1bcc:	47 95       	ror	r20

00001bce <__fp_splitA>:
    1bce:	88 0f       	add	r24, r24
    1bd0:	97 fb       	bst	r25, 7
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	61 f0       	breq	.+24     	; 0x1bee <__fp_splitA+0x20>
    1bd6:	9f 3f       	cpi	r25, 0xFF	; 255
    1bd8:	79 f0       	breq	.+30     	; 0x1bf8 <__fp_splitA+0x2a>
    1bda:	87 95       	ror	r24
    1bdc:	08 95       	ret
    1bde:	12 16       	cp	r1, r18
    1be0:	13 06       	cpc	r1, r19
    1be2:	14 06       	cpc	r1, r20
    1be4:	55 1f       	adc	r21, r21
    1be6:	f2 cf       	rjmp	.-28     	; 0x1bcc <__fp_split3+0xe>
    1be8:	46 95       	lsr	r20
    1bea:	f1 df       	rcall	.-30     	; 0x1bce <__fp_splitA>
    1bec:	08 c0       	rjmp	.+16     	; 0x1bfe <__fp_splitA+0x30>
    1bee:	16 16       	cp	r1, r22
    1bf0:	17 06       	cpc	r1, r23
    1bf2:	18 06       	cpc	r1, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	f1 cf       	rjmp	.-30     	; 0x1bda <__fp_splitA+0xc>
    1bf8:	86 95       	lsr	r24
    1bfa:	71 05       	cpc	r23, r1
    1bfc:	61 05       	cpc	r22, r1
    1bfe:	08 94       	sec
    1c00:	08 95       	ret

00001c02 <__fp_trunc>:
    1c02:	e5 df       	rcall	.-54     	; 0x1bce <__fp_splitA>
    1c04:	a0 f0       	brcs	.+40     	; 0x1c2e <__fp_trunc+0x2c>
    1c06:	be e7       	ldi	r27, 0x7E	; 126
    1c08:	b9 17       	cp	r27, r25
    1c0a:	88 f4       	brcc	.+34     	; 0x1c2e <__fp_trunc+0x2c>
    1c0c:	bb 27       	eor	r27, r27
    1c0e:	9f 38       	cpi	r25, 0x8F	; 143
    1c10:	60 f4       	brcc	.+24     	; 0x1c2a <__fp_trunc+0x28>
    1c12:	16 16       	cp	r1, r22
    1c14:	b1 1d       	adc	r27, r1
    1c16:	67 2f       	mov	r22, r23
    1c18:	78 2f       	mov	r23, r24
    1c1a:	88 27       	eor	r24, r24
    1c1c:	98 5f       	subi	r25, 0xF8	; 248
    1c1e:	f7 cf       	rjmp	.-18     	; 0x1c0e <__fp_trunc+0xc>
    1c20:	86 95       	lsr	r24
    1c22:	77 95       	ror	r23
    1c24:	67 95       	ror	r22
    1c26:	b1 1d       	adc	r27, r1
    1c28:	93 95       	inc	r25
    1c2a:	96 39       	cpi	r25, 0x96	; 150
    1c2c:	c8 f3       	brcs	.-14     	; 0x1c20 <__fp_trunc+0x1e>
    1c2e:	08 95       	ret

00001c30 <__fp_zero>:
    1c30:	e8 94       	clt

00001c32 <__fp_szero>:
    1c32:	bb 27       	eor	r27, r27
    1c34:	66 27       	eor	r22, r22
    1c36:	77 27       	eor	r23, r23
    1c38:	cb 01       	movw	r24, r22
    1c3a:	97 f9       	bld	r25, 7
    1c3c:	08 95       	ret

00001c3e <__gesf2>:
    1c3e:	ec de       	rcall	.-552    	; 0x1a18 <__fp_cmp>
    1c40:	08 f4       	brcc	.+2      	; 0x1c44 <__gesf2+0x6>
    1c42:	8f ef       	ldi	r24, 0xFF	; 255
    1c44:	08 95       	ret

00001c46 <inverse>:
    1c46:	9b 01       	movw	r18, r22
    1c48:	ac 01       	movw	r20, r24
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	70 e0       	ldi	r23, 0x00	; 0
    1c4e:	80 e8       	ldi	r24, 0x80	; 128
    1c50:	9f e3       	ldi	r25, 0x3F	; 63
    1c52:	0c ce       	rjmp	.-1000   	; 0x186c <__divsf3>

00001c54 <__mulsf3>:
    1c54:	0b d0       	rcall	.+22     	; 0x1c6c <__mulsf3x>
    1c56:	91 cf       	rjmp	.-222    	; 0x1b7a <__fp_round>
    1c58:	5a df       	rcall	.-332    	; 0x1b0e <__fp_pscA>
    1c5a:	28 f0       	brcs	.+10     	; 0x1c66 <__mulsf3+0x12>
    1c5c:	5f df       	rcall	.-322    	; 0x1b1c <__fp_pscB>
    1c5e:	18 f0       	brcs	.+6      	; 0x1c66 <__mulsf3+0x12>
    1c60:	95 23       	and	r25, r21
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <__mulsf3+0x12>
    1c64:	fd ce       	rjmp	.-518    	; 0x1a60 <__fp_inf>
    1c66:	2b cf       	rjmp	.-426    	; 0x1abe <__fp_nan>
    1c68:	11 24       	eor	r1, r1
    1c6a:	e3 cf       	rjmp	.-58     	; 0x1c32 <__fp_szero>

00001c6c <__mulsf3x>:
    1c6c:	a8 df       	rcall	.-176    	; 0x1bbe <__fp_split3>
    1c6e:	a0 f3       	brcs	.-24     	; 0x1c58 <__mulsf3+0x4>

00001c70 <__mulsf3_pse>:
    1c70:	95 9f       	mul	r25, r21
    1c72:	d1 f3       	breq	.-12     	; 0x1c68 <__mulsf3+0x14>
    1c74:	95 0f       	add	r25, r21
    1c76:	50 e0       	ldi	r21, 0x00	; 0
    1c78:	55 1f       	adc	r21, r21
    1c7a:	62 9f       	mul	r22, r18
    1c7c:	f0 01       	movw	r30, r0
    1c7e:	72 9f       	mul	r23, r18
    1c80:	bb 27       	eor	r27, r27
    1c82:	f0 0d       	add	r31, r0
    1c84:	b1 1d       	adc	r27, r1
    1c86:	63 9f       	mul	r22, r19
    1c88:	aa 27       	eor	r26, r26
    1c8a:	f0 0d       	add	r31, r0
    1c8c:	b1 1d       	adc	r27, r1
    1c8e:	aa 1f       	adc	r26, r26
    1c90:	64 9f       	mul	r22, r20
    1c92:	66 27       	eor	r22, r22
    1c94:	b0 0d       	add	r27, r0
    1c96:	a1 1d       	adc	r26, r1
    1c98:	66 1f       	adc	r22, r22
    1c9a:	82 9f       	mul	r24, r18
    1c9c:	22 27       	eor	r18, r18
    1c9e:	b0 0d       	add	r27, r0
    1ca0:	a1 1d       	adc	r26, r1
    1ca2:	62 1f       	adc	r22, r18
    1ca4:	73 9f       	mul	r23, r19
    1ca6:	b0 0d       	add	r27, r0
    1ca8:	a1 1d       	adc	r26, r1
    1caa:	62 1f       	adc	r22, r18
    1cac:	83 9f       	mul	r24, r19
    1cae:	a0 0d       	add	r26, r0
    1cb0:	61 1d       	adc	r22, r1
    1cb2:	22 1f       	adc	r18, r18
    1cb4:	74 9f       	mul	r23, r20
    1cb6:	33 27       	eor	r19, r19
    1cb8:	a0 0d       	add	r26, r0
    1cba:	61 1d       	adc	r22, r1
    1cbc:	23 1f       	adc	r18, r19
    1cbe:	84 9f       	mul	r24, r20
    1cc0:	60 0d       	add	r22, r0
    1cc2:	21 1d       	adc	r18, r1
    1cc4:	82 2f       	mov	r24, r18
    1cc6:	76 2f       	mov	r23, r22
    1cc8:	6a 2f       	mov	r22, r26
    1cca:	11 24       	eor	r1, r1
    1ccc:	9f 57       	subi	r25, 0x7F	; 127
    1cce:	50 40       	sbci	r21, 0x00	; 0
    1cd0:	8a f0       	brmi	.+34     	; 0x1cf4 <__mulsf3_pse+0x84>
    1cd2:	e1 f0       	breq	.+56     	; 0x1d0c <__mulsf3_pse+0x9c>
    1cd4:	88 23       	and	r24, r24
    1cd6:	4a f0       	brmi	.+18     	; 0x1cea <__mulsf3_pse+0x7a>
    1cd8:	ee 0f       	add	r30, r30
    1cda:	ff 1f       	adc	r31, r31
    1cdc:	bb 1f       	adc	r27, r27
    1cde:	66 1f       	adc	r22, r22
    1ce0:	77 1f       	adc	r23, r23
    1ce2:	88 1f       	adc	r24, r24
    1ce4:	91 50       	subi	r25, 0x01	; 1
    1ce6:	50 40       	sbci	r21, 0x00	; 0
    1ce8:	a9 f7       	brne	.-22     	; 0x1cd4 <__mulsf3_pse+0x64>
    1cea:	9e 3f       	cpi	r25, 0xFE	; 254
    1cec:	51 05       	cpc	r21, r1
    1cee:	70 f0       	brcs	.+28     	; 0x1d0c <__mulsf3_pse+0x9c>
    1cf0:	b7 ce       	rjmp	.-658    	; 0x1a60 <__fp_inf>
    1cf2:	9f cf       	rjmp	.-194    	; 0x1c32 <__fp_szero>
    1cf4:	5f 3f       	cpi	r21, 0xFF	; 255
    1cf6:	ec f3       	brlt	.-6      	; 0x1cf2 <__mulsf3_pse+0x82>
    1cf8:	98 3e       	cpi	r25, 0xE8	; 232
    1cfa:	dc f3       	brlt	.-10     	; 0x1cf2 <__mulsf3_pse+0x82>
    1cfc:	86 95       	lsr	r24
    1cfe:	77 95       	ror	r23
    1d00:	67 95       	ror	r22
    1d02:	b7 95       	ror	r27
    1d04:	f7 95       	ror	r31
    1d06:	e7 95       	ror	r30
    1d08:	9f 5f       	subi	r25, 0xFF	; 255
    1d0a:	c1 f7       	brne	.-16     	; 0x1cfc <__mulsf3_pse+0x8c>
    1d0c:	fe 2b       	or	r31, r30
    1d0e:	88 0f       	add	r24, r24
    1d10:	91 1d       	adc	r25, r1
    1d12:	96 95       	lsr	r25
    1d14:	87 95       	ror	r24
    1d16:	97 f9       	bld	r25, 7
    1d18:	08 95       	ret

00001d1a <sin>:
    1d1a:	9f 93       	push	r25
    1d1c:	07 df       	rcall	.-498    	; 0x1b2c <__fp_rempio2>
    1d1e:	0f 90       	pop	r0
    1d20:	07 fc       	sbrc	r0, 7
    1d22:	ee 5f       	subi	r30, 0xFE	; 254
    1d24:	3b cf       	rjmp	.-394    	; 0x1b9c <__fp_sinus>
    1d26:	11 f4       	brne	.+4      	; 0x1d2c <sin+0x12>
    1d28:	0e f4       	brtc	.+2      	; 0x1d2c <sin+0x12>
    1d2a:	c9 ce       	rjmp	.-622    	; 0x1abe <__fp_nan>
    1d2c:	ba ce       	rjmp	.-652    	; 0x1aa2 <__fp_mpack>

00001d2e <sqrt>:
    1d2e:	4f df       	rcall	.-354    	; 0x1bce <__fp_splitA>
    1d30:	d0 f3       	brcs	.-12     	; 0x1d26 <sin+0xc>
    1d32:	99 23       	and	r25, r25
    1d34:	d9 f3       	breq	.-10     	; 0x1d2c <sin+0x12>
    1d36:	ce f3       	brts	.-14     	; 0x1d2a <sin+0x10>
    1d38:	9f 57       	subi	r25, 0x7F	; 127
    1d3a:	55 0b       	sbc	r21, r21
    1d3c:	87 ff       	sbrs	r24, 7
    1d3e:	38 d0       	rcall	.+112    	; 0x1db0 <__fp_norm2>
    1d40:	00 24       	eor	r0, r0
    1d42:	a0 e6       	ldi	r26, 0x60	; 96
    1d44:	40 ea       	ldi	r20, 0xA0	; 160
    1d46:	90 01       	movw	r18, r0
    1d48:	80 58       	subi	r24, 0x80	; 128
    1d4a:	56 95       	lsr	r21
    1d4c:	97 95       	ror	r25
    1d4e:	28 f4       	brcc	.+10     	; 0x1d5a <sqrt+0x2c>
    1d50:	80 5c       	subi	r24, 0xC0	; 192
    1d52:	66 0f       	add	r22, r22
    1d54:	77 1f       	adc	r23, r23
    1d56:	88 1f       	adc	r24, r24
    1d58:	20 f0       	brcs	.+8      	; 0x1d62 <sqrt+0x34>
    1d5a:	26 17       	cp	r18, r22
    1d5c:	37 07       	cpc	r19, r23
    1d5e:	48 07       	cpc	r20, r24
    1d60:	30 f4       	brcc	.+12     	; 0x1d6e <sqrt+0x40>
    1d62:	62 1b       	sub	r22, r18
    1d64:	73 0b       	sbc	r23, r19
    1d66:	84 0b       	sbc	r24, r20
    1d68:	20 29       	or	r18, r0
    1d6a:	31 29       	or	r19, r1
    1d6c:	4a 2b       	or	r20, r26
    1d6e:	a6 95       	lsr	r26
    1d70:	17 94       	ror	r1
    1d72:	07 94       	ror	r0
    1d74:	20 25       	eor	r18, r0
    1d76:	31 25       	eor	r19, r1
    1d78:	4a 27       	eor	r20, r26
    1d7a:	58 f7       	brcc	.-42     	; 0x1d52 <sqrt+0x24>
    1d7c:	66 0f       	add	r22, r22
    1d7e:	77 1f       	adc	r23, r23
    1d80:	88 1f       	adc	r24, r24
    1d82:	20 f0       	brcs	.+8      	; 0x1d8c <sqrt+0x5e>
    1d84:	26 17       	cp	r18, r22
    1d86:	37 07       	cpc	r19, r23
    1d88:	48 07       	cpc	r20, r24
    1d8a:	30 f4       	brcc	.+12     	; 0x1d98 <sqrt+0x6a>
    1d8c:	62 0b       	sbc	r22, r18
    1d8e:	73 0b       	sbc	r23, r19
    1d90:	84 0b       	sbc	r24, r20
    1d92:	20 0d       	add	r18, r0
    1d94:	31 1d       	adc	r19, r1
    1d96:	41 1d       	adc	r20, r1
    1d98:	a0 95       	com	r26
    1d9a:	81 f7       	brne	.-32     	; 0x1d7c <sqrt+0x4e>
    1d9c:	b9 01       	movw	r22, r18
    1d9e:	84 2f       	mov	r24, r20
    1da0:	91 58       	subi	r25, 0x81	; 129
    1da2:	88 0f       	add	r24, r24
    1da4:	96 95       	lsr	r25
    1da6:	87 95       	ror	r24
    1da8:	08 95       	ret

00001daa <square>:
    1daa:	9b 01       	movw	r18, r22
    1dac:	ac 01       	movw	r20, r24
    1dae:	52 cf       	rjmp	.-348    	; 0x1c54 <__mulsf3>

00001db0 <__fp_norm2>:
    1db0:	91 50       	subi	r25, 0x01	; 1
    1db2:	50 40       	sbci	r21, 0x00	; 0
    1db4:	66 0f       	add	r22, r22
    1db6:	77 1f       	adc	r23, r23
    1db8:	88 1f       	adc	r24, r24
    1dba:	d2 f7       	brpl	.-12     	; 0x1db0 <__fp_norm2>
    1dbc:	08 95       	ret

00001dbe <__fp_powsodd>:
    1dbe:	9f 93       	push	r25
    1dc0:	8f 93       	push	r24
    1dc2:	7f 93       	push	r23
    1dc4:	6f 93       	push	r22
    1dc6:	ff 93       	push	r31
    1dc8:	ef 93       	push	r30
    1dca:	9b 01       	movw	r18, r22
    1dcc:	ac 01       	movw	r20, r24
    1dce:	42 df       	rcall	.-380    	; 0x1c54 <__mulsf3>
    1dd0:	ef 91       	pop	r30
    1dd2:	ff 91       	pop	r31
    1dd4:	77 de       	rcall	.-786    	; 0x1ac4 <__fp_powser>
    1dd6:	2f 91       	pop	r18
    1dd8:	3f 91       	pop	r19
    1dda:	4f 91       	pop	r20
    1ddc:	5f 91       	pop	r21
    1dde:	3a cf       	rjmp	.-396    	; 0x1c54 <__mulsf3>

00001de0 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1de0:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1de2:	91 8d       	ldd	r25, Z+25	; 0x19
    1de4:	22 8d       	ldd	r18, Z+26	; 0x1a
    1de6:	89 2f       	mov	r24, r25
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	80 5c       	subi	r24, 0xC0	; 192
    1dec:	9f 4f       	sbci	r25, 0xFF	; 255
    1dee:	82 1b       	sub	r24, r18
    1df0:	91 09       	sbc	r25, r1
}
    1df2:	8f 73       	andi	r24, 0x3F	; 63
    1df4:	99 27       	eor	r25, r25
    1df6:	08 95       	ret

00001df8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1df8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1dfa:	91 8d       	ldd	r25, Z+25	; 0x19
    1dfc:	82 8d       	ldd	r24, Z+26	; 0x1a
    1dfe:	98 17       	cp	r25, r24
    1e00:	31 f0       	breq	.+12     	; 0x1e0e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1e02:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e04:	e8 0f       	add	r30, r24
    1e06:	f1 1d       	adc	r31, r1
    1e08:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1e0e:	8f ef       	ldi	r24, 0xFF	; 255
    1e10:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1e12:	08 95       	ret

00001e14 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1e14:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1e16:	91 8d       	ldd	r25, Z+25	; 0x19
    1e18:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e1a:	98 17       	cp	r25, r24
    1e1c:	61 f0       	breq	.+24     	; 0x1e36 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1e1e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e20:	df 01       	movw	r26, r30
    1e22:	a8 0f       	add	r26, r24
    1e24:	b1 1d       	adc	r27, r1
    1e26:	5d 96       	adiw	r26, 0x1d	; 29
    1e28:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1e2a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e2c:	9f 5f       	subi	r25, 0xFF	; 255
    1e2e:	9f 73       	andi	r25, 0x3F	; 63
    1e30:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1e36:	8f ef       	ldi	r24, 0xFF	; 255
    1e38:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1e3a:	08 95       	ret

00001e3c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1e40:	44 8d       	ldd	r20, Z+28	; 0x1c
    1e42:	25 2f       	mov	r18, r21
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	84 2f       	mov	r24, r20
    1e48:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1e4a:	82 1b       	sub	r24, r18
    1e4c:	93 0b       	sbc	r25, r19
    1e4e:	54 17       	cp	r21, r20
    1e50:	10 f0       	brcs	.+4      	; 0x1e56 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1e52:	cf 96       	adiw	r24, 0x3f	; 63
    1e54:	08 95       	ret
  return tail - head - 1;
    1e56:	01 97       	sbiw	r24, 0x01	; 1
}
    1e58:	08 95       	ret

00001e5a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1e5a:	8a eb       	ldi	r24, 0xBA	; 186
    1e5c:	90 e1       	ldi	r25, 0x10	; 16
    1e5e:	89 2b       	or	r24, r25
    1e60:	39 f0       	breq	.+14     	; 0x1e70 <_Z14serialEventRunv+0x16>
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	89 2b       	or	r24, r25
    1e68:	19 f0       	breq	.+6      	; 0x1e70 <_Z14serialEventRunv+0x16>
    1e6a:	84 d1       	rcall	.+776    	; 0x2174 <_Z17Serial0_availablev>
    1e6c:	81 11       	cpse	r24, r1
    1e6e:	25 c0       	rjmp	.+74     	; 0x1eba <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	89 2b       	or	r24, r25
    1e76:	41 f0       	breq	.+16     	; 0x1e88 <_Z14serialEventRunv+0x2e>
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	89 2b       	or	r24, r25
    1e7e:	21 f0       	breq	.+8      	; 0x1e88 <_Z14serialEventRunv+0x2e>
    1e80:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1e84:	81 11       	cpse	r24, r1
    1e86:	1c c0       	rjmp	.+56     	; 0x1ec0 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	89 2b       	or	r24, r25
    1e8e:	41 f0       	breq	.+16     	; 0x1ea0 <_Z14serialEventRunv+0x46>
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	89 2b       	or	r24, r25
    1e96:	21 f0       	breq	.+8      	; 0x1ea0 <_Z14serialEventRunv+0x46>
    1e98:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1e9c:	81 11       	cpse	r24, r1
    1e9e:	13 c0       	rjmp	.+38     	; 0x1ec6 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	89 2b       	or	r24, r25
    1ea6:	a1 f0       	breq	.+40     	; 0x1ed0 <_Z14serialEventRunv+0x76>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	89 2b       	or	r24, r25
    1eae:	81 f0       	breq	.+32     	; 0x1ed0 <_Z14serialEventRunv+0x76>
    1eb0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1eb4:	81 11       	cpse	r24, r1
    1eb6:	0a c0       	rjmp	.+20     	; 0x1ecc <_Z14serialEventRunv+0x72>
    1eb8:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1eba:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1ebe:	d8 cf       	rjmp	.-80     	; 0x1e70 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1ec0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1ec4:	e1 cf       	rjmp	.-62     	; 0x1e88 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1ec6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1eca:	ea cf       	rjmp	.-44     	; 0x1ea0 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1ecc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1ed0:	08 95       	ret

00001ed2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1ed2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1ed4:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ed6:	df 01       	movw	r26, r30
    1ed8:	a8 0f       	add	r26, r24
    1eda:	b1 1d       	adc	r27, r1
    1edc:	a3 5a       	subi	r26, 0xA3	; 163
    1ede:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1ee2:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	01 96       	adiw	r24, 0x01	; 1
    1ee8:	8f 73       	andi	r24, 0x3F	; 63
    1eea:	99 27       	eor	r25, r25
    1eec:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1eee:	a6 89       	ldd	r26, Z+22	; 0x16
    1ef0:	b7 89       	ldd	r27, Z+23	; 0x17
    1ef2:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1ef4:	a0 89       	ldd	r26, Z+16	; 0x10
    1ef6:	b1 89       	ldd	r27, Z+17	; 0x11
    1ef8:	8c 91       	ld	r24, X
    1efa:	83 70       	andi	r24, 0x03	; 3
    1efc:	80 64       	ori	r24, 0x40	; 64
    1efe:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1f00:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f02:	84 8d       	ldd	r24, Z+28	; 0x1c
    1f04:	98 13       	cpse	r25, r24
    1f06:	06 c0       	rjmp	.+12     	; 0x1f14 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1f08:	02 88       	ldd	r0, Z+18	; 0x12
    1f0a:	f3 89       	ldd	r31, Z+19	; 0x13
    1f0c:	e0 2d       	mov	r30, r0
    1f0e:	80 81       	ld	r24, Z
    1f10:	8f 7d       	andi	r24, 0xDF	; 223
    1f12:	80 83       	st	Z, r24
    1f14:	08 95       	ret

00001f16 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1f16:	ef 92       	push	r14
    1f18:	ff 92       	push	r15
    1f1a:	0f 93       	push	r16
    1f1c:	1f 93       	push	r17
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	ec 01       	movw	r28, r24
  _written = true;
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1f28:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f2c:	98 13       	cpse	r25, r24
    1f2e:	05 c0       	rjmp	.+10     	; 0x1f3a <_ZN14HardwareSerial5writeEh+0x24>
    1f30:	e8 89       	ldd	r30, Y+16	; 0x10
    1f32:	f9 89       	ldd	r31, Y+17	; 0x11
    1f34:	80 81       	ld	r24, Z
    1f36:	85 fd       	sbrc	r24, 5
    1f38:	25 c0       	rjmp	.+74     	; 0x1f84 <_ZN14HardwareSerial5writeEh+0x6e>
    1f3a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1f3c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1f3e:	10 e0       	ldi	r17, 0x00	; 0
    1f40:	0f 5f       	subi	r16, 0xFF	; 255
    1f42:	1f 4f       	sbci	r17, 0xFF	; 255
    1f44:	0f 73       	andi	r16, 0x3F	; 63
    1f46:	11 27       	eor	r17, r17
    1f48:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1f4a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f4c:	e8 12       	cpse	r14, r24
    1f4e:	0b c0       	rjmp	.+22     	; 0x1f66 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	07 fc       	sbrc	r0, 7
    1f54:	fa cf       	rjmp	.-12     	; 0x1f4a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1f56:	e8 89       	ldd	r30, Y+16	; 0x10
    1f58:	f9 89       	ldd	r31, Y+17	; 0x11
    1f5a:	80 81       	ld	r24, Z
    1f5c:	85 ff       	sbrs	r24, 5
    1f5e:	f5 cf       	rjmp	.-22     	; 0x1f4a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1f60:	ce 01       	movw	r24, r28
    1f62:	b7 df       	rcall	.-146    	; 0x1ed2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1f64:	f2 cf       	rjmp	.-28     	; 0x1f4a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1f66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f68:	fe 01       	movw	r30, r28
    1f6a:	e8 0f       	add	r30, r24
    1f6c:	f1 1d       	adc	r31, r1
    1f6e:	e3 5a       	subi	r30, 0xA3	; 163
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1f74:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1f76:	f8 94       	cli
    _tx_buffer_head = i;
    1f78:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1f7a:	ea 89       	ldd	r30, Y+18	; 0x12
    1f7c:	fb 89       	ldd	r31, Y+19	; 0x13
    1f7e:	80 81       	ld	r24, Z
    1f80:	80 62       	ori	r24, 0x20	; 32
    1f82:	0a c0       	rjmp	.+20     	; 0x1f98 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1f84:	9f b7       	in	r25, 0x3f	; 63
    1f86:	f8 94       	cli
      *_udr = c;
    1f88:	ee 89       	ldd	r30, Y+22	; 0x16
    1f8a:	ff 89       	ldd	r31, Y+23	; 0x17
    1f8c:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1f8e:	e8 89       	ldd	r30, Y+16	; 0x10
    1f90:	f9 89       	ldd	r31, Y+17	; 0x11
    1f92:	80 81       	ld	r24, Z
    1f94:	83 70       	andi	r24, 0x03	; 3
    1f96:	80 64       	ori	r24, 0x40	; 64
    1f98:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1f9a:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	1f 91       	pop	r17
    1fa6:	0f 91       	pop	r16
    1fa8:	ff 90       	pop	r15
    1faa:	ef 90       	pop	r14
    1fac:	08 95       	ret

00001fae <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1fb4:	88 8d       	ldd	r24, Y+24	; 0x18
    1fb6:	88 23       	and	r24, r24
    1fb8:	c1 f0       	breq	.+48     	; 0x1fea <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1fba:	ea 89       	ldd	r30, Y+18	; 0x12
    1fbc:	fb 89       	ldd	r31, Y+19	; 0x13
    1fbe:	80 81       	ld	r24, Z
    1fc0:	85 fd       	sbrc	r24, 5
    1fc2:	05 c0       	rjmp	.+10     	; 0x1fce <_ZN14HardwareSerial5flushEv+0x20>
    1fc4:	a8 89       	ldd	r26, Y+16	; 0x10
    1fc6:	b9 89       	ldd	r27, Y+17	; 0x11
    1fc8:	8c 91       	ld	r24, X
    1fca:	86 fd       	sbrc	r24, 6
    1fcc:	0e c0       	rjmp	.+28     	; 0x1fea <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	07 fc       	sbrc	r0, 7
    1fd2:	f5 cf       	rjmp	.-22     	; 0x1fbe <_ZN14HardwareSerial5flushEv+0x10>
    1fd4:	80 81       	ld	r24, Z
    1fd6:	85 ff       	sbrs	r24, 5
    1fd8:	f2 cf       	rjmp	.-28     	; 0x1fbe <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1fda:	a8 89       	ldd	r26, Y+16	; 0x10
    1fdc:	b9 89       	ldd	r27, Y+17	; 0x11
    1fde:	8c 91       	ld	r24, X
    1fe0:	85 ff       	sbrs	r24, 5
    1fe2:	ed cf       	rjmp	.-38     	; 0x1fbe <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	75 df       	rcall	.-278    	; 0x1ed2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1fe8:	e8 cf       	rjmp	.-48     	; 0x1fba <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	08 95       	ret

00001ff0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1ff0:	cf 92       	push	r12
    1ff2:	df 92       	push	r13
    1ff4:	ef 92       	push	r14
    1ff6:	ff 92       	push	r15
    1ff8:	1f 93       	push	r17
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	ec 01       	movw	r28, r24
    2000:	6a 01       	movw	r12, r20
    2002:	7b 01       	movw	r14, r22
    2004:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2006:	e8 89       	ldd	r30, Y+16	; 0x10
    2008:	f9 89       	ldd	r31, Y+17	; 0x11
    200a:	82 e0       	ldi	r24, 0x02	; 2
    200c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    200e:	41 15       	cp	r20, r1
    2010:	51 4e       	sbci	r21, 0xE1	; 225
    2012:	61 05       	cpc	r22, r1
    2014:	71 05       	cpc	r23, r1
    2016:	a9 f0       	breq	.+42     	; 0x2042 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2018:	60 e0       	ldi	r22, 0x00	; 0
    201a:	79 e0       	ldi	r23, 0x09	; 9
    201c:	8d e3       	ldi	r24, 0x3D	; 61
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	a7 01       	movw	r20, r14
    2022:	96 01       	movw	r18, r12
    2024:	e9 d4       	rcall	.+2514   	; 0x29f8 <__udivmodsi4>
    2026:	da 01       	movw	r26, r20
    2028:	c9 01       	movw	r24, r18
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	a1 09       	sbc	r26, r1
    202e:	b1 09       	sbc	r27, r1
    2030:	b6 95       	lsr	r27
    2032:	a7 95       	ror	r26
    2034:	97 95       	ror	r25
    2036:	87 95       	ror	r24
    2038:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    203a:	21 15       	cp	r18, r1
    203c:	80 e1       	ldi	r24, 0x10	; 16
    203e:	38 07       	cpc	r19, r24
    2040:	a0 f0       	brcs	.+40     	; 0x206a <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    2042:	e8 89       	ldd	r30, Y+16	; 0x10
    2044:	f9 89       	ldd	r31, Y+17	; 0x11
    2046:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2048:	60 e8       	ldi	r22, 0x80	; 128
    204a:	74 e8       	ldi	r23, 0x84	; 132
    204c:	8e e1       	ldi	r24, 0x1E	; 30
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	a7 01       	movw	r20, r14
    2052:	96 01       	movw	r18, r12
    2054:	d1 d4       	rcall	.+2466   	; 0x29f8 <__udivmodsi4>
    2056:	da 01       	movw	r26, r20
    2058:	c9 01       	movw	r24, r18
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	a1 09       	sbc	r26, r1
    205e:	b1 09       	sbc	r27, r1
    2060:	b6 95       	lsr	r27
    2062:	a7 95       	ror	r26
    2064:	97 95       	ror	r25
    2066:	87 95       	ror	r24
    2068:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    206a:	ec 85       	ldd	r30, Y+12	; 0x0c
    206c:	fd 85       	ldd	r31, Y+13	; 0x0d
    206e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2070:	ee 85       	ldd	r30, Y+14	; 0x0e
    2072:	ff 85       	ldd	r31, Y+15	; 0x0f
    2074:	20 83       	st	Z, r18

  _written = false;
    2076:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2078:	ec 89       	ldd	r30, Y+20	; 0x14
    207a:	fd 89       	ldd	r31, Y+21	; 0x15
    207c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    207e:	ea 89       	ldd	r30, Y+18	; 0x12
    2080:	fb 89       	ldd	r31, Y+19	; 0x13
    2082:	80 81       	ld	r24, Z
    2084:	80 61       	ori	r24, 0x10	; 16
    2086:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2088:	ea 89       	ldd	r30, Y+18	; 0x12
    208a:	fb 89       	ldd	r31, Y+19	; 0x13
    208c:	80 81       	ld	r24, Z
    208e:	88 60       	ori	r24, 0x08	; 8
    2090:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2092:	ea 89       	ldd	r30, Y+18	; 0x12
    2094:	fb 89       	ldd	r31, Y+19	; 0x13
    2096:	80 81       	ld	r24, Z
    2098:	80 68       	ori	r24, 0x80	; 128
    209a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    209c:	ea 89       	ldd	r30, Y+18	; 0x12
    209e:	fb 89       	ldd	r31, Y+19	; 0x13
    20a0:	80 81       	ld	r24, Z
    20a2:	8f 7d       	andi	r24, 0xDF	; 223
    20a4:	80 83       	st	Z, r24
}
    20a6:	df 91       	pop	r29
    20a8:	cf 91       	pop	r28
    20aa:	1f 91       	pop	r17
    20ac:	ff 90       	pop	r15
    20ae:	ef 90       	pop	r14
    20b0:	df 90       	pop	r13
    20b2:	cf 90       	pop	r12
    20b4:	08 95       	ret

000020b6 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    20b6:	1f 92       	push	r1
    20b8:	0f 92       	push	r0
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	0f 92       	push	r0
    20be:	11 24       	eor	r1, r1
    20c0:	0b b6       	in	r0, 0x3b	; 59
    20c2:	0f 92       	push	r0
    20c4:	2f 93       	push	r18
    20c6:	8f 93       	push	r24
    20c8:	9f 93       	push	r25
    20ca:	ef 93       	push	r30
    20cc:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    20ce:	e0 91 20 03 	lds	r30, 0x0320	; 0x800320 <Serial+0x10>
    20d2:	f0 91 21 03 	lds	r31, 0x0321	; 0x800321 <Serial+0x11>
    20d6:	80 81       	ld	r24, Z
    20d8:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <Serial+0x16>
    20dc:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <Serial+0x17>
    20e0:	82 fd       	sbrc	r24, 2
    20e2:	12 c0       	rjmp	.+36     	; 0x2108 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    20e4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    20e6:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <Serial+0x19>
    20ea:	8f 5f       	subi	r24, 0xFF	; 255
    20ec:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    20ee:	20 91 2a 03 	lds	r18, 0x032A	; 0x80032a <Serial+0x1a>
    20f2:	82 17       	cp	r24, r18
    20f4:	51 f0       	breq	.+20     	; 0x210a <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    20f6:	e0 91 29 03 	lds	r30, 0x0329	; 0x800329 <Serial+0x19>
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	e0 5f       	subi	r30, 0xF0	; 240
    20fe:	fc 4f       	sbci	r31, 0xFC	; 252
    2100:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2102:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <Serial+0x19>
    2106:	01 c0       	rjmp	.+2      	; 0x210a <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2108:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    210a:	ff 91       	pop	r31
    210c:	ef 91       	pop	r30
    210e:	9f 91       	pop	r25
    2110:	8f 91       	pop	r24
    2112:	2f 91       	pop	r18
    2114:	0f 90       	pop	r0
    2116:	0b be       	out	0x3b, r0	; 59
    2118:	0f 90       	pop	r0
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	0f 90       	pop	r0
    211e:	1f 90       	pop	r1
    2120:	18 95       	reti

00002122 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2122:	1f 92       	push	r1
    2124:	0f 92       	push	r0
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	0f 92       	push	r0
    212a:	11 24       	eor	r1, r1
    212c:	0b b6       	in	r0, 0x3b	; 59
    212e:	0f 92       	push	r0
    2130:	2f 93       	push	r18
    2132:	3f 93       	push	r19
    2134:	4f 93       	push	r20
    2136:	5f 93       	push	r21
    2138:	6f 93       	push	r22
    213a:	7f 93       	push	r23
    213c:	8f 93       	push	r24
    213e:	9f 93       	push	r25
    2140:	af 93       	push	r26
    2142:	bf 93       	push	r27
    2144:	ef 93       	push	r30
    2146:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2148:	80 e1       	ldi	r24, 0x10	; 16
    214a:	93 e0       	ldi	r25, 0x03	; 3
    214c:	c2 de       	rcall	.-636    	; 0x1ed2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    214e:	ff 91       	pop	r31
    2150:	ef 91       	pop	r30
    2152:	bf 91       	pop	r27
    2154:	af 91       	pop	r26
    2156:	9f 91       	pop	r25
    2158:	8f 91       	pop	r24
    215a:	7f 91       	pop	r23
    215c:	6f 91       	pop	r22
    215e:	5f 91       	pop	r21
    2160:	4f 91       	pop	r20
    2162:	3f 91       	pop	r19
    2164:	2f 91       	pop	r18
    2166:	0f 90       	pop	r0
    2168:	0b be       	out	0x3b, r0	; 59
    216a:	0f 90       	pop	r0
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	0f 90       	pop	r0
    2170:	1f 90       	pop	r1
    2172:	18 95       	reti

00002174 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2174:	80 e1       	ldi	r24, 0x10	; 16
    2176:	93 e0       	ldi	r25, 0x03	; 3
    2178:	33 de       	rcall	.-922    	; 0x1de0 <_ZN14HardwareSerial9availableEv>
    217a:	21 e0       	ldi	r18, 0x01	; 1
    217c:	89 2b       	or	r24, r25
    217e:	09 f4       	brne	.+2      	; 0x2182 <_Z17Serial0_availablev+0xe>
    2180:	20 e0       	ldi	r18, 0x00	; 0
}
    2182:	82 2f       	mov	r24, r18
    2184:	08 95       	ret

00002186 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2186:	e0 e1       	ldi	r30, 0x10	; 16
    2188:	f3 e0       	ldi	r31, 0x03	; 3
    218a:	13 82       	std	Z+3, r1	; 0x03
    218c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    218e:	88 ee       	ldi	r24, 0xE8	; 232
    2190:	93 e0       	ldi	r25, 0x03	; 3
    2192:	a0 e0       	ldi	r26, 0x00	; 0
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	84 83       	std	Z+4, r24	; 0x04
    2198:	95 83       	std	Z+5, r25	; 0x05
    219a:	a6 83       	std	Z+6, r26	; 0x06
    219c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    219e:	84 e4       	ldi	r24, 0x44	; 68
    21a0:	92 e0       	ldi	r25, 0x02	; 2
    21a2:	91 83       	std	Z+1, r25	; 0x01
    21a4:	80 83       	st	Z, r24
    21a6:	85 ec       	ldi	r24, 0xC5	; 197
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	95 87       	std	Z+13, r25	; 0x0d
    21ac:	84 87       	std	Z+12, r24	; 0x0c
    21ae:	84 ec       	ldi	r24, 0xC4	; 196
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	97 87       	std	Z+15, r25	; 0x0f
    21b4:	86 87       	std	Z+14, r24	; 0x0e
    21b6:	80 ec       	ldi	r24, 0xC0	; 192
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	91 8b       	std	Z+17, r25	; 0x11
    21bc:	80 8b       	std	Z+16, r24	; 0x10
    21be:	81 ec       	ldi	r24, 0xC1	; 193
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	93 8b       	std	Z+19, r25	; 0x13
    21c4:	82 8b       	std	Z+18, r24	; 0x12
    21c6:	82 ec       	ldi	r24, 0xC2	; 194
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	95 8b       	std	Z+21, r25	; 0x15
    21cc:	84 8b       	std	Z+20, r24	; 0x14
    21ce:	86 ec       	ldi	r24, 0xC6	; 198
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	97 8b       	std	Z+23, r25	; 0x17
    21d4:	86 8b       	std	Z+22, r24	; 0x16
    21d6:	11 8e       	std	Z+25, r1	; 0x19
    21d8:	12 8e       	std	Z+26, r1	; 0x1a
    21da:	13 8e       	std	Z+27, r1	; 0x1b
    21dc:	14 8e       	std	Z+28, r1	; 0x1c
    21de:	08 95       	ret

000021e0 <initVariant>:
    21e0:	08 95       	ret

000021e2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    21e2:	e4 d2       	rcall	.+1480   	; 0x27ac <init>

	initVariant();
    21e4:	fd df       	rcall	.-6      	; 0x21e0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    21e6:	fa d9       	rcall	.-3084   	; 0x15dc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    21e8:	cd e2       	ldi	r28, 0x2D	; 45
    21ea:	df e0       	ldi	r29, 0x0F	; 15
#endif
	
	setup();
    
	for (;;) {
		loop();
    21ec:	2a da       	rcall	.-2988   	; 0x1642 <loop>
		if (serialEventRun) serialEventRun();
    21ee:	20 97       	sbiw	r28, 0x00	; 0
    21f0:	e9 f3       	breq	.-6      	; 0x21ec <main+0xa>
    21f2:	33 de       	rcall	.-922    	; 0x1e5a <_Z14serialEventRunv>
    21f4:	fb cf       	rjmp	.-10     	; 0x21ec <main+0xa>

000021f6 <_ZN5Print5writeEPKhj>:
    21f6:	cf 92       	push	r12
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    21f8:	df 92       	push	r13
    21fa:	ef 92       	push	r14
    21fc:	ff 92       	push	r15
    21fe:	0f 93       	push	r16
    2200:	1f 93       	push	r17
    2202:	cf 93       	push	r28
    2204:	df 93       	push	r29
    2206:	6c 01       	movw	r12, r24
    2208:	7a 01       	movw	r14, r20
    220a:	8b 01       	movw	r16, r22
    220c:	c0 e0       	ldi	r28, 0x00	; 0
    220e:	d0 e0       	ldi	r29, 0x00	; 0
    2210:	ce 15       	cp	r28, r14
    2212:	df 05       	cpc	r29, r15
    2214:	81 f0       	breq	.+32     	; 0x2236 <__stack+0x37>
    2216:	d8 01       	movw	r26, r16
    2218:	6d 91       	ld	r22, X+
    221a:	8d 01       	movw	r16, r26
    221c:	d6 01       	movw	r26, r12
    221e:	ed 91       	ld	r30, X+
    2220:	fc 91       	ld	r31, X
    2222:	01 90       	ld	r0, Z+
    2224:	f0 81       	ld	r31, Z
    2226:	e0 2d       	mov	r30, r0
    2228:	c6 01       	movw	r24, r12
    222a:	19 95       	eicall
    222c:	89 2b       	or	r24, r25
    222e:	11 f0       	breq	.+4      	; 0x2234 <__stack+0x35>
    2230:	21 96       	adiw	r28, 0x01	; 1
    2232:	ee cf       	rjmp	.-36     	; 0x2210 <__stack+0x11>
    2234:	7e 01       	movw	r14, r28
    2236:	c7 01       	movw	r24, r14
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	1f 91       	pop	r17
    223e:	0f 91       	pop	r16
    2240:	ff 90       	pop	r15
    2242:	ef 90       	pop	r14
    2244:	df 90       	pop	r13
    2246:	cf 90       	pop	r12
    2248:	08 95       	ret

0000224a <_ZN5Print5writeEPKc>:
    224a:	61 15       	cp	r22, r1
    224c:	71 05       	cpc	r23, r1
    224e:	79 f0       	breq	.+30     	; 0x226e <_ZN5Print5writeEPKc+0x24>
    2250:	fb 01       	movw	r30, r22
    2252:	01 90       	ld	r0, Z+
    2254:	00 20       	and	r0, r0
    2256:	e9 f7       	brne	.-6      	; 0x2252 <_ZN5Print5writeEPKc+0x8>
    2258:	31 97       	sbiw	r30, 0x01	; 1
    225a:	af 01       	movw	r20, r30
    225c:	46 1b       	sub	r20, r22
    225e:	57 0b       	sbc	r21, r23
    2260:	dc 01       	movw	r26, r24
    2262:	ed 91       	ld	r30, X+
    2264:	fc 91       	ld	r31, X
    2266:	02 80       	ldd	r0, Z+2	; 0x02
    2268:	f3 81       	ldd	r31, Z+3	; 0x03
    226a:	e0 2d       	mov	r30, r0
    226c:	19 94       	eijmp
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	08 95       	ret

00002274 <_ZN5Print5printEPK19__FlashStringHelper>:
    2274:	ef 92       	push	r14
    2276:	ff 92       	push	r15
    2278:	0f 93       	push	r16
    227a:	1f 93       	push	r17
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	8c 01       	movw	r16, r24
    2282:	7b 01       	movw	r14, r22
    2284:	c0 e0       	ldi	r28, 0x00	; 0
    2286:	d0 e0       	ldi	r29, 0x00	; 0
    2288:	f7 01       	movw	r30, r14
    228a:	ec 0f       	add	r30, r28
    228c:	fd 1f       	adc	r31, r29
    228e:	64 91       	lpm	r22, Z
    2290:	66 23       	and	r22, r22
    2292:	61 f0       	breq	.+24     	; 0x22ac <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2294:	d8 01       	movw	r26, r16
    2296:	ed 91       	ld	r30, X+
    2298:	fc 91       	ld	r31, X
    229a:	01 90       	ld	r0, Z+
    229c:	f0 81       	ld	r31, Z
    229e:	e0 2d       	mov	r30, r0
    22a0:	c8 01       	movw	r24, r16
    22a2:	19 95       	eicall
    22a4:	89 2b       	or	r24, r25
    22a6:	11 f0       	breq	.+4      	; 0x22ac <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    22a8:	21 96       	adiw	r28, 0x01	; 1
    22aa:	ee cf       	rjmp	.-36     	; 0x2288 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    22ac:	ce 01       	movw	r24, r28
    22ae:	df 91       	pop	r29
    22b0:	cf 91       	pop	r28
    22b2:	1f 91       	pop	r17
    22b4:	0f 91       	pop	r16
    22b6:	ff 90       	pop	r15
    22b8:	ef 90       	pop	r14
    22ba:	08 95       	ret

000022bc <_ZN5Print5printEPKc>:
    22bc:	c6 cf       	rjmp	.-116    	; 0x224a <_ZN5Print5writeEPKc>

000022be <_ZN5Print5printEc>:
    22be:	dc 01       	movw	r26, r24
    22c0:	ed 91       	ld	r30, X+
    22c2:	fc 91       	ld	r31, X
    22c4:	01 90       	ld	r0, Z+
    22c6:	f0 81       	ld	r31, Z
    22c8:	e0 2d       	mov	r30, r0
    22ca:	19 94       	eijmp

000022cc <_ZN5Print7printlnEv>:
    22cc:	62 e5       	ldi	r22, 0x52	; 82
    22ce:	72 e0       	ldi	r23, 0x02	; 2
    22d0:	bc cf       	rjmp	.-136    	; 0x224a <_ZN5Print5writeEPKc>

000022d2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    22d2:	0f 93       	push	r16
    22d4:	1f 93       	push	r17
    22d6:	cf 93       	push	r28
    22d8:	df 93       	push	r29
    22da:	ec 01       	movw	r28, r24
    22dc:	cb df       	rcall	.-106    	; 0x2274 <_ZN5Print5printEPK19__FlashStringHelper>
    22de:	8c 01       	movw	r16, r24
    22e0:	ce 01       	movw	r24, r28
    22e2:	f4 df       	rcall	.-24     	; 0x22cc <_ZN5Print7printlnEv>
    22e4:	80 0f       	add	r24, r16
    22e6:	91 1f       	adc	r25, r17
    22e8:	df 91       	pop	r29
    22ea:	cf 91       	pop	r28
    22ec:	1f 91       	pop	r17
    22ee:	0f 91       	pop	r16
    22f0:	08 95       	ret

000022f2 <_ZN5Print7printlnEPKc>:
    22f2:	0f 93       	push	r16
    22f4:	1f 93       	push	r17
    22f6:	cf 93       	push	r28
    22f8:	df 93       	push	r29
    22fa:	ec 01       	movw	r28, r24
    22fc:	a6 df       	rcall	.-180    	; 0x224a <_ZN5Print5writeEPKc>
    22fe:	8c 01       	movw	r16, r24
    2300:	ce 01       	movw	r24, r28
    2302:	e4 df       	rcall	.-56     	; 0x22cc <_ZN5Print7printlnEv>
    2304:	80 0f       	add	r24, r16
    2306:	91 1f       	adc	r25, r17
    2308:	df 91       	pop	r29
    230a:	cf 91       	pop	r28
    230c:	1f 91       	pop	r17
    230e:	0f 91       	pop	r16
    2310:	08 95       	ret

00002312 <_ZN5Print11printNumberEmh>:
    2312:	8f 92       	push	r8
    2314:	9f 92       	push	r9
    2316:	af 92       	push	r10
    2318:	bf 92       	push	r11
    231a:	ef 92       	push	r14
    231c:	ff 92       	push	r15
    231e:	0f 93       	push	r16
    2320:	1f 93       	push	r17
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	a1 97       	sbiw	r28, 0x21	; 33
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	f8 94       	cli
    2330:	de bf       	out	0x3e, r29	; 62
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	cd bf       	out	0x3d, r28	; 61
    2336:	7c 01       	movw	r14, r24
    2338:	fa 01       	movw	r30, r20
    233a:	cb 01       	movw	r24, r22
    233c:	19 a2       	std	Y+33, r1	; 0x21
    233e:	22 30       	cpi	r18, 0x02	; 2
    2340:	08 f4       	brcc	.+2      	; 0x2344 <_ZN5Print11printNumberEmh+0x32>
    2342:	2a e0       	ldi	r18, 0x0A	; 10
    2344:	8e 01       	movw	r16, r28
    2346:	0f 5d       	subi	r16, 0xDF	; 223
    2348:	1f 4f       	sbci	r17, 0xFF	; 255
    234a:	82 2e       	mov	r8, r18
    234c:	91 2c       	mov	r9, r1
    234e:	a1 2c       	mov	r10, r1
    2350:	b1 2c       	mov	r11, r1
    2352:	bf 01       	movw	r22, r30
    2354:	a5 01       	movw	r20, r10
    2356:	94 01       	movw	r18, r8
    2358:	4f d3       	rcall	.+1694   	; 0x29f8 <__udivmodsi4>
    235a:	f9 01       	movw	r30, r18
    235c:	ca 01       	movw	r24, r20
    235e:	01 50       	subi	r16, 0x01	; 1
    2360:	11 09       	sbc	r17, r1
    2362:	6a 30       	cpi	r22, 0x0A	; 10
    2364:	10 f4       	brcc	.+4      	; 0x236a <_ZN5Print11printNumberEmh+0x58>
    2366:	60 5d       	subi	r22, 0xD0	; 208
    2368:	01 c0       	rjmp	.+2      	; 0x236c <_ZN5Print11printNumberEmh+0x5a>
    236a:	69 5c       	subi	r22, 0xC9	; 201
    236c:	d8 01       	movw	r26, r16
    236e:	6c 93       	st	X, r22
    2370:	23 2b       	or	r18, r19
    2372:	24 2b       	or	r18, r20
    2374:	25 2b       	or	r18, r21
    2376:	69 f7       	brne	.-38     	; 0x2352 <_ZN5Print11printNumberEmh+0x40>
    2378:	b8 01       	movw	r22, r16
    237a:	c7 01       	movw	r24, r14
    237c:	66 df       	rcall	.-308    	; 0x224a <_ZN5Print5writeEPKc>
    237e:	a1 96       	adiw	r28, 0x21	; 33
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	df 91       	pop	r29
    238c:	cf 91       	pop	r28
    238e:	1f 91       	pop	r17
    2390:	0f 91       	pop	r16
    2392:	ff 90       	pop	r15
    2394:	ef 90       	pop	r14
    2396:	bf 90       	pop	r11
    2398:	af 90       	pop	r10
    239a:	9f 90       	pop	r9
    239c:	8f 90       	pop	r8
    239e:	08 95       	ret

000023a0 <_ZN5Print5printEmi>:
    23a0:	21 15       	cp	r18, r1
    23a2:	31 05       	cpc	r19, r1
    23a4:	41 f4       	brne	.+16     	; 0x23b6 <_ZN5Print5printEmi+0x16>
    23a6:	dc 01       	movw	r26, r24
    23a8:	ed 91       	ld	r30, X+
    23aa:	fc 91       	ld	r31, X
    23ac:	01 90       	ld	r0, Z+
    23ae:	f0 81       	ld	r31, Z
    23b0:	e0 2d       	mov	r30, r0
    23b2:	64 2f       	mov	r22, r20
    23b4:	19 94       	eijmp
    23b6:	ad cf       	rjmp	.-166    	; 0x2312 <_ZN5Print11printNumberEmh>

000023b8 <_ZN5Print5printEji>:
    23b8:	9a 01       	movw	r18, r20
    23ba:	ab 01       	movw	r20, r22
    23bc:	60 e0       	ldi	r22, 0x00	; 0
    23be:	70 e0       	ldi	r23, 0x00	; 0
    23c0:	ef cf       	rjmp	.-34     	; 0x23a0 <_ZN5Print5printEmi>

000023c2 <_ZN5Print5printEli>:
    23c2:	cf 92       	push	r12
    23c4:	df 92       	push	r13
    23c6:	ef 92       	push	r14
    23c8:	ff 92       	push	r15
    23ca:	0f 93       	push	r16
    23cc:	1f 93       	push	r17
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    23d2:	21 15       	cp	r18, r1
    23d4:	31 05       	cpc	r19, r1
    23d6:	81 f4       	brne	.+32     	; 0x23f8 <_ZN5Print5printEli+0x36>
    23d8:	dc 01       	movw	r26, r24
    23da:	ed 91       	ld	r30, X+
    23dc:	fc 91       	ld	r31, X
    23de:	01 90       	ld	r0, Z+
    23e0:	f0 81       	ld	r31, Z
    23e2:	e0 2d       	mov	r30, r0
    23e4:	64 2f       	mov	r22, r20
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	1f 91       	pop	r17
    23ec:	0f 91       	pop	r16
    23ee:	ff 90       	pop	r15
    23f0:	ef 90       	pop	r14
    23f2:	df 90       	pop	r13
    23f4:	cf 90       	pop	r12
    23f6:	19 94       	eijmp
    23f8:	2a 30       	cpi	r18, 0x0A	; 10
    23fa:	31 05       	cpc	r19, r1
    23fc:	f1 f4       	brne	.+60     	; 0x243a <_ZN5Print5printEli+0x78>
    23fe:	77 ff       	sbrs	r23, 7
    2400:	1b c0       	rjmp	.+54     	; 0x2438 <_ZN5Print5printEli+0x76>
    2402:	6a 01       	movw	r12, r20
    2404:	7b 01       	movw	r14, r22
    2406:	ec 01       	movw	r28, r24
    2408:	6d e2       	ldi	r22, 0x2D	; 45
    240a:	59 df       	rcall	.-334    	; 0x22be <_ZN5Print5printEc>
    240c:	8c 01       	movw	r16, r24
    240e:	44 27       	eor	r20, r20
    2410:	55 27       	eor	r21, r21
    2412:	ba 01       	movw	r22, r20
    2414:	4c 19       	sub	r20, r12
    2416:	5d 09       	sbc	r21, r13
    2418:	6e 09       	sbc	r22, r14
    241a:	7f 09       	sbc	r23, r15
    241c:	2a e0       	ldi	r18, 0x0A	; 10
    241e:	ce 01       	movw	r24, r28
    2420:	78 df       	rcall	.-272    	; 0x2312 <_ZN5Print11printNumberEmh>
    2422:	80 0f       	add	r24, r16
    2424:	91 1f       	adc	r25, r17
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	1f 91       	pop	r17
    242c:	0f 91       	pop	r16
    242e:	ff 90       	pop	r15
    2430:	ef 90       	pop	r14
    2432:	df 90       	pop	r13
    2434:	cf 90       	pop	r12
    2436:	08 95       	ret
    2438:	2a e0       	ldi	r18, 0x0A	; 10
    243a:	df 91       	pop	r29
    243c:	cf 91       	pop	r28
    243e:	1f 91       	pop	r17
    2440:	0f 91       	pop	r16
    2442:	ff 90       	pop	r15
    2444:	ef 90       	pop	r14
    2446:	df 90       	pop	r13
    2448:	cf 90       	pop	r12
    244a:	63 cf       	rjmp	.-314    	; 0x2312 <_ZN5Print11printNumberEmh>

0000244c <_ZN5Print5printEii>:
    244c:	9a 01       	movw	r18, r20
    244e:	ab 01       	movw	r20, r22
    2450:	77 0f       	add	r23, r23
    2452:	66 0b       	sbc	r22, r22
    2454:	77 0b       	sbc	r23, r23
    2456:	b5 cf       	rjmp	.-150    	; 0x23c2 <_ZN5Print5printEli>

00002458 <_ZN5Print7printlnEii>:
    2458:	0f 93       	push	r16
    245a:	1f 93       	push	r17
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	ec 01       	movw	r28, r24
    2462:	f4 df       	rcall	.-24     	; 0x244c <_ZN5Print5printEii>
    2464:	8c 01       	movw	r16, r24
    2466:	ce 01       	movw	r24, r28
    2468:	31 df       	rcall	.-414    	; 0x22cc <_ZN5Print7printlnEv>
    246a:	80 0f       	add	r24, r16
    246c:	91 1f       	adc	r25, r17
    246e:	df 91       	pop	r29
    2470:	cf 91       	pop	r28
    2472:	1f 91       	pop	r17
    2474:	0f 91       	pop	r16
    2476:	08 95       	ret

00002478 <_ZN5Print7printlnEli>:
    2478:	0f 93       	push	r16
    247a:	1f 93       	push	r17
    247c:	cf 93       	push	r28
    247e:	df 93       	push	r29
    2480:	ec 01       	movw	r28, r24
    2482:	9f df       	rcall	.-194    	; 0x23c2 <_ZN5Print5printEli>
    2484:	8c 01       	movw	r16, r24
    2486:	ce 01       	movw	r24, r28
    2488:	21 df       	rcall	.-446    	; 0x22cc <_ZN5Print7printlnEv>
    248a:	80 0f       	add	r24, r16
    248c:	91 1f       	adc	r25, r17
    248e:	df 91       	pop	r29
    2490:	cf 91       	pop	r28
    2492:	1f 91       	pop	r17
    2494:	0f 91       	pop	r16
    2496:	08 95       	ret

00002498 <_ZN5Print10printFloatEdh>:
    2498:	7f 92       	push	r7
    249a:	8f 92       	push	r8
    249c:	9f 92       	push	r9
    249e:	af 92       	push	r10
    24a0:	bf 92       	push	r11
    24a2:	cf 92       	push	r12
    24a4:	df 92       	push	r13
    24a6:	ef 92       	push	r14
    24a8:	ff 92       	push	r15
    24aa:	0f 93       	push	r16
    24ac:	1f 93       	push	r17
    24ae:	cf 93       	push	r28
    24b0:	df 93       	push	r29
    24b2:	8c 01       	movw	r16, r24
    24b4:	6a 01       	movw	r12, r20
    24b6:	7b 01       	movw	r14, r22
    24b8:	72 2e       	mov	r7, r18
    24ba:	9a 01       	movw	r18, r20
    24bc:	ab 01       	movw	r20, r22
    24be:	c7 01       	movw	r24, r14
    24c0:	b6 01       	movw	r22, r12
    24c2:	96 d2       	rcall	.+1324   	; 0x29f0 <__unordsf2>
    24c4:	88 23       	and	r24, r24
    24c6:	19 f0       	breq	.+6      	; 0x24ce <_ZN5Print10printFloatEdh+0x36>
    24c8:	65 e5       	ldi	r22, 0x55	; 85
    24ca:	72 e0       	ldi	r23, 0x02	; 2
    24cc:	24 c0       	rjmp	.+72     	; 0x2516 <_ZN5Print10printFloatEdh+0x7e>
    24ce:	46 01       	movw	r8, r12
    24d0:	57 01       	movw	r10, r14
    24d2:	e8 94       	clt
    24d4:	b7 f8       	bld	r11, 7
    24d6:	2f ef       	ldi	r18, 0xFF	; 255
    24d8:	3f ef       	ldi	r19, 0xFF	; 255
    24da:	4f e7       	ldi	r20, 0x7F	; 127
    24dc:	5f e7       	ldi	r21, 0x7F	; 127
    24de:	c5 01       	movw	r24, r10
    24e0:	b4 01       	movw	r22, r8
    24e2:	86 d2       	rcall	.+1292   	; 0x29f0 <__unordsf2>
    24e4:	81 11       	cpse	r24, r1
    24e6:	0c c0       	rjmp	.+24     	; 0x2500 <_ZN5Print10printFloatEdh+0x68>
    24e8:	2f ef       	ldi	r18, 0xFF	; 255
    24ea:	3f ef       	ldi	r19, 0xFF	; 255
    24ec:	4f e7       	ldi	r20, 0x7F	; 127
    24ee:	5f e7       	ldi	r21, 0x7F	; 127
    24f0:	c5 01       	movw	r24, r10
    24f2:	b4 01       	movw	r22, r8
    24f4:	b4 d9       	rcall	.-3224   	; 0x185e <__cmpsf2>
    24f6:	18 16       	cp	r1, r24
    24f8:	1c f4       	brge	.+6      	; 0x2500 <_ZN5Print10printFloatEdh+0x68>
    24fa:	69 e5       	ldi	r22, 0x59	; 89
    24fc:	72 e0       	ldi	r23, 0x02	; 2
    24fe:	0b c0       	rjmp	.+22     	; 0x2516 <_ZN5Print10printFloatEdh+0x7e>
    2500:	2f ef       	ldi	r18, 0xFF	; 255
    2502:	3f ef       	ldi	r19, 0xFF	; 255
    2504:	4f e7       	ldi	r20, 0x7F	; 127
    2506:	5f e4       	ldi	r21, 0x4F	; 79
    2508:	c7 01       	movw	r24, r14
    250a:	b6 01       	movw	r22, r12
    250c:	98 db       	rcall	.-2256   	; 0x1c3e <__gesf2>
    250e:	18 16       	cp	r1, r24
    2510:	8c f4       	brge	.+34     	; 0x2534 <_ZN5Print10printFloatEdh+0x9c>
    2512:	6d e5       	ldi	r22, 0x5D	; 93
    2514:	72 e0       	ldi	r23, 0x02	; 2
    2516:	c8 01       	movw	r24, r16
    2518:	df 91       	pop	r29
    251a:	cf 91       	pop	r28
    251c:	1f 91       	pop	r17
    251e:	0f 91       	pop	r16
    2520:	ff 90       	pop	r15
    2522:	ef 90       	pop	r14
    2524:	df 90       	pop	r13
    2526:	cf 90       	pop	r12
    2528:	bf 90       	pop	r11
    252a:	af 90       	pop	r10
    252c:	9f 90       	pop	r9
    252e:	8f 90       	pop	r8
    2530:	7f 90       	pop	r7
    2532:	8b ce       	rjmp	.-746    	; 0x224a <_ZN5Print5writeEPKc>
    2534:	2f ef       	ldi	r18, 0xFF	; 255
    2536:	3f ef       	ldi	r19, 0xFF	; 255
    2538:	4f e7       	ldi	r20, 0x7F	; 127
    253a:	5f ec       	ldi	r21, 0xCF	; 207
    253c:	c7 01       	movw	r24, r14
    253e:	b6 01       	movw	r22, r12
    2540:	8e d9       	rcall	.-3300   	; 0x185e <__cmpsf2>
    2542:	87 fd       	sbrc	r24, 7
    2544:	e6 cf       	rjmp	.-52     	; 0x2512 <_ZN5Print10printFloatEdh+0x7a>
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	a9 01       	movw	r20, r18
    254c:	c7 01       	movw	r24, r14
    254e:	b6 01       	movw	r22, r12
    2550:	86 d9       	rcall	.-3316   	; 0x185e <__cmpsf2>
    2552:	87 ff       	sbrs	r24, 7
    2554:	09 c0       	rjmp	.+18     	; 0x2568 <_ZN5Print10printFloatEdh+0xd0>
    2556:	6d e2       	ldi	r22, 0x2D	; 45
    2558:	c8 01       	movw	r24, r16
    255a:	b1 de       	rcall	.-670    	; 0x22be <_ZN5Print5printEc>
    255c:	ec 01       	movw	r28, r24
    255e:	f7 fa       	bst	r15, 7
    2560:	f0 94       	com	r15
    2562:	f7 f8       	bld	r15, 7
    2564:	f0 94       	com	r15
    2566:	02 c0       	rjmp	.+4      	; 0x256c <_ZN5Print10printFloatEdh+0xd4>
    2568:	c0 e0       	ldi	r28, 0x00	; 0
    256a:	d0 e0       	ldi	r29, 0x00	; 0
    256c:	b1 2c       	mov	r11, r1
    256e:	60 e0       	ldi	r22, 0x00	; 0
    2570:	70 e0       	ldi	r23, 0x00	; 0
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	9f e3       	ldi	r25, 0x3F	; 63
    2576:	7b 14       	cp	r7, r11
    2578:	39 f0       	breq	.+14     	; 0x2588 <_ZN5Print10printFloatEdh+0xf0>
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e2       	ldi	r20, 0x20	; 32
    2580:	51 e4       	ldi	r21, 0x41	; 65
    2582:	74 d9       	rcall	.-3352   	; 0x186c <__divsf3>
    2584:	b3 94       	inc	r11
    2586:	f7 cf       	rjmp	.-18     	; 0x2576 <_ZN5Print10printFloatEdh+0xde>
    2588:	a7 01       	movw	r20, r14
    258a:	96 01       	movw	r18, r12
    258c:	8f d8       	rcall	.-3810   	; 0x16ac <__addsf3>
    258e:	6b 01       	movw	r12, r22
    2590:	7c 01       	movw	r14, r24
    2592:	d9 d9       	rcall	.-3150   	; 0x1946 <__fixunssfsi>
    2594:	4b 01       	movw	r8, r22
    2596:	5c 01       	movw	r10, r24
    2598:	2a e0       	ldi	r18, 0x0A	; 10
    259a:	ab 01       	movw	r20, r22
    259c:	bc 01       	movw	r22, r24
    259e:	c8 01       	movw	r24, r16
    25a0:	b8 de       	rcall	.-656    	; 0x2312 <_ZN5Print11printNumberEmh>
    25a2:	c8 0f       	add	r28, r24
    25a4:	d9 1f       	adc	r29, r25
    25a6:	77 20       	and	r7, r7
    25a8:	79 f1       	breq	.+94     	; 0x2608 <_ZN5Print10printFloatEdh+0x170>
    25aa:	c5 01       	movw	r24, r10
    25ac:	b4 01       	movw	r22, r8
    25ae:	f7 d9       	rcall	.-3090   	; 0x199e <__floatunsisf>
    25b0:	9b 01       	movw	r18, r22
    25b2:	ac 01       	movw	r20, r24
    25b4:	c7 01       	movw	r24, r14
    25b6:	b6 01       	movw	r22, r12
    25b8:	78 d8       	rcall	.-3856   	; 0x16aa <__subsf3>
    25ba:	6b 01       	movw	r12, r22
    25bc:	7c 01       	movw	r14, r24
    25be:	6e e2       	ldi	r22, 0x2E	; 46
    25c0:	c8 01       	movw	r24, r16
    25c2:	7d de       	rcall	.-774    	; 0x22be <_ZN5Print5printEc>
    25c4:	c8 0f       	add	r28, r24
    25c6:	d9 1f       	adc	r29, r25
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e2       	ldi	r20, 0x20	; 32
    25ce:	51 e4       	ldi	r21, 0x41	; 65
    25d0:	c7 01       	movw	r24, r14
    25d2:	b6 01       	movw	r22, r12
    25d4:	3f db       	rcall	.-2434   	; 0x1c54 <__mulsf3>
    25d6:	4b 01       	movw	r8, r22
    25d8:	5c 01       	movw	r10, r24
    25da:	b5 d9       	rcall	.-3222   	; 0x1946 <__fixunssfsi>
    25dc:	6b 01       	movw	r12, r22
    25de:	7c 01       	movw	r14, r24
    25e0:	4a e0       	ldi	r20, 0x0A	; 10
    25e2:	50 e0       	ldi	r21, 0x00	; 0
    25e4:	c8 01       	movw	r24, r16
    25e6:	e8 de       	rcall	.-560    	; 0x23b8 <_ZN5Print5printEji>
    25e8:	c8 0f       	add	r28, r24
    25ea:	d9 1f       	adc	r29, r25
    25ec:	b6 01       	movw	r22, r12
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	d5 d9       	rcall	.-3158   	; 0x199e <__floatunsisf>
    25f4:	9b 01       	movw	r18, r22
    25f6:	ac 01       	movw	r20, r24
    25f8:	c5 01       	movw	r24, r10
    25fa:	b4 01       	movw	r22, r8
    25fc:	56 d8       	rcall	.-3924   	; 0x16aa <__subsf3>
    25fe:	6b 01       	movw	r12, r22
    2600:	7c 01       	movw	r14, r24
    2602:	7a 94       	dec	r7
    2604:	71 10       	cpse	r7, r1
    2606:	e0 cf       	rjmp	.-64     	; 0x25c8 <_ZN5Print10printFloatEdh+0x130>
    2608:	ce 01       	movw	r24, r28
    260a:	df 91       	pop	r29
    260c:	cf 91       	pop	r28
    260e:	1f 91       	pop	r17
    2610:	0f 91       	pop	r16
    2612:	ff 90       	pop	r15
    2614:	ef 90       	pop	r14
    2616:	df 90       	pop	r13
    2618:	cf 90       	pop	r12
    261a:	bf 90       	pop	r11
    261c:	af 90       	pop	r10
    261e:	9f 90       	pop	r9
    2620:	8f 90       	pop	r8
    2622:	7f 90       	pop	r7
    2624:	08 95       	ret

00002626 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    2626:	0f 93       	push	r16
    2628:	1f 93       	push	r17
    262a:	cf 93       	push	r28
    262c:	df 93       	push	r29
    262e:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2630:	33 df       	rcall	.-410    	; 0x2498 <_ZN5Print10printFloatEdh>
    2632:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    2634:	ce 01       	movw	r24, r28
    2636:	4a de       	rcall	.-876    	; 0x22cc <_ZN5Print7printlnEv>
  return n;
}
    2638:	80 0f       	add	r24, r16
    263a:	91 1f       	adc	r25, r17
    263c:	df 91       	pop	r29
    263e:	cf 91       	pop	r28
    2640:	1f 91       	pop	r17
    2642:	0f 91       	pop	r16
    2644:	08 95       	ret

00002646 <__vector_23>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    2646:	1f 92       	push	r1
    2648:	0f 92       	push	r0
    264a:	0f b6       	in	r0, 0x3f	; 63
    264c:	0f 92       	push	r0
    264e:	11 24       	eor	r1, r1
    2650:	2f 93       	push	r18
    2652:	3f 93       	push	r19
    2654:	8f 93       	push	r24
    2656:	9f 93       	push	r25
    2658:	af 93       	push	r26
    265a:	bf 93       	push	r27
    265c:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <timer0_millis>
    2660:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <timer0_millis+0x1>
    2664:	a0 91 b0 03 	lds	r26, 0x03B0	; 0x8003b0 <timer0_millis+0x2>
    2668:	b0 91 b1 03 	lds	r27, 0x03B1	; 0x8003b1 <timer0_millis+0x3>
    266c:	30 91 ad 03 	lds	r19, 0x03AD	; 0x8003ad <timer0_fract>
    2670:	23 e0       	ldi	r18, 0x03	; 3
    2672:	23 0f       	add	r18, r19
    2674:	2d 37       	cpi	r18, 0x7D	; 125
    2676:	20 f4       	brcc	.+8      	; 0x2680 <__vector_23+0x3a>
    2678:	01 96       	adiw	r24, 0x01	; 1
    267a:	a1 1d       	adc	r26, r1
    267c:	b1 1d       	adc	r27, r1
    267e:	05 c0       	rjmp	.+10     	; 0x268a <__vector_23+0x44>
    2680:	26 e8       	ldi	r18, 0x86	; 134
    2682:	23 0f       	add	r18, r19
    2684:	02 96       	adiw	r24, 0x02	; 2
    2686:	a1 1d       	adc	r26, r1
    2688:	b1 1d       	adc	r27, r1
    268a:	20 93 ad 03 	sts	0x03AD, r18	; 0x8003ad <timer0_fract>
    268e:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <timer0_millis>
    2692:	90 93 af 03 	sts	0x03AF, r25	; 0x8003af <timer0_millis+0x1>
    2696:	a0 93 b0 03 	sts	0x03B0, r26	; 0x8003b0 <timer0_millis+0x2>
    269a:	b0 93 b1 03 	sts	0x03B1, r27	; 0x8003b1 <timer0_millis+0x3>
    269e:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <timer0_overflow_count>
    26a2:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <timer0_overflow_count+0x1>
    26a6:	a0 91 b4 03 	lds	r26, 0x03B4	; 0x8003b4 <timer0_overflow_count+0x2>
    26aa:	b0 91 b5 03 	lds	r27, 0x03B5	; 0x8003b5 <timer0_overflow_count+0x3>
    26ae:	01 96       	adiw	r24, 0x01	; 1
    26b0:	a1 1d       	adc	r26, r1
    26b2:	b1 1d       	adc	r27, r1
    26b4:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <timer0_overflow_count>
    26b8:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <timer0_overflow_count+0x1>
    26bc:	a0 93 b4 03 	sts	0x03B4, r26	; 0x8003b4 <timer0_overflow_count+0x2>
    26c0:	b0 93 b5 03 	sts	0x03B5, r27	; 0x8003b5 <timer0_overflow_count+0x3>
    26c4:	bf 91       	pop	r27
    26c6:	af 91       	pop	r26
    26c8:	9f 91       	pop	r25
    26ca:	8f 91       	pop	r24
    26cc:	3f 91       	pop	r19
    26ce:	2f 91       	pop	r18
    26d0:	0f 90       	pop	r0
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	0f 90       	pop	r0
    26d6:	1f 90       	pop	r1
    26d8:	18 95       	reti

000026da <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    26da:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    26dc:	f8 94       	cli
	m = timer0_overflow_count;
    26de:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <timer0_overflow_count>
    26e2:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <timer0_overflow_count+0x1>
    26e6:	a0 91 b4 03 	lds	r26, 0x03B4	; 0x8003b4 <timer0_overflow_count+0x2>
    26ea:	b0 91 b5 03 	lds	r27, 0x03B5	; 0x8003b5 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    26ee:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    26f0:	a8 9b       	sbis	0x15, 0	; 21
    26f2:	05 c0       	rjmp	.+10     	; 0x26fe <micros+0x24>
    26f4:	2f 3f       	cpi	r18, 0xFF	; 255
    26f6:	19 f0       	breq	.+6      	; 0x26fe <micros+0x24>
		m++;
    26f8:	01 96       	adiw	r24, 0x01	; 1
    26fa:	a1 1d       	adc	r26, r1
    26fc:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    26fe:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2700:	ba 2f       	mov	r27, r26
    2702:	a9 2f       	mov	r26, r25
    2704:	98 2f       	mov	r25, r24
    2706:	88 27       	eor	r24, r24
    2708:	82 0f       	add	r24, r18
    270a:	91 1d       	adc	r25, r1
    270c:	a1 1d       	adc	r26, r1
    270e:	b1 1d       	adc	r27, r1
    2710:	bc 01       	movw	r22, r24
    2712:	cd 01       	movw	r24, r26
    2714:	42 e0       	ldi	r20, 0x02	; 2
    2716:	66 0f       	add	r22, r22
    2718:	77 1f       	adc	r23, r23
    271a:	88 1f       	adc	r24, r24
    271c:	99 1f       	adc	r25, r25
    271e:	4a 95       	dec	r20
    2720:	d1 f7       	brne	.-12     	; 0x2716 <micros+0x3c>
}
    2722:	08 95       	ret

00002724 <delay>:

void delay(unsigned long ms)
{
    2724:	8f 92       	push	r8
    2726:	9f 92       	push	r9
    2728:	af 92       	push	r10
    272a:	bf 92       	push	r11
    272c:	cf 92       	push	r12
    272e:	df 92       	push	r13
    2730:	ef 92       	push	r14
    2732:	ff 92       	push	r15
    2734:	6b 01       	movw	r12, r22
    2736:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2738:	d0 df       	rcall	.-96     	; 0x26da <micros>
    273a:	4b 01       	movw	r8, r22
    273c:	5c 01       	movw	r10, r24

	while (ms > 0) {
    273e:	c1 14       	cp	r12, r1
    2740:	d1 04       	cpc	r13, r1
    2742:	e1 04       	cpc	r14, r1
    2744:	f1 04       	cpc	r15, r1
		yield();
    2746:	f1 f0       	breq	.+60     	; 0x2784 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2748:	52 d1       	rcall	.+676    	; 0x29ee <yield>
    274a:	c7 df       	rcall	.-114    	; 0x26da <micros>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	88 19       	sub	r24, r8
    2752:	99 09       	sbc	r25, r9
    2754:	aa 09       	sbc	r26, r10
    2756:	bb 09       	sbc	r27, r11
    2758:	88 3e       	cpi	r24, 0xE8	; 232
    275a:	93 40       	sbci	r25, 0x03	; 3
    275c:	a1 05       	cpc	r26, r1
    275e:	b1 05       	cpc	r27, r1
    2760:	70 f3       	brcs	.-36     	; 0x273e <delay+0x1a>
			ms--;
    2762:	21 e0       	ldi	r18, 0x01	; 1
    2764:	c2 1a       	sub	r12, r18
    2766:	d1 08       	sbc	r13, r1
    2768:	e1 08       	sbc	r14, r1
    276a:	f1 08       	sbc	r15, r1
			start += 1000;
    276c:	88 ee       	ldi	r24, 0xE8	; 232
    276e:	88 0e       	add	r8, r24
    2770:	83 e0       	ldi	r24, 0x03	; 3
    2772:	98 1e       	adc	r9, r24
    2774:	a1 1c       	adc	r10, r1
    2776:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2778:	c1 14       	cp	r12, r1
    277a:	d1 04       	cpc	r13, r1
    277c:	e1 04       	cpc	r14, r1
    277e:	f1 04       	cpc	r15, r1
    2780:	21 f7       	brne	.-56     	; 0x274a <delay+0x26>
    2782:	dd cf       	rjmp	.-70     	; 0x273e <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    2784:	ff 90       	pop	r15
    2786:	ef 90       	pop	r14
    2788:	df 90       	pop	r13
    278a:	cf 90       	pop	r12
    278c:	bf 90       	pop	r11
    278e:	af 90       	pop	r10
    2790:	9f 90       	pop	r9
    2792:	8f 90       	pop	r8
    2794:	08 95       	ret

00002796 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2796:	82 30       	cpi	r24, 0x02	; 2
    2798:	91 05       	cpc	r25, r1
    279a:	38 f0       	brcs	.+14     	; 0x27aa <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	88 0f       	add	r24, r24
    27a2:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    27a4:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	f1 f7       	brne	.-4      	; 0x27a6 <delayMicroseconds+0x10>
    27aa:	08 95       	ret

000027ac <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    27ac:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    27ae:	84 b5       	in	r24, 0x24	; 36
    27b0:	82 60       	ori	r24, 0x02	; 2
    27b2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    27b4:	84 b5       	in	r24, 0x24	; 36
    27b6:	81 60       	ori	r24, 0x01	; 1
    27b8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    27ba:	85 b5       	in	r24, 0x25	; 37
    27bc:	82 60       	ori	r24, 0x02	; 2
    27be:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    27c0:	85 b5       	in	r24, 0x25	; 37
    27c2:	81 60       	ori	r24, 0x01	; 1
    27c4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    27c6:	ee e6       	ldi	r30, 0x6E	; 110
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	81 60       	ori	r24, 0x01	; 1
    27ce:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    27d0:	e1 e8       	ldi	r30, 0x81	; 129
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    27d6:	80 81       	ld	r24, Z
    27d8:	82 60       	ori	r24, 0x02	; 2
    27da:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    27dc:	80 81       	ld	r24, Z
    27de:	81 60       	ori	r24, 0x01	; 1
    27e0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    27e2:	e0 e8       	ldi	r30, 0x80	; 128
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	81 60       	ori	r24, 0x01	; 1
    27ea:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    27ec:	e1 eb       	ldi	r30, 0xB1	; 177
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	84 60       	ori	r24, 0x04	; 4
    27f4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    27f6:	e0 eb       	ldi	r30, 0xB0	; 176
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	81 60       	ori	r24, 0x01	; 1
    27fe:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    2800:	e1 e9       	ldi	r30, 0x91	; 145
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	82 60       	ori	r24, 0x02	; 2
    2808:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    280a:	80 81       	ld	r24, Z
    280c:	81 60       	ori	r24, 0x01	; 1
    280e:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2810:	e0 e9       	ldi	r30, 0x90	; 144
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	81 60       	ori	r24, 0x01	; 1
    2818:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    281a:	e1 ea       	ldi	r30, 0xA1	; 161
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	82 60       	ori	r24, 0x02	; 2
    2822:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    2824:	80 81       	ld	r24, Z
    2826:	81 60       	ori	r24, 0x01	; 1
    2828:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    282a:	e0 ea       	ldi	r30, 0xA0	; 160
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	81 60       	ori	r24, 0x01	; 1
    2832:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    2834:	e1 e2       	ldi	r30, 0x21	; 33
    2836:	f1 e0       	ldi	r31, 0x01	; 1
    2838:	80 81       	ld	r24, Z
    283a:	82 60       	ori	r24, 0x02	; 2
    283c:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    283e:	80 81       	ld	r24, Z
    2840:	81 60       	ori	r24, 0x01	; 1
    2842:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    2844:	e0 e2       	ldi	r30, 0x20	; 32
    2846:	f1 e0       	ldi	r31, 0x01	; 1
    2848:	80 81       	ld	r24, Z
    284a:	81 60       	ori	r24, 0x01	; 1
    284c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    284e:	ea e7       	ldi	r30, 0x7A	; 122
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	84 60       	ori	r24, 0x04	; 4
    2856:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2858:	80 81       	ld	r24, Z
    285a:	82 60       	ori	r24, 0x02	; 2
    285c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    285e:	80 81       	ld	r24, Z
    2860:	81 60       	ori	r24, 0x01	; 1
    2862:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2864:	80 81       	ld	r24, Z
    2866:	80 68       	ori	r24, 0x80	; 128
    2868:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    286a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    286e:	08 95       	ret

00002870 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	fc 01       	movw	r30, r24
    2874:	31 97       	sbiw	r30, 0x01	; 1
    2876:	e2 31       	cpi	r30, 0x12	; 18
    2878:	f1 05       	cpc	r31, r1
    287a:	08 f0       	brcs	.+2      	; 0x287e <turnOffPWM+0xe>
    287c:	4d c0       	rjmp	.+154    	; 0x2918 <turnOffPWM+0xa8>
    287e:	88 27       	eor	r24, r24
    2880:	e8 56       	subi	r30, 0x68	; 104
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	8f 4f       	sbci	r24, 0xFF	; 255
    2886:	f6 c0       	rjmp	.+492    	; 0x2a74 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2888:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    288c:	8f 77       	andi	r24, 0x7F	; 127
    288e:	03 c0       	rjmp	.+6      	; 0x2896 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2890:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2894:	8f 7d       	andi	r24, 0xDF	; 223
    2896:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    289a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    289c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    28a0:	87 7f       	andi	r24, 0xF7	; 247
    28a2:	f9 cf       	rjmp	.-14     	; 0x2896 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    28a4:	84 b5       	in	r24, 0x24	; 36
    28a6:	8f 77       	andi	r24, 0x7F	; 127
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    28aa:	84 b5       	in	r24, 0x24	; 36
    28ac:	8f 7d       	andi	r24, 0xDF	; 223
    28ae:	84 bd       	out	0x24, r24	; 36
    28b0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    28b2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    28b6:	8f 77       	andi	r24, 0x7F	; 127
    28b8:	03 c0       	rjmp	.+6      	; 0x28c0 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    28ba:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    28be:	8f 7d       	andi	r24, 0xDF	; 223
    28c0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    28c4:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    28c6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    28ca:	8f 77       	andi	r24, 0x7F	; 127
    28cc:	07 c0       	rjmp	.+14     	; 0x28dc <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    28ce:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    28d2:	8f 7d       	andi	r24, 0xDF	; 223
    28d4:	03 c0       	rjmp	.+6      	; 0x28dc <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    28d6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    28da:	87 7f       	andi	r24, 0xF7	; 247
    28dc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    28e0:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    28e2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    28e6:	8f 77       	andi	r24, 0x7F	; 127
    28e8:	07 c0       	rjmp	.+14     	; 0x28f8 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    28ea:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    28ee:	8f 7d       	andi	r24, 0xDF	; 223
    28f0:	03 c0       	rjmp	.+6      	; 0x28f8 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    28f2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    28f6:	87 7f       	andi	r24, 0xF7	; 247
    28f8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    28fc:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    28fe:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2902:	8f 77       	andi	r24, 0x7F	; 127
    2904:	07 c0       	rjmp	.+14     	; 0x2914 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    2906:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    290a:	8f 7d       	andi	r24, 0xDF	; 223
    290c:	03 c0       	rjmp	.+6      	; 0x2914 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    290e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2912:	87 7f       	andi	r24, 0xF7	; 247
    2914:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2918:	08 95       	ret

0000291a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    291a:	cf 93       	push	r28
    291c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	fc 01       	movw	r30, r24
    2922:	ec 57       	subi	r30, 0x7C	; 124
    2924:	fc 4f       	sbci	r31, 0xFC	; 252
    2926:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2928:	fc 01       	movw	r30, r24
    292a:	e6 53       	subi	r30, 0x36	; 54
    292c:	fc 4f       	sbci	r31, 0xFC	; 252
    292e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2930:	88 23       	and	r24, r24
    2932:	61 f1       	breq	.+88     	; 0x298c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	88 0f       	add	r24, r24
    2938:	99 1f       	adc	r25, r25
    293a:	fc 01       	movw	r30, r24
    293c:	e6 5d       	subi	r30, 0xD6	; 214
    293e:	fb 4f       	sbci	r31, 0xFB	; 251
    2940:	c5 91       	lpm	r28, Z+
    2942:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2944:	fc 01       	movw	r30, r24
    2946:	e0 5f       	subi	r30, 0xF0	; 240
    2948:	fb 4f       	sbci	r31, 0xFB	; 251
    294a:	a5 91       	lpm	r26, Z+
    294c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    294e:	61 11       	cpse	r22, r1
    2950:	09 c0       	rjmp	.+18     	; 0x2964 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2952:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2954:	f8 94       	cli
		*reg &= ~bit;
    2956:	88 81       	ld	r24, Y
    2958:	20 95       	com	r18
    295a:	82 23       	and	r24, r18
    295c:	88 83       	st	Y, r24
		*out &= ~bit;
    295e:	ec 91       	ld	r30, X
    2960:	2e 23       	and	r18, r30
    2962:	0b c0       	rjmp	.+22     	; 0x297a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2964:	62 30       	cpi	r22, 0x02	; 2
    2966:	61 f4       	brne	.+24     	; 0x2980 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2968:	9f b7       	in	r25, 0x3f	; 63
                cli();
    296a:	f8 94       	cli
		*reg &= ~bit;
    296c:	88 81       	ld	r24, Y
    296e:	32 2f       	mov	r19, r18
    2970:	30 95       	com	r19
    2972:	83 23       	and	r24, r19
    2974:	88 83       	st	Y, r24
		*out |= bit;
    2976:	ec 91       	ld	r30, X
    2978:	2e 2b       	or	r18, r30
    297a:	2c 93       	st	X, r18
		SREG = oldSREG;
    297c:	9f bf       	out	0x3f, r25	; 63
    297e:	06 c0       	rjmp	.+12     	; 0x298c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2980:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2982:	f8 94       	cli
		*reg |= bit;
    2984:	e8 81       	ld	r30, Y
    2986:	2e 2b       	or	r18, r30
    2988:	28 83       	st	Y, r18
		SREG = oldSREG;
    298a:	8f bf       	out	0x3f, r24	; 63
	}
}
    298c:	df 91       	pop	r29
    298e:	cf 91       	pop	r28
    2990:	08 95       	ret

00002992 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2998:	28 2f       	mov	r18, r24
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	f9 01       	movw	r30, r18
    299e:	e2 5c       	subi	r30, 0xC2	; 194
    29a0:	fc 4f       	sbci	r31, 0xFC	; 252
    29a2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    29a4:	f9 01       	movw	r30, r18
    29a6:	ec 57       	subi	r30, 0x7C	; 124
    29a8:	fc 4f       	sbci	r31, 0xFC	; 252
    29aa:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    29ac:	f9 01       	movw	r30, r18
    29ae:	e6 53       	subi	r30, 0x36	; 54
    29b0:	fc 4f       	sbci	r31, 0xFC	; 252
    29b2:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    29b4:	cc 23       	and	r28, r28
    29b6:	b9 f0       	breq	.+46     	; 0x29e6 <digitalWrite+0x54>
    29b8:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    29ba:	81 11       	cpse	r24, r1
    29bc:	59 df       	rcall	.-334    	; 0x2870 <turnOffPWM>

	out = portOutputRegister(port);
    29be:	ec 2f       	mov	r30, r28
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	ee 0f       	add	r30, r30
    29c4:	ff 1f       	adc	r31, r31
    29c6:	e0 5f       	subi	r30, 0xF0	; 240
    29c8:	fb 4f       	sbci	r31, 0xFB	; 251
    29ca:	a5 91       	lpm	r26, Z+
    29cc:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    29ce:	9f b7       	in	r25, 0x3f	; 63
	cli();
    29d0:	f8 94       	cli

	if (val == LOW) {
    29d2:	11 11       	cpse	r17, r1
    29d4:	04 c0       	rjmp	.+8      	; 0x29de <digitalWrite+0x4c>
		*out &= ~bit;
    29d6:	8c 91       	ld	r24, X
    29d8:	d0 95       	com	r29
    29da:	d8 23       	and	r29, r24
    29dc:	02 c0       	rjmp	.+4      	; 0x29e2 <digitalWrite+0x50>
	} else {
		*out |= bit;
    29de:	ec 91       	ld	r30, X
    29e0:	de 2b       	or	r29, r30
    29e2:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    29e4:	9f bf       	out	0x3f, r25	; 63
}
    29e6:	df 91       	pop	r29
    29e8:	cf 91       	pop	r28
    29ea:	1f 91       	pop	r17
    29ec:	08 95       	ret

000029ee <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    29ee:	08 95       	ret

000029f0 <__unordsf2>:
    29f0:	13 d8       	rcall	.-4058   	; 0x1a18 <__fp_cmp>
    29f2:	88 0b       	sbc	r24, r24
    29f4:	99 0b       	sbc	r25, r25
    29f6:	08 95       	ret

000029f8 <__udivmodsi4>:
    29f8:	a1 e2       	ldi	r26, 0x21	; 33
    29fa:	1a 2e       	mov	r1, r26
    29fc:	aa 1b       	sub	r26, r26
    29fe:	bb 1b       	sub	r27, r27
    2a00:	fd 01       	movw	r30, r26
    2a02:	0d c0       	rjmp	.+26     	; 0x2a1e <__udivmodsi4_ep>

00002a04 <__udivmodsi4_loop>:
    2a04:	aa 1f       	adc	r26, r26
    2a06:	bb 1f       	adc	r27, r27
    2a08:	ee 1f       	adc	r30, r30
    2a0a:	ff 1f       	adc	r31, r31
    2a0c:	a2 17       	cp	r26, r18
    2a0e:	b3 07       	cpc	r27, r19
    2a10:	e4 07       	cpc	r30, r20
    2a12:	f5 07       	cpc	r31, r21
    2a14:	20 f0       	brcs	.+8      	; 0x2a1e <__udivmodsi4_ep>
    2a16:	a2 1b       	sub	r26, r18
    2a18:	b3 0b       	sbc	r27, r19
    2a1a:	e4 0b       	sbc	r30, r20
    2a1c:	f5 0b       	sbc	r31, r21

00002a1e <__udivmodsi4_ep>:
    2a1e:	66 1f       	adc	r22, r22
    2a20:	77 1f       	adc	r23, r23
    2a22:	88 1f       	adc	r24, r24
    2a24:	99 1f       	adc	r25, r25
    2a26:	1a 94       	dec	r1
    2a28:	69 f7       	brne	.-38     	; 0x2a04 <__udivmodsi4_loop>
    2a2a:	60 95       	com	r22
    2a2c:	70 95       	com	r23
    2a2e:	80 95       	com	r24
    2a30:	90 95       	com	r25
    2a32:	9b 01       	movw	r18, r22
    2a34:	ac 01       	movw	r20, r24
    2a36:	bd 01       	movw	r22, r26
    2a38:	cf 01       	movw	r24, r30
    2a3a:	08 95       	ret

00002a3c <__divmodsi4>:
    2a3c:	05 2e       	mov	r0, r21
    2a3e:	97 fb       	bst	r25, 7
    2a40:	16 f4       	brtc	.+4      	; 0x2a46 <__divmodsi4+0xa>
    2a42:	00 94       	com	r0
    2a44:	0f d0       	rcall	.+30     	; 0x2a64 <__negsi2>
    2a46:	57 fd       	sbrc	r21, 7
    2a48:	05 d0       	rcall	.+10     	; 0x2a54 <__divmodsi4_neg2>
    2a4a:	d6 df       	rcall	.-84     	; 0x29f8 <__udivmodsi4>
    2a4c:	07 fc       	sbrc	r0, 7
    2a4e:	02 d0       	rcall	.+4      	; 0x2a54 <__divmodsi4_neg2>
    2a50:	46 f4       	brtc	.+16     	; 0x2a62 <__divmodsi4_exit>
    2a52:	08 c0       	rjmp	.+16     	; 0x2a64 <__negsi2>

00002a54 <__divmodsi4_neg2>:
    2a54:	50 95       	com	r21
    2a56:	40 95       	com	r20
    2a58:	30 95       	com	r19
    2a5a:	21 95       	neg	r18
    2a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5e:	4f 4f       	sbci	r20, 0xFF	; 255
    2a60:	5f 4f       	sbci	r21, 0xFF	; 255

00002a62 <__divmodsi4_exit>:
    2a62:	08 95       	ret

00002a64 <__negsi2>:
    2a64:	90 95       	com	r25
    2a66:	80 95       	com	r24
    2a68:	70 95       	com	r23
    2a6a:	61 95       	neg	r22
    2a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a6e:	8f 4f       	sbci	r24, 0xFF	; 255
    2a70:	9f 4f       	sbci	r25, 0xFF	; 255
    2a72:	08 95       	ret

00002a74 <__tablejump2__>:
    2a74:	ee 0f       	add	r30, r30
    2a76:	ff 1f       	adc	r31, r31
    2a78:	88 1f       	adc	r24, r24
    2a7a:	8b bf       	out	0x3b, r24	; 59
    2a7c:	07 90       	elpm	r0, Z+
    2a7e:	f6 91       	elpm	r31, Z
    2a80:	e0 2d       	mov	r30, r0
    2a82:	19 94       	eijmp

00002a84 <strtod>:
    2a84:	8f 92       	push	r8
    2a86:	9f 92       	push	r9
    2a88:	af 92       	push	r10
    2a8a:	bf 92       	push	r11
    2a8c:	cf 92       	push	r12
    2a8e:	df 92       	push	r13
    2a90:	ef 92       	push	r14
    2a92:	ff 92       	push	r15
    2a94:	0f 93       	push	r16
    2a96:	1f 93       	push	r17
    2a98:	cf 93       	push	r28
    2a9a:	df 93       	push	r29
    2a9c:	ec 01       	movw	r28, r24
    2a9e:	6b 01       	movw	r12, r22
    2aa0:	61 15       	cp	r22, r1
    2aa2:	71 05       	cpc	r23, r1
    2aa4:	19 f0       	breq	.+6      	; 0x2aac <strtod+0x28>
    2aa6:	fb 01       	movw	r30, r22
    2aa8:	91 83       	std	Z+1, r25	; 0x01
    2aaa:	80 83       	st	Z, r24
    2aac:	7e 01       	movw	r14, r28
    2aae:	ff ef       	ldi	r31, 0xFF	; 255
    2ab0:	ef 1a       	sub	r14, r31
    2ab2:	ff 0a       	sbc	r15, r31
    2ab4:	08 81       	ld	r16, Y
    2ab6:	80 2f       	mov	r24, r16
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	3e d1       	rcall	.+636    	; 0x2d38 <isspace>
    2abc:	89 2b       	or	r24, r25
    2abe:	11 f0       	breq	.+4      	; 0x2ac4 <strtod+0x40>
    2ac0:	e7 01       	movw	r28, r14
    2ac2:	f4 cf       	rjmp	.-24     	; 0x2aac <strtod+0x28>
    2ac4:	0d 32       	cpi	r16, 0x2D	; 45
    2ac6:	39 f4       	brne	.+14     	; 0x2ad6 <strtod+0x52>
    2ac8:	7e 01       	movw	r14, r28
    2aca:	82 e0       	ldi	r24, 0x02	; 2
    2acc:	e8 0e       	add	r14, r24
    2ace:	f1 1c       	adc	r15, r1
    2ad0:	09 81       	ldd	r16, Y+1	; 0x01
    2ad2:	11 e0       	ldi	r17, 0x01	; 1
    2ad4:	08 c0       	rjmp	.+16     	; 0x2ae6 <strtod+0x62>
    2ad6:	0b 32       	cpi	r16, 0x2B	; 43
    2ad8:	29 f4       	brne	.+10     	; 0x2ae4 <strtod+0x60>
    2ada:	7e 01       	movw	r14, r28
    2adc:	92 e0       	ldi	r25, 0x02	; 2
    2ade:	e9 0e       	add	r14, r25
    2ae0:	f1 1c       	adc	r15, r1
    2ae2:	09 81       	ldd	r16, Y+1	; 0x01
    2ae4:	10 e0       	ldi	r17, 0x00	; 0
    2ae6:	e7 01       	movw	r28, r14
    2ae8:	21 97       	sbiw	r28, 0x01	; 1
    2aea:	43 e0       	ldi	r20, 0x03	; 3
    2aec:	50 e0       	ldi	r21, 0x00	; 0
    2aee:	6c e5       	ldi	r22, 0x5C	; 92
    2af0:	71 e0       	ldi	r23, 0x01	; 1
    2af2:	ce 01       	movw	r24, r28
    2af4:	29 d1       	rcall	.+594    	; 0x2d48 <strncasecmp_P>
    2af6:	89 2b       	or	r24, r25
    2af8:	b9 f4       	brne	.+46     	; 0x2b28 <strtod+0xa4>
    2afa:	23 96       	adiw	r28, 0x03	; 3
    2afc:	45 e0       	ldi	r20, 0x05	; 5
    2afe:	50 e0       	ldi	r21, 0x00	; 0
    2b00:	67 e5       	ldi	r22, 0x57	; 87
    2b02:	71 e0       	ldi	r23, 0x01	; 1
    2b04:	ce 01       	movw	r24, r28
    2b06:	20 d1       	rcall	.+576    	; 0x2d48 <strncasecmp_P>
    2b08:	89 2b       	or	r24, r25
    2b0a:	09 f4       	brne	.+2      	; 0x2b0e <strtod+0x8a>
    2b0c:	25 96       	adiw	r28, 0x05	; 5
    2b0e:	c1 14       	cp	r12, r1
    2b10:	d1 04       	cpc	r13, r1
    2b12:	19 f0       	breq	.+6      	; 0x2b1a <strtod+0x96>
    2b14:	f6 01       	movw	r30, r12
    2b16:	d1 83       	std	Z+1, r29	; 0x01
    2b18:	c0 83       	st	Z, r28
    2b1a:	11 11       	cpse	r17, r1
    2b1c:	f4 c0       	rjmp	.+488    	; 0x2d06 <strtod+0x282>
    2b1e:	60 e0       	ldi	r22, 0x00	; 0
    2b20:	70 e0       	ldi	r23, 0x00	; 0
    2b22:	80 e8       	ldi	r24, 0x80	; 128
    2b24:	9f e7       	ldi	r25, 0x7F	; 127
    2b26:	f8 c0       	rjmp	.+496    	; 0x2d18 <strtod+0x294>
    2b28:	43 e0       	ldi	r20, 0x03	; 3
    2b2a:	50 e0       	ldi	r21, 0x00	; 0
    2b2c:	64 e5       	ldi	r22, 0x54	; 84
    2b2e:	71 e0       	ldi	r23, 0x01	; 1
    2b30:	ce 01       	movw	r24, r28
    2b32:	0a d1       	rcall	.+532    	; 0x2d48 <strncasecmp_P>
    2b34:	89 2b       	or	r24, r25
    2b36:	59 f4       	brne	.+22     	; 0x2b4e <strtod+0xca>
    2b38:	c1 14       	cp	r12, r1
    2b3a:	d1 04       	cpc	r13, r1
    2b3c:	09 f4       	brne	.+2      	; 0x2b40 <strtod+0xbc>
    2b3e:	e8 c0       	rjmp	.+464    	; 0x2d10 <strtod+0x28c>
    2b40:	f2 e0       	ldi	r31, 0x02	; 2
    2b42:	ef 0e       	add	r14, r31
    2b44:	f1 1c       	adc	r15, r1
    2b46:	f6 01       	movw	r30, r12
    2b48:	f1 82       	std	Z+1, r15	; 0x01
    2b4a:	e0 82       	st	Z, r14
    2b4c:	e1 c0       	rjmp	.+450    	; 0x2d10 <strtod+0x28c>
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	a9 01       	movw	r20, r18
    2b54:	c0 e0       	ldi	r28, 0x00	; 0
    2b56:	d0 e0       	ldi	r29, 0x00	; 0
    2b58:	f7 01       	movw	r30, r14
    2b5a:	60 ed       	ldi	r22, 0xD0	; 208
    2b5c:	a6 2e       	mov	r10, r22
    2b5e:	a0 0e       	add	r10, r16
    2b60:	89 e0       	ldi	r24, 0x09	; 9
    2b62:	8a 15       	cp	r24, r10
    2b64:	28 f1       	brcs	.+74     	; 0x2bb0 <strtod+0x12c>
    2b66:	91 2f       	mov	r25, r17
    2b68:	92 60       	ori	r25, 0x02	; 2
    2b6a:	b9 2e       	mov	r11, r25
    2b6c:	81 2f       	mov	r24, r17
    2b6e:	88 70       	andi	r24, 0x08	; 8
    2b70:	12 ff       	sbrs	r17, 2
    2b72:	04 c0       	rjmp	.+8      	; 0x2b7c <strtod+0xf8>
    2b74:	81 11       	cpse	r24, r1
    2b76:	23 c0       	rjmp	.+70     	; 0x2bbe <strtod+0x13a>
    2b78:	21 96       	adiw	r28, 0x01	; 1
    2b7a:	21 c0       	rjmp	.+66     	; 0x2bbe <strtod+0x13a>
    2b7c:	81 11       	cpse	r24, r1
    2b7e:	21 97       	sbiw	r28, 0x01	; 1
    2b80:	a5 e0       	ldi	r26, 0x05	; 5
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	07 d1       	rcall	.+526    	; 0x2d94 <__muluhisi3>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	88 0f       	add	r24, r24
    2b8c:	99 1f       	adc	r25, r25
    2b8e:	aa 1f       	adc	r26, r26
    2b90:	bb 1f       	adc	r27, r27
    2b92:	9c 01       	movw	r18, r24
    2b94:	ad 01       	movw	r20, r26
    2b96:	2a 0d       	add	r18, r10
    2b98:	31 1d       	adc	r19, r1
    2b9a:	41 1d       	adc	r20, r1
    2b9c:	51 1d       	adc	r21, r1
    2b9e:	28 39       	cpi	r18, 0x98	; 152
    2ba0:	89 e9       	ldi	r24, 0x99	; 153
    2ba2:	38 07       	cpc	r19, r24
    2ba4:	48 07       	cpc	r20, r24
    2ba6:	89 e1       	ldi	r24, 0x19	; 25
    2ba8:	58 07       	cpc	r21, r24
    2baa:	48 f0       	brcs	.+18     	; 0x2bbe <strtod+0x13a>
    2bac:	16 60       	ori	r17, 0x06	; 6
    2bae:	06 c0       	rjmp	.+12     	; 0x2bbc <strtod+0x138>
    2bb0:	9e ef       	ldi	r25, 0xFE	; 254
    2bb2:	a9 12       	cpse	r10, r25
    2bb4:	0a c0       	rjmp	.+20     	; 0x2bca <strtod+0x146>
    2bb6:	13 fd       	sbrc	r17, 3
    2bb8:	40 c0       	rjmp	.+128    	; 0x2c3a <strtod+0x1b6>
    2bba:	18 60       	ori	r17, 0x08	; 8
    2bbc:	b1 2e       	mov	r11, r17
    2bbe:	8f ef       	ldi	r24, 0xFF	; 255
    2bc0:	e8 1a       	sub	r14, r24
    2bc2:	f8 0a       	sbc	r15, r24
    2bc4:	00 81       	ld	r16, Z
    2bc6:	1b 2d       	mov	r17, r11
    2bc8:	c7 cf       	rjmp	.-114    	; 0x2b58 <strtod+0xd4>
    2bca:	80 2f       	mov	r24, r16
    2bcc:	8f 7d       	andi	r24, 0xDF	; 223
    2bce:	85 34       	cpi	r24, 0x45	; 69
    2bd0:	a1 f5       	brne	.+104    	; 0x2c3a <strtod+0x1b6>
    2bd2:	80 81       	ld	r24, Z
    2bd4:	8d 32       	cpi	r24, 0x2D	; 45
    2bd6:	11 f4       	brne	.+4      	; 0x2bdc <strtod+0x158>
    2bd8:	10 61       	ori	r17, 0x10	; 16
    2bda:	06 c0       	rjmp	.+12     	; 0x2be8 <strtod+0x164>
    2bdc:	8b 32       	cpi	r24, 0x2B	; 43
    2bde:	21 f0       	breq	.+8      	; 0x2be8 <strtod+0x164>
    2be0:	31 96       	adiw	r30, 0x01	; 1
    2be2:	61 e0       	ldi	r22, 0x01	; 1
    2be4:	70 e0       	ldi	r23, 0x00	; 0
    2be6:	04 c0       	rjmp	.+8      	; 0x2bf0 <strtod+0x16c>
    2be8:	81 81       	ldd	r24, Z+1	; 0x01
    2bea:	32 96       	adiw	r30, 0x02	; 2
    2bec:	62 e0       	ldi	r22, 0x02	; 2
    2bee:	70 e0       	ldi	r23, 0x00	; 0
    2bf0:	80 53       	subi	r24, 0x30	; 48
    2bf2:	8a 30       	cpi	r24, 0x0A	; 10
    2bf4:	18 f0       	brcs	.+6      	; 0x2bfc <strtod+0x178>
    2bf6:	e6 1b       	sub	r30, r22
    2bf8:	f7 0b       	sbc	r31, r23
    2bfa:	1f c0       	rjmp	.+62     	; 0x2c3a <strtod+0x1b6>
    2bfc:	60 e0       	ldi	r22, 0x00	; 0
    2bfe:	70 e0       	ldi	r23, 0x00	; 0
    2c00:	60 38       	cpi	r22, 0x80	; 128
    2c02:	9c e0       	ldi	r25, 0x0C	; 12
    2c04:	79 07       	cpc	r23, r25
    2c06:	5c f4       	brge	.+22     	; 0x2c1e <strtod+0x19a>
    2c08:	db 01       	movw	r26, r22
    2c0a:	aa 0f       	add	r26, r26
    2c0c:	bb 1f       	adc	r27, r27
    2c0e:	aa 0f       	add	r26, r26
    2c10:	bb 1f       	adc	r27, r27
    2c12:	6a 0f       	add	r22, r26
    2c14:	7b 1f       	adc	r23, r27
    2c16:	66 0f       	add	r22, r22
    2c18:	77 1f       	adc	r23, r23
    2c1a:	68 0f       	add	r22, r24
    2c1c:	71 1d       	adc	r23, r1
    2c1e:	31 96       	adiw	r30, 0x01	; 1
    2c20:	df 01       	movw	r26, r30
    2c22:	11 97       	sbiw	r26, 0x01	; 1
    2c24:	8c 91       	ld	r24, X
    2c26:	80 53       	subi	r24, 0x30	; 48
    2c28:	8a 30       	cpi	r24, 0x0A	; 10
    2c2a:	50 f3       	brcs	.-44     	; 0x2c00 <strtod+0x17c>
    2c2c:	14 ff       	sbrs	r17, 4
    2c2e:	03 c0       	rjmp	.+6      	; 0x2c36 <strtod+0x1b2>
    2c30:	71 95       	neg	r23
    2c32:	61 95       	neg	r22
    2c34:	71 09       	sbc	r23, r1
    2c36:	c6 0f       	add	r28, r22
    2c38:	d7 1f       	adc	r29, r23
    2c3a:	11 ff       	sbrs	r17, 1
    2c3c:	08 c0       	rjmp	.+16     	; 0x2c4e <strtod+0x1ca>
    2c3e:	c1 14       	cp	r12, r1
    2c40:	d1 04       	cpc	r13, r1
    2c42:	29 f0       	breq	.+10     	; 0x2c4e <strtod+0x1ca>
    2c44:	cf 01       	movw	r24, r30
    2c46:	01 97       	sbiw	r24, 0x01	; 1
    2c48:	f6 01       	movw	r30, r12
    2c4a:	91 83       	std	Z+1, r25	; 0x01
    2c4c:	80 83       	st	Z, r24
    2c4e:	ca 01       	movw	r24, r20
    2c50:	b9 01       	movw	r22, r18
    2c52:	0e 94 cf 0c 	call	0x199e	; 0x199e <__floatunsisf>
    2c56:	21 2f       	mov	r18, r17
    2c58:	23 70       	andi	r18, 0x03	; 3
    2c5a:	23 30       	cpi	r18, 0x03	; 3
    2c5c:	19 f0       	breq	.+6      	; 0x2c64 <strtod+0x1e0>
    2c5e:	4b 01       	movw	r8, r22
    2c60:	5c 01       	movw	r10, r24
    2c62:	06 c0       	rjmp	.+12     	; 0x2c70 <strtod+0x1ec>
    2c64:	4b 01       	movw	r8, r22
    2c66:	5c 01       	movw	r10, r24
    2c68:	b7 fa       	bst	r11, 7
    2c6a:	b0 94       	com	r11
    2c6c:	b7 f8       	bld	r11, 7
    2c6e:	b0 94       	com	r11
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	a9 01       	movw	r20, r18
    2c76:	c5 01       	movw	r24, r10
    2c78:	b4 01       	movw	r22, r8
    2c7a:	0e 94 2f 0c 	call	0x185e	; 0x185e <__cmpsf2>
    2c7e:	88 23       	and	r24, r24
    2c80:	09 f4       	brne	.+2      	; 0x2c84 <strtod+0x200>
    2c82:	3e c0       	rjmp	.+124    	; 0x2d00 <strtod+0x27c>
    2c84:	d7 ff       	sbrs	r29, 7
    2c86:	06 c0       	rjmp	.+12     	; 0x2c94 <strtod+0x210>
    2c88:	d1 95       	neg	r29
    2c8a:	c1 95       	neg	r28
    2c8c:	d1 09       	sbc	r29, r1
    2c8e:	03 e7       	ldi	r16, 0x73	; 115
    2c90:	11 e0       	ldi	r17, 0x01	; 1
    2c92:	02 c0       	rjmp	.+4      	; 0x2c98 <strtod+0x214>
    2c94:	0b e8       	ldi	r16, 0x8B	; 139
    2c96:	11 e0       	ldi	r17, 0x01	; 1
    2c98:	68 01       	movw	r12, r16
    2c9a:	f8 e1       	ldi	r31, 0x18	; 24
    2c9c:	cf 1a       	sub	r12, r31
    2c9e:	d1 08       	sbc	r13, r1
    2ca0:	90 e2       	ldi	r25, 0x20	; 32
    2ca2:	e9 2e       	mov	r14, r25
    2ca4:	f1 2c       	mov	r15, r1
    2ca6:	ce 15       	cp	r28, r14
    2ca8:	df 05       	cpc	r29, r15
    2caa:	74 f0       	brlt	.+28     	; 0x2cc8 <strtod+0x244>
    2cac:	f8 01       	movw	r30, r16
    2cae:	25 91       	lpm	r18, Z+
    2cb0:	35 91       	lpm	r19, Z+
    2cb2:	45 91       	lpm	r20, Z+
    2cb4:	54 91       	lpm	r21, Z
    2cb6:	c5 01       	movw	r24, r10
    2cb8:	b4 01       	movw	r22, r8
    2cba:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__mulsf3>
    2cbe:	4b 01       	movw	r8, r22
    2cc0:	5c 01       	movw	r10, r24
    2cc2:	ce 19       	sub	r28, r14
    2cc4:	df 09       	sbc	r29, r15
    2cc6:	ef cf       	rjmp	.-34     	; 0x2ca6 <strtod+0x222>
    2cc8:	04 50       	subi	r16, 0x04	; 4
    2cca:	11 09       	sbc	r17, r1
    2ccc:	f5 94       	asr	r15
    2cce:	e7 94       	ror	r14
    2cd0:	0c 15       	cp	r16, r12
    2cd2:	1d 05       	cpc	r17, r13
    2cd4:	41 f7       	brne	.-48     	; 0x2ca6 <strtod+0x222>
    2cd6:	8a 2d       	mov	r24, r10
    2cd8:	88 0f       	add	r24, r24
    2cda:	8b 2d       	mov	r24, r11
    2cdc:	88 1f       	adc	r24, r24
    2cde:	8f 3f       	cpi	r24, 0xFF	; 255
    2ce0:	49 f0       	breq	.+18     	; 0x2cf4 <strtod+0x270>
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	a9 01       	movw	r20, r18
    2ce8:	c5 01       	movw	r24, r10
    2cea:	b4 01       	movw	r22, r8
    2cec:	0e 94 2f 0c 	call	0x185e	; 0x185e <__cmpsf2>
    2cf0:	81 11       	cpse	r24, r1
    2cf2:	06 c0       	rjmp	.+12     	; 0x2d00 <strtod+0x27c>
    2cf4:	82 e2       	ldi	r24, 0x22	; 34
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	90 93 b7 03 	sts	0x03B7, r25	; 0x8003b7 <errno+0x1>
    2cfc:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <errno>
    2d00:	c5 01       	movw	r24, r10
    2d02:	b4 01       	movw	r22, r8
    2d04:	09 c0       	rjmp	.+18     	; 0x2d18 <strtod+0x294>
    2d06:	60 e0       	ldi	r22, 0x00	; 0
    2d08:	70 e0       	ldi	r23, 0x00	; 0
    2d0a:	80 e8       	ldi	r24, 0x80	; 128
    2d0c:	9f ef       	ldi	r25, 0xFF	; 255
    2d0e:	04 c0       	rjmp	.+8      	; 0x2d18 <strtod+0x294>
    2d10:	60 e0       	ldi	r22, 0x00	; 0
    2d12:	70 e0       	ldi	r23, 0x00	; 0
    2d14:	80 ec       	ldi	r24, 0xC0	; 192
    2d16:	9f e7       	ldi	r25, 0x7F	; 127
    2d18:	df 91       	pop	r29
    2d1a:	cf 91       	pop	r28
    2d1c:	1f 91       	pop	r17
    2d1e:	0f 91       	pop	r16
    2d20:	ff 90       	pop	r15
    2d22:	ef 90       	pop	r14
    2d24:	df 90       	pop	r13
    2d26:	cf 90       	pop	r12
    2d28:	bf 90       	pop	r11
    2d2a:	af 90       	pop	r10
    2d2c:	9f 90       	pop	r9
    2d2e:	8f 90       	pop	r8
    2d30:	08 95       	ret

00002d32 <atof>:
    2d32:	66 27       	eor	r22, r22
    2d34:	77 27       	eor	r23, r23
    2d36:	a6 ce       	rjmp	.-692    	; 0x2a84 <strtod>

00002d38 <isspace>:
    2d38:	91 11       	cpse	r25, r1
    2d3a:	29 c0       	rjmp	.+82     	; 0x2d8e <__ctype_isfalse>
    2d3c:	80 32       	cpi	r24, 0x20	; 32
    2d3e:	19 f0       	breq	.+6      	; 0x2d46 <isspace+0xe>
    2d40:	89 50       	subi	r24, 0x09	; 9
    2d42:	85 50       	subi	r24, 0x05	; 5
    2d44:	d0 f7       	brcc	.-12     	; 0x2d3a <isspace+0x2>
    2d46:	08 95       	ret

00002d48 <strncasecmp_P>:
    2d48:	fb 01       	movw	r30, r22
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	41 50       	subi	r20, 0x01	; 1
    2d4e:	50 40       	sbci	r21, 0x00	; 0
    2d50:	88 f0       	brcs	.+34     	; 0x2d74 <strncasecmp_P+0x2c>
    2d52:	8d 91       	ld	r24, X+
    2d54:	81 34       	cpi	r24, 0x41	; 65
    2d56:	1c f0       	brlt	.+6      	; 0x2d5e <strncasecmp_P+0x16>
    2d58:	8b 35       	cpi	r24, 0x5B	; 91
    2d5a:	0c f4       	brge	.+2      	; 0x2d5e <strncasecmp_P+0x16>
    2d5c:	80 5e       	subi	r24, 0xE0	; 224
    2d5e:	65 91       	lpm	r22, Z+
    2d60:	61 34       	cpi	r22, 0x41	; 65
    2d62:	1c f0       	brlt	.+6      	; 0x2d6a <strncasecmp_P+0x22>
    2d64:	6b 35       	cpi	r22, 0x5B	; 91
    2d66:	0c f4       	brge	.+2      	; 0x2d6a <strncasecmp_P+0x22>
    2d68:	60 5e       	subi	r22, 0xE0	; 224
    2d6a:	86 1b       	sub	r24, r22
    2d6c:	61 11       	cpse	r22, r1
    2d6e:	71 f3       	breq	.-36     	; 0x2d4c <strncasecmp_P+0x4>
    2d70:	99 0b       	sbc	r25, r25
    2d72:	08 95       	ret
    2d74:	88 1b       	sub	r24, r24
    2d76:	fc cf       	rjmp	.-8      	; 0x2d70 <strncasecmp_P+0x28>

00002d78 <strchr>:
    2d78:	fc 01       	movw	r30, r24
    2d7a:	81 91       	ld	r24, Z+
    2d7c:	86 17       	cp	r24, r22
    2d7e:	21 f0       	breq	.+8      	; 0x2d88 <strchr+0x10>
    2d80:	88 23       	and	r24, r24
    2d82:	d9 f7       	brne	.-10     	; 0x2d7a <strchr+0x2>
    2d84:	99 27       	eor	r25, r25
    2d86:	08 95       	ret
    2d88:	31 97       	sbiw	r30, 0x01	; 1
    2d8a:	cf 01       	movw	r24, r30
    2d8c:	08 95       	ret

00002d8e <__ctype_isfalse>:
    2d8e:	99 27       	eor	r25, r25
    2d90:	88 27       	eor	r24, r24

00002d92 <__ctype_istrue>:
    2d92:	08 95       	ret

00002d94 <__muluhisi3>:
    2d94:	09 d0       	rcall	.+18     	; 0x2da8 <__umulhisi3>
    2d96:	a5 9f       	mul	r26, r21
    2d98:	90 0d       	add	r25, r0
    2d9a:	b4 9f       	mul	r27, r20
    2d9c:	90 0d       	add	r25, r0
    2d9e:	a4 9f       	mul	r26, r20
    2da0:	80 0d       	add	r24, r0
    2da2:	91 1d       	adc	r25, r1
    2da4:	11 24       	eor	r1, r1
    2da6:	08 95       	ret

00002da8 <__umulhisi3>:
    2da8:	a2 9f       	mul	r26, r18
    2daa:	b0 01       	movw	r22, r0
    2dac:	b3 9f       	mul	r27, r19
    2dae:	c0 01       	movw	r24, r0
    2db0:	a3 9f       	mul	r26, r19
    2db2:	70 0d       	add	r23, r0
    2db4:	81 1d       	adc	r24, r1
    2db6:	11 24       	eor	r1, r1
    2db8:	91 1d       	adc	r25, r1
    2dba:	b2 9f       	mul	r27, r18
    2dbc:	70 0d       	add	r23, r0
    2dbe:	81 1d       	adc	r24, r1
    2dc0:	11 24       	eor	r1, r1
    2dc2:	91 1d       	adc	r25, r1
    2dc4:	08 95       	ret

00002dc6 <_exit>:
    2dc6:	f8 94       	cli

00002dc8 <__stop_program>:
    2dc8:	ff cf       	rjmp	.-2      	; 0x2dc8 <__stop_program>
